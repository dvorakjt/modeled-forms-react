{"version":3,"sources":["../src/model/model.config.ts","../src/model/constituents/validators/util/email.ts","../src/model/constituents/validators/util/required.ts","../src/model/container.ts","../src/model/constituents/validators/single-input/async-single-input-validator-suite.ts","../src/model/constituents/util/log-error-in-dev-mode.ts","../src/model/constituents/validators/single-input/hybrid-single-input-validator-suite.ts","../src/model/constituents/validators/single-input/sync-single-input-validator-suite.ts","../src/model/constituents/validators/single-input/single-input-validator-suite-factory-impl.ts","../src/model/constituents/fields/dual-field-impl.ts","../src/model/constituents/fields/field-impl.ts","../src/model/constituents/util/copy-object.ts","../src/model/constituents/fields/base-field-factory-impl.ts","../src/model/constituents/forms/nested-form-impl.ts","../src/model/parser/form-elements/field-template-parser-impl.ts","../src/model/parser/form-elements/form-elements-parser-impl.ts","../src/model/constituents/aggregators/multi-field-aggregator-impl.ts","../src/model/constituents/aggregators/multi-input-validator-messages-aggregator-impl.ts","../src/model/constituents/aggregators/aggregator-factory-impl.ts","../src/model/constituents/reducers/field-state-reducer-impl.ts","../src/model/constituents/reducers/finalizer-facing-multi-input-validator-reducer.ts","../src/model/types/constituents/state/finalizer-validity.enum.ts","../src/model/constituents/reducers/finalizer-validity-reducer-impl.ts","../src/model/constituents/reducers/user-facing-multi-input-validator-reducer.ts","../src/model/constituents/reducers/validity-reducer-impl.ts","../src/model/constituents/reducers/reducer-factory-impl.ts","../src/model/constituents/proxies/aggregated-state-changes-proxy-producer-impl.ts","../src/model/constituents/proxies/proxy-producer-factory-impl.ts","../src/model/constituents/emitters/one-time-event-emitter-impl.ts","../src/model/constituents/emitters/one-time-value-emitter-impl.ts","../src/model/constituents/emitters/event-emitter-factory-impl.ts","../src/model/constituents/subjects/on-initial-subscription-handling-behavior-subject-impl.ts","../src/model/constituents/subjects/subject-factory-impl.ts","../src/model/constituents/adapters/async-adapter.ts","../src/model/constituents/adapters/sync-adapter.ts","../src/model/constituents/adapters/adapter-factory-impl.ts","../src/model/constituents/fields/state-controlled-field.ts","../src/model/constituents/fields/state-controlled-dual-field.ts","../src/model/constituents/fields/value-controlled-field.ts","../src/model/constituents/fields/value-controlled-dual-field.ts","../src/model/constituents/fields/controlled-field-factory-impl.ts","../src/index.ts"],"sourcesContent":["//read top level config files\nconst config = {\n  autoTrim: true,\n  emailRegex:\n    /^[A-Z0-9]+(?:[_%+.-][A-Z0-9]+)*@[A-Z0-9]+(?:[.-][A-Z0-9]+)\\.[A-Z]{2,}$/i,\n};\n\nexport { config };\n","import { config } from \"../../../model.config\";\nimport type { SyncValidator } from \"../../../types/constituents/validators/sync-validator.type\";\nimport type { ValidatorResult } from \"../../../types/constituents/validators/validator-result.interface\";\n\nexport function email( errorMessage : string, successMessage? : string) : SyncValidator<string> {\n  const regex = config.emailRegex;\n\n  return (value : string) => {\n    if(config.autoTrim) value = value.trim();\n\n    const result : ValidatorResult = {\n      isValid : regex.test(value)\n    }\n    if(!result.isValid) {\n      result.message = errorMessage\n    } else if(successMessage) {\n      result.message = successMessage\n    }\n\n    return result;\n  }\n}","import { config } from '../../../model.config';\nimport type { SyncValidator } from '../../../types/constituents/validators/sync-validator.type';\nimport type { ValidatorResult } from '../../../types/constituents/validators/validator-result.interface';\n\nexport function required(errorMessage : string, successMessage? : string) : SyncValidator<string> {\n  return (value : string) => {\n    if(config.autoTrim) value = value.trim();\n\n    const result : ValidatorResult = {\n      isValid : value.length > 0\n    }\n    if(!result.isValid) {\n      result.message = errorMessage\n    } else if(successMessage) {\n      result.message = successMessage\n    }\n\n    return result;\n  }\n}","import 'reflect-metadata';\r\nimport { Container } from 'inversify';\r\nimport { helpers } from 'inversify-vanillajs-helpers';\r\nimport { SingleInputValidatorSuiteFactoryImpl } from './constituents/validators/single-input/single-input-validator-suite-factory-impl';\r\nimport { BaseFieldFactoryImpl } from './constituents/fields/base-field-factory-impl';\r\nimport { SingleInputValidatorSuiteFactory } from './types/constituents/validators/single-input/single-input-validator-suite-factory.interface';\r\nimport { BaseFieldFactory } from './types/constituents/fields/base-field-factory.interface';\r\nimport { FormElementsParserImpl } from './parser/form-elements/form-elements-parser-impl';\r\nimport { FormElementsParser } from './types/parser/form-elements/form-elements-parser.interface';\r\nimport { AggregatorFactory } from './types/constituents/aggregators/aggregator-factory.interface';\r\nimport { AggregatorFactoryImpl } from './constituents/aggregators/aggregator-factory-impl';\r\nimport { ReducerFactoryImpl } from './constituents/reducers/reducer-factory-impl';\r\nimport { ProxyProducerFactoryImpl } from './constituents/proxies/proxy-producer-factory-impl';\r\nimport { EmitterFactoryImpl } from './constituents/emitters/event-emitter-factory-impl';\r\nimport { SubjectFactoryImpl } from './constituents/subjects/subject-factory-impl';\r\nimport { AdapterFactoryImpl } from './constituents/adapters/adapter-factory-impl';\r\nimport { ControlledFieldFactoryImpl } from './constituents/fields/controlled-field-factory-impl';\r\nimport { ReducerFactory } from './types/constituents/reducers/reducer-factory.interface';\r\nimport { EmitterFactory } from './types/constituents/emitters/emitter-factory.interface';\r\nimport { SubjectFactory } from './types/constituents/subjects/subject-factory.interface';\r\nimport { ProxyProducerFactory } from './types/constituents/proxies/proxy-producer-factory.interface';\r\nimport { AdapterFactory } from './types/constituents/adapters/adapter-factory.interface';\r\nimport { ControlledFieldFactory } from './types/constituents/fields/controlled-field-factory.interface';\r\n\r\nexport enum Services {\r\n  SingleInputValidatorFactory = 'SingleInputValidatorFactory',\r\n  BaseFieldFactory = 'BaseFieldFactory',\r\n  ProxyProducerFactory = 'ProxyProducerFactory',\r\n  ReducerFactory = 'ReducerFactory',\r\n  EmitterFactory = 'EmitterFactory',\r\n  SubjectFactory = 'SubjectFactory',\r\n  AggregatorFactory = 'AggregatorFactory',\r\n  AdapterFactory = 'AdapterFactory',\r\n  ControlledFieldFactory = 'ControlledFieldFactory',\r\n  FormElementsParser = 'FormElementsParser'\r\n}\r\n\r\nhelpers.annotate(SingleInputValidatorSuiteFactoryImpl);\r\nhelpers.annotate(ReducerFactoryImpl);\r\nhelpers.annotate(EmitterFactoryImpl);\r\nhelpers.annotate(SubjectFactoryImpl, [Services.EmitterFactory]);\r\nhelpers.annotate(ProxyProducerFactoryImpl, [Services.ReducerFactory]);\r\nhelpers.annotate(BaseFieldFactoryImpl, [Services.SingleInputValidatorFactory]);\r\nhelpers.annotate(AggregatorFactoryImpl, [Services.ProxyProducerFactory, Services.ReducerFactory, Services.EmitterFactory, Services.SubjectFactory]);\r\nhelpers.annotate(AdapterFactoryImpl, [Services.AggregatorFactory]);\r\nhelpers.annotate(ControlledFieldFactoryImpl, [Services.AdapterFactory]);\r\nhelpers.annotate(FormElementsParserImpl, [Services.BaseFieldFactory, Services.ControlledFieldFactory]);\r\n\r\nexport function getContainer() {\r\n  const container = new Container();\r\n\r\n  container\r\n    .bind<SingleInputValidatorSuiteFactory>(Services.SingleInputValidatorFactory)\r\n    .to(SingleInputValidatorSuiteFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<BaseFieldFactory>(Services.BaseFieldFactory)\r\n    .to(BaseFieldFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<ReducerFactory>(Services.ReducerFactory)\r\n    .to(ReducerFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<EmitterFactory>(Services.EmitterFactory)\r\n    .to(EmitterFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<SubjectFactory>(Services.SubjectFactory)\r\n    .to(SubjectFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<ProxyProducerFactory>(Services.ProxyProducerFactory)\r\n    .to(ProxyProducerFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<AggregatorFactory>(Services.AggregatorFactory)\r\n    .to(AggregatorFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<AdapterFactory>(Services.AdapterFactory)\r\n    .to(AdapterFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<ControlledFieldFactory>(Services.ControlledFieldFactory)\r\n    .to(ControlledFieldFactoryImpl)\r\n    .inSingletonScope();\r\n  container\r\n    .bind<FormElementsParser>(Services.FormElementsParser)\r\n    .to(FormElementsParserImpl)\r\n    .inTransientScope();\r\n  return container;\r\n}","import { Observable, Subscriber, Subscription, from } from 'rxjs';\nimport { Validity } from '../../../types/constituents/state/validity.enum';\nimport { MessageType } from '../../../types/constituents/state/messages/message-type.enum';\nimport { GlobalMessages } from '../../../constituents/constants/global-messages.enum';\nimport type { AsyncValidator } from '../../../types/constituents/validators/async-validator.type';\nimport type { SingleInputValidatorSuite } from '../../../types/constituents/validators/single-input/single-input-validator-suite.interface';\nimport type { ValidatorSuiteResult } from '../../../types/constituents/validators/validator-suite-result.interface';\nimport type { ValidatorSuiteResultsObject } from '../../../types/constituents/validators/validator-suite-results-object.interface';\nimport type { ValidatorResult } from '../../../types/constituents/validators/validator-result.interface';\nimport { logErrorInDevMode } from '../../../constituents/util/log-error-in-dev-mode';\n\ntype ValidatorSubscriptionMap = {\n  [key : number] : Subscription\n}\n\nexport class AsyncSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly #validators: Array<AsyncValidator<T>>;\n  readonly #pendingValidatorMessage: string;\n  #validatorSubscriptions : ValidatorSubscriptionMap = {};\n\n  constructor(\n    validators: Array<AsyncValidator<T>>,\n    pendingValidatorMessage: string\n  ) {\n    this.#validators = validators;\n    this.#pendingValidatorMessage = pendingValidatorMessage;\n  }\n\n  evaluate(value: T) {\n    this.unsubscribeAll();\n    const result: ValidatorSuiteResultsObject<T> = {\n      syncResult: {\n        value,\n        validity: Validity.PENDING,\n        messages: [\n          {\n            type: MessageType.PENDING,\n            text: this.#pendingValidatorMessage,\n          },\n        ],\n      },\n    };\n    result.observable = \n      new Observable<ValidatorSuiteResult<T>>(subscriber => {\n        const observableResult: ValidatorSuiteResult<T> = {\n          value,\n          validity: Validity.VALID_FINALIZABLE,\n          messages: [],\n        };\n        for (let validatorId = 0; validatorId < this.#validators.length; validatorId++) {\n          const validator = this.#validators[validatorId];\n          try {\n            //as the validator function is user-defined, it may throw errors even before the promise rejects\n            const promise = validator(value);\n            const subscription = from(promise)\n              .subscribe(\n                this.createValidatorObserver(observableResult, subscriber, validatorId),\n              );\n            this.#validatorSubscriptions[validatorId] = subscription;\n          } catch (e) {\n            this.createValidatorObserverErrorMethod(\n              observableResult,\n              subscriber\n            )(e);\n          }\n        }\n      })\n    return result;\n  }\n\n  private createValidatorObserver(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n    validatorId : number\n  ) {\n    return {\n      next: this.createValidatorObserverNextMethod(\n        observableResult,\n        outerSubscriber,\n        validatorId\n      ),\n      error: this.createValidatorObserverErrorMethod(\n        observableResult,\n        outerSubscriber\n      )\n    };\n  }\n\n  private createValidatorObserverNextMethod(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n    validatorId : number\n  ) {\n    const nextMethod = (next: ValidatorResult) => {\n      const { isValid, message: messageTxt } = next;\n      if (!isValid) {\n        this.unsubscribeAll();\n        observableResult.validity = Validity.INVALID;\n        if (messageTxt) {\n          observableResult.messages.push({\n            type: MessageType.INVALID,\n            text: messageTxt,\n          });\n        }\n        outerSubscriber.next(observableResult);\n        outerSubscriber.complete();\n      } else {\n        if (messageTxt) {\n          observableResult.messages.push({\n            type: MessageType.VALID,\n            text: messageTxt,\n          });\n        }\n        this.unsubscribeById(validatorId);\n        if (this.allValidatorsCompleted()) {\n          outerSubscriber.next(observableResult);\n          outerSubscriber.complete();\n        }\n      }\n    };\n    return nextMethod;\n  }\n\n  private createValidatorObserverErrorMethod(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n  ) {\n    const errorMethod = (e: any) => {\n      this.unsubscribeAll();\n      logErrorInDevMode(e);\n      observableResult.validity = Validity.ERROR;\n      observableResult.messages.push({\n        type: MessageType.ERROR,\n        text: GlobalMessages.SINGLE_INPUT_VALIDATION_ERROR,\n      });\n      outerSubscriber.next(observableResult);\n      outerSubscriber.complete();\n    };\n    return errorMethod;\n  }\n\n  private unsubscribeAll() {\n    for(const key in this.#validatorSubscriptions) {\n      this.#validatorSubscriptions[key].unsubscribe();\n    }\n    this.#validatorSubscriptions = {};\n  }\n\n  private unsubscribeById(validatorId : number) {\n    this.#validatorSubscriptions[validatorId].unsubscribe();\n    delete this.#validatorSubscriptions[validatorId];\n  }\n\n  private allValidatorsCompleted() {\n    return Object.keys(this.#validatorSubscriptions).length === 0;\n  }\n}\n","export function logErrorInDevMode(e : any) {\n  process.env.NODE_ENV === 'development' && console.error(e);\n}","import { AsyncSingleInputValidatorSuite } from './async-single-input-validator-suite';\nimport { SyncSingleInputValidatorSuite } from './sync-single-input-validator-suite';\nimport { Validity } from '../../../types/constituents/state/validity.enum';\nimport type { SingleInputValidatorSuite } from '../../../types/constituents/validators/single-input/single-input-validator-suite.interface';\nimport type { ValidatorSuiteResultsObject } from '../../../types/constituents/validators/validator-suite-results-object.interface';\n\nexport class HybridSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly #syncValidatorSuite: SyncSingleInputValidatorSuite<T>;\n  readonly #asyncValidatorSuite: AsyncSingleInputValidatorSuite<T>;\n  constructor(\n    syncValidatorSuite: SyncSingleInputValidatorSuite<T>,\n    asyncValidatorSuite: AsyncSingleInputValidatorSuite<T>,\n  ) {\n    this.#syncValidatorSuite = syncValidatorSuite;\n    this.#asyncValidatorSuite = asyncValidatorSuite;\n  }\n\n  evaluate(value: T) {\n    const result: ValidatorSuiteResultsObject<T> =\n      this.#syncValidatorSuite.evaluate(value);\n\n    if (result.syncResult.validity <= Validity.INVALID) return result;\n\n    const asyncResult = this.#asyncValidatorSuite.evaluate(value);\n\n    return {\n      syncResult: {\n        value: asyncResult.syncResult.value,\n        validity: asyncResult.syncResult.validity,\n        messages: [\n          ...result.syncResult.messages,\n          ...asyncResult.syncResult.messages,\n        ],\n      },\n      observable: asyncResult.observable,\n    };\n  }\n}\n","import { Validity } from '../../../types/constituents/state/validity.enum';\nimport { MessageType } from '../../../types/constituents/state/messages/message-type.enum';\nimport { GlobalMessages } from '../../../constituents/constants/global-messages.enum';\nimport { logErrorInDevMode } from '../../../constituents/util/log-error-in-dev-mode';\nimport type { SingleInputValidatorSuite } from '../../../types/constituents/validators/single-input/single-input-validator-suite.interface';\nimport type { SyncValidator } from '../../../types/constituents/validators/sync-validator.type';\nimport type { ValidatorSuiteResult } from '../../../types/constituents/validators/validator-suite-result.interface';\n\nexport class SyncSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly #validators: Array<SyncValidator<T>>;\n\n  constructor(validators: Array<SyncValidator<T>>) {\n    this.#validators = validators;\n  }\n\n  evaluate(value: T) {\n    return {\n      syncResult: this.evaluateSync(value),\n    };\n  }\n\n  private evaluateSync(value: T) {\n    const result: ValidatorSuiteResult<T> = {\n      value,\n      validity: Validity.VALID_FINALIZABLE,\n      messages: [],\n    };\n    try {\n      for (const validator of this.#validators) {\n        const { isValid, message: messageTxt } = validator(value);\n        if (!isValid) result.validity = Validity.INVALID;\n        if (messageTxt) {\n          result.messages.push({\n            type: isValid ? MessageType.VALID : MessageType.INVALID,\n            text: messageTxt,\n          });\n        }\n      }\n    } catch (e) {\n      logErrorInDevMode(e);\n      result.validity = Validity.ERROR;\n      result.messages.push({\n        type: MessageType.ERROR,\n        text: GlobalMessages.SINGLE_INPUT_VALIDATION_ERROR,\n      });\n    }\n    return result;\n  }\n}\n","import { AsyncValidator } from \"../../../types/constituents/validators/async-validator.type\";\r\nimport { SingleInputValidatorSuiteFactory } from \"../../../types/constituents/validators/single-input/single-input-validator-suite-factory.interface\";\r\nimport { SingleInputValidatorSuite } from \"../../../types/constituents/validators/single-input/single-input-validator-suite.interface\";\r\nimport { SyncValidator } from \"../../../types/constituents/validators/sync-validator.type\";\r\nimport { GlobalMessages } from \"../../constants/global-messages.enum\";\r\nimport { AsyncSingleInputValidatorSuite } from \"./async-single-input-validator-suite\";\r\nimport { HybridSingleInputValidatorSuite } from \"./hybrid-single-input-validator-suite\";\r\nimport { SyncSingleInputValidatorSuite } from \"./sync-single-input-validator-suite\";\r\n\r\nexport class SingleInputValidatorSuiteFactoryImpl implements SingleInputValidatorSuiteFactory {\r\n  createSingleInputValidatorSuite<T>(syncValidators: SyncValidator<T>[], asyncValidators: AsyncValidator<T>[], pendingAsyncValidatorMessage : string = GlobalMessages.PENDING_ASYNC_VALIDATOR_SUITE_MESSAGE): SingleInputValidatorSuite<T> {\r\n    const syncValidatorSuite = new SyncSingleInputValidatorSuite(syncValidators);\r\n    if(asyncValidators.length > 0) {\r\n      const asyncValidatorSuite = new AsyncSingleInputValidatorSuite(asyncValidators, pendingAsyncValidatorMessage);\r\n      if(syncValidators.length > 0) return new HybridSingleInputValidatorSuite(syncValidatorSuite, asyncValidatorSuite);\r\n      else return asyncValidatorSuite;\r\n    } else return syncValidatorSuite;\r\n  }\r\n}","import { BehaviorSubject, type Subject } from 'rxjs';\nimport type { DualField } from '../../types/constituents/fields/dual-field.interface';\nimport type { DualFieldSetValueArg } from '../../types/constituents/state/dual-field-set-value-arg.interface';\nimport type { DualFieldSetStateArg } from '../../types/constituents/state/dual-field-set-state-arg.interface';\nimport type { Field } from '../../types/constituents/fields/field.interface';\nimport type { FieldState } from '../../types/constituents/state/field-state.interface';\n\nexport class DualFieldImpl implements DualField {\n  readonly primaryField: Field;\n  readonly secondaryField: Field;\n  readonly stateChanges: Subject<FieldState>;\n  #useSecondaryField: boolean = false;\n  #omit: boolean;\n  #omitByDefault: boolean;\n\n  get state() {\n    const state = (\n      !this.#useSecondaryField\n        ? this.primaryField.state\n        : this.secondaryField.state\n    )\n    state.useSecondaryField = this.#useSecondaryField;\n    state.omit = this.#omit;\n    return state;\n  }\n\n  set useSecondaryField(useSecondaryField) {\n    const changeDetected = this.useSecondaryField !== useSecondaryField;\n    this.#useSecondaryField = useSecondaryField;\n    if (this.stateChanges && changeDetected) this.stateChanges.next(this.state);\n  }\n\n  get useSecondaryField() {\n    return this.#useSecondaryField;\n  }\n\n  set omit(omit: boolean) {\n    this.#omit = omit;\n    this.stateChanges?.next(this.state);\n  }\n\n  get omit() {\n    return this.#omit;\n  }\n\n  constructor(\n    primaryField: Field,\n    secondaryField: Field,\n    omitByDefault: boolean,\n  ) {\n    this.primaryField = primaryField;\n    this.secondaryField = secondaryField;\n    this.#omitByDefault = omitByDefault;\n    this.#omit = this.#omitByDefault;\n    this.primaryField.stateChanges.subscribe(() => {\n      if (!this.#useSecondaryField) this.stateChanges?.next(this.state);\n    });\n    this.secondaryField.stateChanges.subscribe(() => {\n      if (this.#useSecondaryField) this.stateChanges?.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  setValue(valueObj: DualFieldSetValueArg) {\n    if (valueObj.primaryFieldValue)\n      this.primaryField.setValue(valueObj.primaryFieldValue);\n    if (valueObj.secondaryFieldValue)\n      this.secondaryField.setValue(valueObj.secondaryFieldValue);\n    if (valueObj.useSecondaryField !== undefined)\n      this.useSecondaryField = valueObj.useSecondaryField;\n  }\n\n  setState(stateObj: DualFieldSetStateArg) {\n    if (stateObj.omit !== undefined) this.omit = stateObj.omit;\n    if (stateObj.primaryFieldState)\n      this.primaryField.setState(stateObj.primaryFieldState);\n    if (stateObj.secondaryFieldState)\n      this.secondaryField.setState(stateObj.secondaryFieldState);\n    if (stateObj.useSecondaryField !== undefined)\n      this.useSecondaryField = stateObj.useSecondaryField;\n  }\n\n  reset() {\n    this.#omit = this.#omitByDefault;\n    this.primaryField.reset();\n    this.secondaryField.reset();\n    this.useSecondaryField = false;\n  }\n}\n","import { BehaviorSubject, Observable, type Subject, type Subscription } from 'rxjs';\nimport { copyObject } from '../util/copy-object';\nimport { MessageType } from '../../types/constituents/state/messages/message-type.enum';\nimport type { Field } from '../../types/constituents/fields/field.interface';\nimport type { FieldState } from '../../types/constituents/state/field-state.interface';\nimport type { SingleInputValidatorSuite } from '../../types/constituents/validators/single-input/single-input-validator-suite.interface';\nimport type { ValidatorSuiteResult } from '../../types/constituents/validators/validator-suite-result.interface';\nimport type { Message } from '../../types/constituents/state/messages/message.interface';\n\nexport class FieldImpl implements Field {\n  readonly stateChanges: Subject<FieldState>;\n  readonly #validatorSuite: SingleInputValidatorSuite<string>;\n  readonly #defaultValue: string;\n  readonly #omitByDefault;\n  #state: FieldState;\n  #validatorSuiteSubscription?: Subscription;\n\n  get state() {\n    return copyObject(this.#state);\n  }\n\n  set omit(omit: boolean) {\n    this.setState({\n      ...this.state,\n      omit,\n    });\n  }\n\n  get omit() {\n    return this.state.omit as boolean;\n  }\n\n  constructor(\n    validatorSuite: SingleInputValidatorSuite<string>,\n    defaultValue: string,\n    omitByDefault: boolean,\n  ) {\n    this.#validatorSuite = validatorSuite;\n    this.#defaultValue = defaultValue;\n    this.#omitByDefault = omitByDefault;\n    const initialState = this.#validatorSuite.evaluate(this.#defaultValue);\n    this.#state = {\n      ...initialState.syncResult,\n      omit: this.#omitByDefault,\n    };\n    this.stateChanges = new BehaviorSubject(this.state);\n    if (initialState.observable)\n      this.handleValidityObservable(initialState.observable);\n  }\n\n  setValue(value: string) {\n    if (this.#validatorSuiteSubscription)\n      this.#validatorSuiteSubscription.unsubscribe();\n    const validityResult = this.#validatorSuite.evaluate(value);\n    this.setState({\n      ...validityResult.syncResult,\n      omit: this.state.omit,\n    });\n    if (validityResult.observable)\n      this.handleValidityObservable(validityResult.observable);\n  }\n\n  setState(state: FieldState) {\n    this.#state = copyObject(state);\n    this.stateChanges.next(this.state);\n  }\n\n  reset() {\n    this.#state.omit = this.#omitByDefault;\n    this.setValue(this.#defaultValue);\n  }\n\n  private handleValidityObservable(\n    observable: Observable<ValidatorSuiteResult<string>>,\n  ) {\n    this.#validatorSuiteSubscription?.unsubscribe();\n    this.#validatorSuiteSubscription = observable.subscribe(result => {\n      this.setState({\n        ...result,\n        messages: [\n          ...this.state.messages.filter(\n            (message: Message) => message.type !== MessageType.PENDING,\n          ),\n          ...result.messages,\n        ],\n        omit: this.state.omit,\n      });\n    });\n  }\n}\n","export function copyObject(object: object) {\n  return JSON.parse(JSON.stringify(object));\n}\n","import { DualField } from \"../../types/constituents/fields/dual-field.interface\";\r\nimport { BaseFieldFactory } from \"../../types/constituents/fields/base-field-factory.interface\";\r\nimport { Field } from \"../../types/constituents/fields/field.interface\";\r\nimport { AsyncValidator } from \"../../types/constituents/validators/async-validator.type\";\r\nimport { SingleInputValidatorSuiteFactory } from \"../../types/constituents/validators/single-input/single-input-validator-suite-factory.interface\";\r\nimport { SyncValidator } from \"../../types/constituents/validators/sync-validator.type\";\r\nimport { DualFieldImpl } from \"./dual-field-impl\";\r\nimport { FieldImpl } from \"./field-impl\";\r\n\r\nexport class BaseFieldFactoryImpl implements BaseFieldFactory {\r\n  #singleInputValidatorSuiteFactory : SingleInputValidatorSuiteFactory;\r\n  \r\n  constructor(singleInputValidatorSuiteFactory : SingleInputValidatorSuiteFactory) {\r\n    this.#singleInputValidatorSuiteFactory = singleInputValidatorSuiteFactory;\r\n  }\r\n\r\n  createField(defaultValue: string, omitByDefault: boolean, syncValidators: SyncValidator<string>[], asyncValidators: AsyncValidator<string>[], pendingAsyncValidatorMessage? : string): Field {\r\n    const validatorSuite = this.#singleInputValidatorSuiteFactory.createSingleInputValidatorSuite(syncValidators, asyncValidators, pendingAsyncValidatorMessage);\r\n    return new FieldImpl(validatorSuite, defaultValue, omitByDefault);\r\n  }\r\n\r\n  createDualField(primaryDefaultValue: string, secondaryDefaultValue: string, omitByDefault: boolean, syncValidators: SyncValidator<string>[], asyncValidators: AsyncValidator<string>[], pendingAsyncValidatorMessage? : string): DualField {\r\n    const primaryField = this.createField(primaryDefaultValue, false, syncValidators, asyncValidators, pendingAsyncValidatorMessage);\r\n    const secondaryField = this.createField(secondaryDefaultValue, false, syncValidators, asyncValidators, pendingAsyncValidatorMessage);\r\n    return new DualFieldImpl(primaryField, secondaryField, omitByDefault);\r\n  }  \r\n}","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { copyObject } from '../util/copy-object';\nimport type { NestedForm } from '../../types/constituents/forms/nested-form.interface';\nimport type { State } from '../../types/constituents/state/state.interface';\nimport type { FinalizerManager } from '../../types/constituents/finalizers/finalizer-manager.interface';\nimport type { FormElementMap } from '../../types/constituents/form-elements/form-element-map.type';\nimport type { MultiInputValidatorMessagesAggregator } from '../../types/constituents/aggregators/multi-input-validator-messages-aggregator.interface';\n\nexport class NestedFormImpl implements NestedForm {\n  readonly stateChanges: Subject<State<any>>;\n  readonly userFacingFields : FormElementMap;\n  readonly #finalizerManager : FinalizerManager;\n  readonly #multiFieldValidatorMessagesAggregator : MultiInputValidatorMessagesAggregator;\n  readonly #omitByDefault;\n  #omit;\n\n  get state() {\n    return copyObject({\n      ...this.#finalizerManager.state,\n      messages: [\n        ...this.#multiFieldValidatorMessagesAggregator.messages,\n        ...this.#finalizerManager.state.messages\n      ],\n      omit: this.#omit,\n    });\n  }\n\n  set omit(omit: boolean) {\n    this.#omit = omit;\n    if (this.stateChanges) this.stateChanges.next(this.state);\n  }\n\n  get omit() {\n    return this.#omit;\n  }\n\n  constructor(\n    userFacingFields : FormElementMap,\n    finalizerManager : FinalizerManager,\n    multiFieldValidatorMessagesAggregator : MultiInputValidatorMessagesAggregator,\n    omitByDefault: boolean,\n  ) {\n    this.userFacingFields = userFacingFields;\n    this.#finalizerManager = finalizerManager;\n    this.#multiFieldValidatorMessagesAggregator = multiFieldValidatorMessagesAggregator;\n    this.#omitByDefault = omitByDefault;\n    this.#omit = this.#omitByDefault;\n\n    this.#multiFieldValidatorMessagesAggregator.messagesChanges.subscribe(() => {\n      this.stateChanges?.next(this.state);\n    });\n\n    this.#finalizerManager.stateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges?.next(this.state);\n    });\n\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  reset() {\n    this.#omit = this.#omitByDefault;\n    for(const fieldName in this.userFacingFields) {\n      this.userFacingFields[fieldName].reset();\n    }\n  }\n}\n","import { NestedFormImpl } from \"../../constituents/forms/nested-form-impl\";\r\nimport { FormElementMap } from \"../../types/constituents/form-elements/form-element-map.type\";\r\nimport { NestedForm } from \"../../types/constituents/forms/nested-form.interface\";\r\nimport { AsyncStateControlledDualFieldTemplate } from \"../../types/parser/form-elements/async-state-controlled-dual-field-template.type\";\r\nimport { AsyncStateControlledFieldTemplate } from \"../../types/parser/form-elements/async-state-controlled-field-template.type\";\r\nimport { AsyncValueControlledDualFieldTemplate } from \"../../types/parser/form-elements/async-value-controlled-dual-field-template.type\";\r\nimport { AsyncValueControlledFieldTemplate } from \"../../types/parser/form-elements/async-value-controlled-field-template.type\";\r\nimport { DualFieldTemplate } from \"../../types/parser/form-elements/dual-field-template.interface\";\r\nimport { FieldTemplateParser } from \"../../types/parser/form-elements/field-template-parser.interface\";\r\nimport { FieldTemplateVariations } from \"../../types/parser/form-elements/field-template-variations.type\";\r\nimport { FieldTemplate } from \"../../types/parser/form-elements/field-template.type\";\r\nimport { ParsedDualFieldTemplate } from \"../../types/parser/form-elements/parsed-dual-field-template.interface\";\r\nimport { ParsedFieldTemplate } from \"../../types/parser/form-elements/parsed-field-template.interface\";\r\nimport { SyncStateControlledDualFieldTemplate } from \"../../types/parser/form-elements/sync-state-controlled-dual-field-template.type\";\r\nimport { SyncStateControlledFieldTemplate } from \"../../types/parser/form-elements/sync-state-controlled-field-template.type\";\r\nimport { SyncValueControlledDualFieldTemplate } from \"../../types/parser/form-elements/sync-value-controlled-dual-field-template.type\";\r\nimport { SyncValueControlledFieldTemplate } from \"../../types/parser/form-elements/sync-value-controlled-field-template.type\";\r\n\r\nexport class FieldTemplateParserImpl<Fields extends FormElementMap> implements FieldTemplateParser<Fields> {\r\n  #template : NestedForm | FieldTemplateVariations<string>;\r\n\r\n  get isNestedForm() {\r\n    return this.#template instanceof NestedFormImpl;\r\n  }\r\n  get isDualField() {\r\n    return (\r\n      !this.isNestedForm && typeof this.#template !== 'string' && !('defaultValue' in this.#template)\r\n    )\r\n  }\r\n  get baseObject() : NestedForm | ParsedFieldTemplate | ParsedDualFieldTemplate {\r\n    if(this.isNestedForm) return this.#template as NestedForm;\r\n    else if(this.isDualField) return this.createBaseDualFieldObj();\r\n    else return this.createBaseFieldObj();\r\n  }\r\n  get syncValueControlFn() {\r\n    if(this.isSyncValueControlledField) {\r\n      const syncValueControlledTemplate = \r\n        this.isDualField ? this.#template as SyncValueControlledDualFieldTemplate<string> :\r\n          this.#template as SyncValueControlledFieldTemplate<string>;\r\n      return syncValueControlledTemplate.syncValueControlFn;\r\n    } else return undefined;\r\n  }\r\n  get asyncValueControlFn() {\r\n    if(this.isAsyncValueControlledField) {\r\n      const asyncValueControlledTemplate = \r\n        this.isDualField ? this.#template as AsyncValueControlledDualFieldTemplate<string> :\r\n          this.#template as AsyncValueControlledFieldTemplate<string>;\r\n      return asyncValueControlledTemplate.asyncValueControlFn;\r\n    } else return undefined;\r\n  }\r\n  get syncStateControlFn() {\r\n    if(this.isSyncStateControlledField) {\r\n      const syncStateControlledTemplate = \r\n        this.isDualField ? this.#template as SyncStateControlledDualFieldTemplate<string> :\r\n          this.#template as SyncStateControlledFieldTemplate<string>;\r\n      return syncStateControlledTemplate.syncStateControlFn;\r\n    } else return undefined;\r\n  }\r\n  get asyncStateControlFn() {\r\n    if(this.isAsyncStateControlledField) {\r\n      const asyncStateControlledTemplate = \r\n        this.isDualField ? this.#template as AsyncStateControlledDualFieldTemplate<string> :\r\n          this.#template as AsyncStateControlledFieldTemplate<string>;\r\n      return asyncStateControlledTemplate.asyncStateControlFn;\r\n    } else return undefined;\r\n  }\r\n\r\n  private get isSyncStateControlledField() {\r\n    return !this.isNestedForm && typeof this.#template !== 'string' && ('syncStateControlFn' in this.#template);\r\n  }\r\n\r\n  private get isSyncValueControlledField() {\r\n    return !this.isNestedForm && typeof this.#template !== 'string' && ('syncValueControlFn' in this.#template);\r\n  }\r\n\r\n  \r\n  private get isAsyncStateControlledField() {\r\n    return !this.isNestedForm && typeof this.#template !== 'string' && ('asyncStateControlFn' in this.#template);\r\n  }\r\n\r\n  private get isAsyncValueControlledField() {\r\n    return !this.isNestedForm && typeof this.#template !== 'string' && ('asyncValueControlFn' in this.#template);\r\n  }\r\n\r\n  constructor(template : NestedForm | FieldTemplateVariations<string>) {\r\n    this.#template = template;\r\n    this.checkTemplate();\r\n  }\r\n\r\n  private checkTemplate() {\r\n    if(typeof this.#template === 'string' || this.#template instanceof NestedFormImpl) return;\r\n\r\n    if(typeof this.#template !== 'object') throw new Error(\r\n      `FieldTemplateParser expected to receive argument of type <string | NestedFormImpl | object>. Received ${typeof this.#template}.`\r\n    );\r\n\r\n    if(!('defaultValue' in this.#template) && !('primaryDefaultValue' in this.#template && 'secondaryDefaultValue' in this.#template)) {\r\n      throw new Error('Object passed to FormTemplateParser did not include properties defaultValue or both primaryDefaultValue and secondaryDefaultValue.');\r\n    }\r\n\r\n    if('defaultValue' in this.#template && ('primaryDefaultValue' in this.#template || 'secondaryDefaultValue' in this.#template)) {\r\n      throw new Error('FieldTemplateParser received ambiguous object. Include only defaultValue or both primaryDefaultValue and secondaryDefaultValue.');\r\n    };\r\n\r\n    let controlFnFlags = 0;\r\n    if(this.isSyncStateControlledField) controlFnFlags++;\r\n    if(this.isSyncValueControlledField) controlFnFlags++;\r\n    if(this.isAsyncStateControlledField) controlFnFlags++;\r\n    if(this.isAsyncValueControlledField) controlFnFlags++;\r\n    if(controlFnFlags > 1) {\r\n      throw new Error('FieldTemplateParser received ambiguous object. Include only one type of control function.');\r\n    }\r\n  }\r\n\r\n  private createBaseFieldObj() : ParsedFieldTemplate {\r\n    if(typeof this.#template === 'string') {\r\n      return {\r\n        defaultValue : this.#template,\r\n        syncValidators : [],\r\n        asyncValidators : [],\r\n        omitByDefault : false\r\n      }\r\n    } else {\r\n      const fieldTemplate = this.#template as FieldTemplate;\r\n      return {\r\n        defaultValue : fieldTemplate.defaultValue,\r\n        syncValidators : fieldTemplate.syncValidators ? fieldTemplate.syncValidators : [],\r\n        asyncValidators : fieldTemplate.asyncValidators ? fieldTemplate.asyncValidators : [],\r\n        omitByDefault : fieldTemplate.omitByDefault ? true : false,\r\n        pendingAsyncValidatorMessage : fieldTemplate.pendingAsyncValidatorMessage\r\n      }\r\n    }\r\n  }\r\n\r\n  private createBaseDualFieldObj() : ParsedDualFieldTemplate {\r\n    const dualFieldTemplate = this.#template as DualFieldTemplate;\r\n    return {\r\n      primaryDefaultValue : dualFieldTemplate.primaryDefaultValue,\r\n      secondaryDefaultValue : dualFieldTemplate.secondaryDefaultValue,\r\n      syncValidators : dualFieldTemplate.syncValidators ? dualFieldTemplate.syncValidators : [],\r\n      asyncValidators : dualFieldTemplate.asyncValidators ? dualFieldTemplate.asyncValidators : [],\r\n      omitByDefault : dualFieldTemplate.omitByDefault ? true : false,\r\n      pendingAsyncValidatorMessage : dualFieldTemplate.pendingAsyncValidatorMessage\r\n    }\r\n  }\r\n}","import { BaseFieldFactory } from \"../../types/constituents/fields/base-field-factory.interface\";\r\nimport { AsyncDualStateControlFn } from \"../../types/constituents/fields/async-dual-state-control-fn.type\";\r\nimport { SyncDualValueControlFn } from \"../../types/constituents/fields/sync-dual-value-control-fn.type\";\r\nimport { AsyncFieldStateControlFn } from \"../../types/constituents/fields/async-field-state-control-fn.type\";\r\nimport { AsyncFieldValueControlFn } from \"../../types/constituents/fields/async-field-value-control-fn.type\";\r\nimport { FormElementMap } from \"../../types/constituents/form-elements/form-element-map.type\";\r\nimport { NestedForm } from \"../../types/constituents/forms/nested-form.interface\";\r\nimport { FieldTemplateVariations } from \"../../types/parser/form-elements/field-template-variations.type\";\r\nimport { FormElementsParser } from \"../../types/parser/form-elements/form-elements-parser.interface\";\r\nimport { ParsedDualFieldTemplate } from \"../../types/parser/form-elements/parsed-dual-field-template.interface\";\r\nimport { ParsedFieldTemplate } from \"../../types/parser/form-elements/parsed-field-template.interface\";\r\nimport { FieldTemplateParserImpl } from \"./field-template-parser-impl\";\r\nimport { SyncFieldStateControlFn } from \"../../types/constituents/fields/sync-field-state-control-fn.type\";\r\nimport { SyncFieldValueControlFn } from \"../../types/constituents/fields/sync-field-value-control-fn.type\";\r\nimport { SyncDualStateControlFn } from \"../../types/constituents/fields/sync-dual-state-control-fn.type\";\r\nimport { AsyncDualValueControlFn } from \"../../types/constituents/fields/async-dual-value-control-fn.type\";\r\nimport { ControlledFieldFactory } from \"../../types/constituents/fields/controlled-field-factory.interface\";\r\nimport { Field } from \"../../types/constituents/fields/field.interface\";\r\nimport { DualField } from \"../../types/constituents/fields/dual-field.interface\";\r\n\r\nexport class FormElementsParserImpl implements FormElementsParser {\r\n  readonly #baseFieldFactory : BaseFieldFactory;\r\n  readonly #controlledFieldFactory : ControlledFieldFactory;\r\n  readonly #fields : FormElementMap = {};\r\n  readonly #syncStateControlledFields = new Map<string, SyncFieldStateControlFn<FormElementMap>>();\r\n  readonly #syncValueControlledFields = new Map<string, SyncFieldValueControlFn<FormElementMap>>();\r\n  readonly #asyncStateControlledFields = new Map<string, AsyncFieldStateControlFn<FormElementMap>>();\r\n  readonly #asyncValueControlledFields = new Map<string, AsyncFieldValueControlFn<FormElementMap>>();\r\n  readonly #syncStateControlledDualFields = new Map<string, SyncDualStateControlFn<FormElementMap>>();\r\n  readonly #syncValueControlledDualFields = new Map<string, SyncDualValueControlFn<FormElementMap>>();\r\n  readonly #asyncStateControlledDualFields = new Map<string, AsyncDualStateControlFn<FormElementMap>>();\r\n  readonly #asyncValueControlledDualFields = new Map<string, AsyncDualValueControlFn<FormElementMap>>();\r\n\r\n  constructor(baseFieldFactory : BaseFieldFactory, controlledFieldFactory : ControlledFieldFactory) {\r\n    this.#baseFieldFactory = baseFieldFactory;\r\n    this.#controlledFieldFactory = controlledFieldFactory;\r\n  }\r\n\r\n  parseTemplate<K extends string>(fields: { [P in K]: NestedForm | FieldTemplateVariations<K>; }): FormElementMap {\r\n    for(const fieldName in fields) {\r\n      const parsed = new FieldTemplateParserImpl(fields[fieldName]); //should come from a factory\r\n      if(parsed.isNestedForm) this.#fields[fieldName] = parsed.baseObject as NestedForm;\r\n      else if(parsed.isDualField) {\r\n        const parsedTemplate = parsed.baseObject as ParsedDualFieldTemplate;\r\n        this.#fields[fieldName] = this.#baseFieldFactory.createDualField(\r\n          parsedTemplate.primaryDefaultValue,\r\n          parsedTemplate.secondaryDefaultValue,\r\n          parsedTemplate.omitByDefault,\r\n          parsedTemplate.syncValidators,\r\n          parsedTemplate.asyncValidators,\r\n          parsedTemplate.pendingAsyncValidatorMessage\r\n        )\r\n      } else {\r\n        const parsedTemplate = parsed.baseObject as ParsedFieldTemplate;\r\n        this.#fields[fieldName] = this.#baseFieldFactory.createField(\r\n          parsedTemplate.defaultValue,\r\n          parsedTemplate.omitByDefault,\r\n          parsedTemplate.syncValidators,\r\n          parsedTemplate.asyncValidators,\r\n          parsedTemplate.pendingAsyncValidatorMessage\r\n        )\r\n      }\r\n      if(parsed.syncStateControlFn) {\r\n        if(parsed.isDualField) this.#syncStateControlledDualFields.set(fieldName, parsed.syncStateControlFn);\r\n        else this.#syncStateControlledFields.set(fieldName, parsed.syncStateControlFn as SyncFieldStateControlFn<FormElementMap>);\r\n      } else if(parsed.asyncStateControlFn) {\r\n        if(parsed.isDualField) this.#asyncStateControlledDualFields.set(fieldName, parsed.asyncStateControlFn);\r\n        else this.#asyncStateControlledFields.set(fieldName, parsed.asyncStateControlFn as AsyncFieldStateControlFn<FormElementMap>);\r\n      } else if(parsed.syncValueControlFn) {\r\n        if(parsed.isDualField) this.#syncValueControlledDualFields.set(fieldName, parsed.syncValueControlFn as SyncDualStateControlFn<FormElementMap>);\r\n        else this.#syncValueControlledFields.set(fieldName, parsed.syncValueControlFn as SyncFieldValueControlFn<FormElementMap>);\r\n      } else if(parsed.asyncValueControlFn) {\r\n        if(parsed.isDualField) this.#asyncValueControlledDualFields.set(fieldName, parsed.asyncValueControlFn as AsyncDualValueControlFn<FormElementMap>);\r\n        else this.#asyncValueControlledFields.set(fieldName, parsed.asyncValueControlFn as AsyncFieldValueControlFn<FormElementMap>);\r\n      }\r\n    }\r\n\r\n    //transform controlled fields\r\n    for(const [fieldName, controlFn] of this.#syncStateControlledFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createStateControlledFieldWithSyncControlFn(this.#fields[fieldName] as Field, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#syncValueControlledFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createValueControlledFieldWithSyncControlFn(this.#fields[fieldName] as Field, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#asyncStateControlledFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createStateControlledFieldWithAsyncControlFn(this.#fields[fieldName] as Field, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#asyncValueControlledFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createValueControlledFieldWithAsyncControlFn(this.#fields[fieldName] as Field, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#syncStateControlledDualFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createStateControlledDualFieldWithSyncControlFn(this.#fields[fieldName] as DualField, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#syncValueControlledDualFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createValueControlledDualFieldWithSyncControlFn(this.#fields[fieldName] as DualField, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#asyncStateControlledDualFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createStateControlledDualFieldWithAsyncControlFn(this.#fields[fieldName] as DualField, controlFn, this.#fields);\r\n    }\r\n    for(const [fieldName, controlFn] of this.#asyncValueControlledDualFields.entries()) {\r\n      this.#fields[fieldName] = this.#controlledFieldFactory.createValueControlledDualFieldWithAsyncControlFn(this.#fields[fieldName] as DualField, controlFn, this.#fields);\r\n    }\r\n    return this.#fields;\r\n  }\r\n}","import type { AggregatedStateChanges } from '../../types/constituents/aggregators/aggregated-state-changes.interface';\nimport type { MultiFieldAggregator } from '../../types/constituents/aggregators/multi-field-aggregator.interface';\nimport type { FormElementMap } from '../../types/constituents/form-elements/form-element-map.type';\nimport type { FieldStateReducer } from '../../types/constituents/reducers/field-state-reducer.interface';\nimport type { AnyState } from '../../types/constituents/state/any-state.type';\nimport type { OnInitialSubscriptionHandlingBehaviorSubject } from '../../types/constituents/subjects/on-initial-subscription-handling-behavior-subject.interface';\nimport type { AggregatedStateChangesProxyProducer } from '../../types/constituents/proxies/aggregated-state-changes-proxy-producer.interface';\nimport type { OneTimeValueEmitter } from '../../types/constituents/emitters/one-time-value-emitter.interface';\nimport type { SubjectFactory } from '../../types/constituents/subjects/subject-factory.interface';\n\nexport class MultiFieldAggregatorImpl<Fields extends FormElementMap>\n  implements MultiFieldAggregator<Fields>\n{\n  readonly aggregateChanges: OnInitialSubscriptionHandlingBehaviorSubject<\n    AggregatedStateChanges<Fields>\n  >;\n  readonly accessedFields : OneTimeValueEmitter<Set<string>>;\n  readonly #fields: Fields;\n  readonly #fieldStateReducer: FieldStateReducer;\n  readonly #aggregatedFieldState: {\n    [key: string]: AnyState;\n  } = {};\n  #aggregatedStateChangesProxyProducer: AggregatedStateChangesProxyProducer | null;\n  #accessedFieldsSubscriptionProcessCompleted = false;\n\n  get aggregatedStateChanges() {\n    return {\n      ...this.#aggregatedFieldState,\n      overallValidity: this.#fieldStateReducer.validity,\n      hasOmittedFields: this.#fieldStateReducer.omit,\n    } as AggregatedStateChanges<Fields>;\n  }\n\n  constructor(\n    fields: Fields,\n    aggregatedStateChangesProxyProducer: AggregatedStateChangesProxyProducer,\n    fieldStateReducer: FieldStateReducer,\n    accessedFields : OneTimeValueEmitter<Set<string>>,\n    subjectFactory : SubjectFactory\n  ) {\n    this.#fields = fields;\n    this.#aggregatedStateChangesProxyProducer =\n      aggregatedStateChangesProxyProducer;\n    this.#fieldStateReducer = fieldStateReducer;\n    this.aggregateChanges = subjectFactory.createOnInitialSubscriptionHandlingBehaviorSubject(\n      this.#aggregatedStateChangesProxyProducer.getProxy(this.#fields),\n    );\n    this.accessedFields = accessedFields;\n    this.aggregateChanges.onInitialSubscription(this.subscribeToAccessedFields);\n  }\n\n  private subscribeToAccessedFields = () => {\n    if(!this.#accessedFieldsSubscriptionProcessCompleted && this.#aggregatedStateChangesProxyProducer) {\n      const accessedFieldNames =\n        this.#aggregatedStateChangesProxyProducer.accessedFieldNames;\n\n      for (const fieldName of accessedFieldNames) {\n        this.#fields[fieldName].stateChanges.subscribe(\n          (stateChange: AnyState) => {\n            this.#aggregatedFieldState[fieldName] = stateChange;\n            this.#fieldStateReducer.updateTallies(fieldName, stateChange);\n            if (this.#accessedFieldsSubscriptionProcessCompleted) {\n              this.aggregateChanges.next(this.aggregatedStateChanges);\n            }\n          },\n        );\n      }\n\n      this.accessedFields.setValue(accessedFieldNames);\n      this.#aggregatedStateChangesProxyProducer = null;\n      this.#accessedFieldsSubscriptionProcessCompleted = true;\n    }\n  };\n}\n","import { BehaviorSubject, Subject } from \"rxjs\";\nimport { copyObject } from \"../util/copy-object\";\nimport type { MultiInputValidatorMessagesAggregator } from \"../../types/constituents/aggregators/multi-input-validator-messages-aggregator.interface\";\nimport { Message } from \"../../types/constituents/state/messages/message.interface\";\nimport { MultiInputValidator } from \"../../types/constituents/validators/multi-input/multi-input-validator.interface\";\n\ntype MessagesByValidatorId = {\n  [id : number] : Message\n}\n\nexport class MultiInputValidatorMessagesAggregatorImpl implements MultiInputValidatorMessagesAggregator {\n  messagesChanges: Subject<Message[]>;\n  #messages : MessagesByValidatorId = {}\n\n  get messages() {\n    return [...this.generateMessages()];\n  }\n\n  constructor(validators : Array<MultiInputValidator>) {\n    for(let i = 0; i < validators.length; i++) {\n      const validator = validators[i];\n      validator.messageChanges.subscribe(next => {\n        if(next) this.#messages[i] = next;\n        else delete this.#messages[i];\n        if(this.messagesChanges) this.messagesChanges.next(this.messages);\n      });\n    }\n    this.messagesChanges = new BehaviorSubject(this.messages);\n  }\n\n  private * generateMessages() {\n    for(const key in this.#messages) yield copyObject(this.#messages[key]);\n  }\n}","import { AggregatorFactory } from \"../../types/constituents/aggregators/aggregator-factory.interface\";\nimport { MultiFieldAggregator } from \"../../types/constituents/aggregators/multi-field-aggregator.interface\";\nimport { MultiInputValidatorMessagesAggregator } from \"../../types/constituents/aggregators/multi-input-validator-messages-aggregator.interface\";\nimport { EmitterFactory } from \"../../types/constituents/emitters/emitter-factory.interface\";\nimport { FormElementMap } from \"../../types/constituents/form-elements/form-element-map.type\";\nimport { ProxyProducerFactory } from \"../../types/constituents/proxies/proxy-producer-factory.interface\";\nimport { ReducerFactory } from \"../../types/constituents/reducers/reducer-factory.interface\";\nimport { SubjectFactory } from \"../../types/constituents/subjects/subject-factory.interface\";\nimport { MultiInputValidator } from \"../../types/constituents/validators/multi-input/multi-input-validator.interface\";\nimport { MultiFieldAggregatorImpl } from \"./multi-field-aggregator-impl\";\nimport { MultiInputValidatorMessagesAggregatorImpl } from \"./multi-input-validator-messages-aggregator-impl\";\n\nexport class AggregatorFactoryImpl implements AggregatorFactory {\n  #proxyProducerFactory : ProxyProducerFactory;\n  #reducerFactory : ReducerFactory;\n  #emitterFactory : EmitterFactory;\n  #subjectFactory : SubjectFactory;\n\n  constructor(\n    proxyProducerFactory : ProxyProducerFactory,\n    reducerFactory : ReducerFactory,\n    emitterFactory : EmitterFactory,\n    subjectFactory : SubjectFactory\n  ) {\n    this.#proxyProducerFactory = proxyProducerFactory;\n    this.#reducerFactory = reducerFactory;\n    this.#emitterFactory = emitterFactory;\n    this.#subjectFactory = subjectFactory;\n  }\n\n  createMultiFieldAggregatorFromFields<Fields extends FormElementMap>(fields: Fields): MultiFieldAggregator<Fields> {\n    return new MultiFieldAggregatorImpl<Fields>(\n      fields,\n      this.#proxyProducerFactory.createAggregatedStateChangesProxyProducer(),\n      this.#reducerFactory.createFieldStateReducer(),\n      this.#emitterFactory.createOneTimeValueEmitter<Set<string>>(),\n      this.#subjectFactory\n    );\n  }\n  createMultiInputValidatorMessagesAggregatorFromValidators(validators: MultiInputValidator[]): MultiInputValidatorMessagesAggregator {\n    return new MultiInputValidatorMessagesAggregatorImpl(validators);\n  }\n  \n}","import type { FieldStateReducer } from '../../types/constituents/reducers/field-state-reducer.interface';\nimport type { FieldState } from '../../types/constituents/state/field-state.interface';\nimport { ValidityReducer } from '../../types/constituents/reducers/validity-reducer.interface';\n\nexport class FieldStateReducerImpl implements FieldStateReducer {\n  #validityReducer : ValidityReducer;\n  #omittedFields = new Set<string>();\n\n  constructor(validityReducer : ValidityReducer) {\n    this.#validityReducer = validityReducer;\n  }\n\n  get validity() {\n    return this.#validityReducer.validity;\n  }\n\n  get omit() {\n    return this.#omittedFields.size > 0;\n  }\n\n  updateTallies(fieldName: string, state: FieldState) {\n    const { validity, omit } = state;\n    this.#validityReducer.updateTallies(fieldName, validity);\n    if (omit) this.#omittedFields.add(fieldName);\n    else this.#omittedFields.delete(fieldName);\n  }\n\n}\n","import { BehaviorSubject, type Subject } from \"rxjs\";\nimport { MultiInputValidatorValidityReducer } from \"../../types/constituents/reducers/multi-input-validator-validity-reducer.interface\";\nimport { Validity } from \"../../types/constituents/state/validity.enum\";\nimport { MultiInputValidator } from \"../../types/constituents/validators/multi-input/multi-input-validator.interface\";\nimport { ValidityReducer } from \"../../types/constituents/reducers/validity-reducer.interface\";\n\nexport class FinalizerFacingMultiInputValidatorReducer implements MultiInputValidatorValidityReducer {\n  validityChanges: Subject<Validity>;\n  #validityReducer : ValidityReducer;\n  #multiInputValidators : Array<MultiInputValidator> = [];\n\n  get validity() {\n    return this.#validityReducer.validity;\n  }\n  \n  constructor(validityReducer : ValidityReducer) {\n    this.#validityReducer = validityReducer;\n    this.validityChanges = new BehaviorSubject<Validity>(this.#validityReducer.validity);\n  }\n\n  addValidator(multiFieldValidator: MultiInputValidator): void {\n    const validatorId = String(this.#multiInputValidators.length);\n    this.#multiInputValidators.push(multiFieldValidator);\n    multiFieldValidator.overallValidityChanges.subscribe((validityChange : Validity) => {\n      this.#validityReducer.updateTallies(validatorId, validityChange);\n      this.validityChanges.next(this.#validityReducer.validity);\n    });\n  }\n}","import { Validity } from \"./validity.enum\";\n\nexport enum FinalizerValidity {\n  FINALIZER_ERROR = Validity.ERROR - 1,\n  FIELD_ERROR,\n  FIELD_INVALID,\n  FIELD_PENDING,\n  FIELD_VALID_UNFINALIZABLE,\n  VALID_FINALIZING,\n  VALID_FINALIZED,\n}","import { FinalizerValidity } from \"../../types/constituents/state/finalizer-validity.enum\";\nimport type { FinalizerValidityReducer } from \"../../types/constituents/reducers/finalizer-validity-reducer.interface\";\n\nexport class FinalizerValidityReducerImpl implements FinalizerValidityReducer {\n  readonly #errantFinalizers = new Set<string>();\n  readonly #fieldErrorFinalizers = new Set<string>();\n  readonly #fieldInvalidFinalizers = new Set<string>();\n  readonly #fieldPendingFinalizers = new Set<string>();\n  readonly #fieldValidUnfinalizableFinalizers = new Set<string>();\n  readonly #finalizingFinalizers = new Set<string>();\n\n  get finalizerValidity() {\n    if(this.#errantFinalizers.size > 0) return FinalizerValidity.FINALIZER_ERROR;\n    else if(this.#fieldErrorFinalizers.size > 0) return FinalizerValidity.FIELD_ERROR;\n    else if(this.#fieldInvalidFinalizers.size > 0) return FinalizerValidity.FIELD_INVALID;\n    else if(this.#fieldPendingFinalizers.size > 0) return FinalizerValidity.FIELD_PENDING;\n    else if(this.#fieldValidUnfinalizableFinalizers.size > 0) return FinalizerValidity.FIELD_VALID_UNFINALIZABLE;\n    else if(this.#finalizingFinalizers.size > 0) return FinalizerValidity.VALID_FINALIZING;\n    return FinalizerValidity.VALID_FINALIZED;\n  }\n\n  updateTallies(finalizerName: string, finalizerValidity: FinalizerValidity): void {\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.FINALIZER_ERROR, this.#errantFinalizers);\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.FIELD_ERROR, this.#fieldErrorFinalizers);\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.FIELD_INVALID, this.#fieldInvalidFinalizers);\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.FIELD_PENDING, this.#fieldPendingFinalizers);\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.FIELD_VALID_UNFINALIZABLE, this.#fieldValidUnfinalizableFinalizers);\n    this.updateTally(finalizerName, finalizerValidity, FinalizerValidity.VALID_FINALIZING, this.#finalizingFinalizers);\n  }\n\n  private updateTally(finalizerName : string, actualValidity : FinalizerValidity, expectedValidity : FinalizerValidity, set : Set<string>) {\n    if(actualValidity === expectedValidity) set.add(finalizerName);\n    else set.delete(finalizerName);\n  }\n}","import { BehaviorSubject, type Subject } from \"rxjs\";\nimport { MultiInputValidatorValidityReducer } from \"../../types/constituents/reducers/multi-input-validator-validity-reducer.interface\";\nimport { Validity } from \"../../types/constituents/state/validity.enum\";\nimport { MultiInputValidator } from \"../../types/constituents/validators/multi-input/multi-input-validator.interface\";\nimport { ValidityReducer } from \"../../types/constituents/reducers/validity-reducer.interface\";\n\nexport class UserFacingMultiInputValidatorReducer implements MultiInputValidatorValidityReducer {\n  validityChanges: Subject<Validity>;\n  #validityReducer : ValidityReducer;\n  #multiInputValidators : Array<MultiInputValidator> = [];\n\n  get validity() {\n    return this.#validityReducer.validity;\n  }\n  \n  constructor(validityReducer : ValidityReducer) {\n    this.#validityReducer = validityReducer;\n    this.validityChanges = new BehaviorSubject<Validity>(this.#validityReducer.validity);\n  }\n\n  addValidator(multiFieldValidator: MultiInputValidator): void {\n    const validatorId = String(this.#multiInputValidators.length);\n    this.#multiInputValidators.push(multiFieldValidator);\n    multiFieldValidator.calculatedValidityChanges.subscribe((validityChange : Validity) => {\n      this.#validityReducer.updateTallies(validatorId, validityChange);\n      this.validityChanges.next(this.#validityReducer.validity);\n    });\n  }\n}","import { Validity } from \"../../types/constituents/state/validity.enum\";\n\nexport class ValidityReducerImpl {\n  readonly #errantFields = new Set<string>();\n  readonly #invalidFields = new Set<string>();\n  readonly #pendingFields = new Set<string>();\n  readonly #validUnfinalizableFields = new Set<string>();\n\n  get validity() {\n    if (this.#errantFields.size > 0) return Validity.ERROR;\n    if (this.#invalidFields.size > 0) return Validity.INVALID;\n    if (this.#pendingFields.size > 0) return Validity.PENDING;\n    if (this.#validUnfinalizableFields.size > 0)\n      return Validity.VALID_UNFINALIZABLE;\n    return Validity.VALID_FINALIZABLE;\n  }\n\n  updateTallies(elementId : string, validity : Validity) {\n    this.updateTally(elementId, validity, Validity.ERROR, this.#errantFields);\n    this.updateTally(elementId, validity, Validity.INVALID, this.#invalidFields);\n    this.updateTally(elementId, validity, Validity.PENDING, this.#pendingFields);\n    this.updateTally(\n      elementId,\n      validity,\n      Validity.VALID_UNFINALIZABLE,\n      this.#validUnfinalizableFields\n    );\n  }\n\n  private updateTally(elementId : string, actualValidity : Validity, expectedValidity : Validity, set : Set<string>) {\n    if (actualValidity === expectedValidity)\n    set.add(elementId);\n    else set.delete(elementId);\n  }\n}","import { FieldStateReducer } from \"../../types/constituents/reducers/field-state-reducer.interface\";\nimport { FinalizerValidityReducer } from \"../../types/constituents/reducers/finalizer-validity-reducer.interface\";\nimport { MultiInputValidatorValidityReducer } from \"../../types/constituents/reducers/multi-input-validator-validity-reducer.interface\";\nimport { ReducerFactory } from \"../../types/constituents/reducers/reducer-factory.interface\";\nimport { ValidityReducer } from \"../../types/constituents/reducers/validity-reducer.interface\";\nimport { FieldStateReducerImpl } from \"./field-state-reducer-impl\";\nimport { FinalizerFacingMultiInputValidatorReducer } from \"./finalizer-facing-multi-input-validator-reducer\";\nimport { FinalizerValidityReducerImpl } from \"./finalizer-validity-reducer-impl\";\nimport { UserFacingMultiInputValidatorReducer } from \"./user-facing-multi-input-validator-reducer\";\nimport { ValidityReducerImpl } from \"./validity-reducer-impl\";\n\nexport class ReducerFactoryImpl implements ReducerFactory {\n  createFieldStateReducer(): FieldStateReducer {\n    return new FieldStateReducerImpl(this.createValidityReducer());\n  }\n  createFinalizerValidityReducer(): FinalizerValidityReducer {\n    return new FinalizerValidityReducerImpl();\n  }\n  createUserMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer {\n    return new UserFacingMultiInputValidatorReducer(this.createValidityReducer());\n  }\n  createFinalizerFacingMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer {\n    throw new FinalizerFacingMultiInputValidatorReducer(this.createValidityReducer());\n  }\n  createValidityReducer(): ValidityReducer {\n    return new ValidityReducerImpl();\n  }\n}","import type { AggregatedStateChanges } from '../../types/constituents/aggregators/aggregated-state-changes.interface';\nimport type { FormElementMap } from '../../types/constituents/form-elements/form-element-map.type';\nimport type { AggregatedStateChangesProxyProducer } from '../../types/constituents/proxies/aggregated-state-changes-proxy-producer.interface';\nimport type { FieldStateReducer } from '../../types/constituents/reducers/field-state-reducer.interface';\nimport type { AnyState } from '../../types/constituents/state/any-state.type';\n\nexport class AggregatedStateChangesProxyProducerImpl\n  implements AggregatedStateChangesProxyProducer\n{\n  readonly accessedFieldNames = new Set<string>();\n  readonly fieldStateReducer: FieldStateReducer;\n\n  constructor(fieldStateReducer: FieldStateReducer) {\n    this.fieldStateReducer = fieldStateReducer;\n  }\n\n  getProxy<Fields extends FormElementMap>(\n    fields: Fields,\n  ): AggregatedStateChanges<Fields> {\n    const aggregatedState: {\n      [key: string]: AnyState;\n    } = {};\n    for (const key in fields) {\n      aggregatedState[key as keyof typeof aggregatedState] = fields[key].state;\n    }\n\n    const fieldStateReducer = this.fieldStateReducer;\n    const accessedFieldNames = this.accessedFieldNames;\n\n    return new Proxy(aggregatedState, {\n      get(target, prop) {\n        if (prop === 'overallValidity') return fieldStateReducer.validity;\n        else if (prop === 'hasOmittedFields') return fieldStateReducer.omit;\n        else {\n          const propName = prop.toString();\n          if (!(prop in fields) || propName === 'constructor') return target[propName];\n\n          accessedFieldNames.add(propName);\n          const state = target[propName];\n          fieldStateReducer.updateTallies(propName, state);\n\n          return target[propName];\n        }\n      },\n    }) as AggregatedStateChanges<Fields>;\n  }\n}\n","import { AggregatedStateChangesProxyProducer } from \"../../types/constituents/proxies/aggregated-state-changes-proxy-producer.interface\";\nimport { ProxyProducerFactory } from \"../../types/constituents/proxies/proxy-producer-factory.interface\";\nimport { ReducerFactory } from \"../../types/constituents/reducers/reducer-factory.interface\";\nimport { AggregatedStateChangesProxyProducerImpl } from \"./aggregated-state-changes-proxy-producer-impl\";\n\nexport class ProxyProducerFactoryImpl implements ProxyProducerFactory {\n  #reducerFactory : ReducerFactory;\n\n  constructor(reducerFactory : ReducerFactory) {\n    this.#reducerFactory = reducerFactory;\n  }\n\n  createAggregatedStateChangesProxyProducer(): AggregatedStateChangesProxyProducer {\n    return new AggregatedStateChangesProxyProducerImpl(this.#reducerFactory.createFieldStateReducer());\n  }\n}","import { OneTimeEventEmitter } from '../../types/constituents/emitters/one-time-event-emitter.interface';\n\nexport class OneTimeEventEmitterImpl implements OneTimeEventEmitter {\n  #eventOccurred: boolean = false;\n  #cb?: () => void;\n\n  onEvent(cb: () => void) {\n    if (this.#eventOccurred) cb();\n    else this.#cb = cb;\n  }\n\n  triggerEvent() {\n    if (!this.#eventOccurred) {\n      this.#eventOccurred = true;\n      if (this.#cb) this.#cb();\n    }\n  }\n}\n","import type { OneTimeValueEmitter } from \"../../types/constituents/emitters/one-time-value-emitter.interface\";\n\nexport class OneTimeValueEmitterImpl<T> implements OneTimeValueEmitter<T> {\n  #value? : T;\n  #cb?: (value : T) => void;\n\n  onValue(cb: (value : T) => void) {\n    if (this.#value) cb(this.#value);\n    else this.#cb = cb;\n  }\n\n  setValue(value : T) {\n    if (!this.#value) {\n      this.#value = value;\n      if (this.#cb) this.#cb(this.#value);\n    }\n  }\n}","import { EmitterFactory } from '../../types/constituents/emitters/emitter-factory.interface';\nimport { OneTimeEventEmitter } from '../../types/constituents/emitters/one-time-event-emitter.interface';\nimport { OneTimeValueEmitter } from '../../types/constituents/emitters/one-time-value-emitter.interface';\nimport { OneTimeEventEmitterImpl } from './one-time-event-emitter-impl';\nimport { OneTimeValueEmitterImpl } from './one-time-value-emitter-impl';\n\nexport class EmitterFactoryImpl\n  implements EmitterFactory\n{\n  createOneTimeEventEmitter(): OneTimeEventEmitter {\n    return new OneTimeEventEmitterImpl();\n  }\n  createOneTimeValueEmitter<T>(): OneTimeValueEmitter<T> {\n    return new OneTimeValueEmitterImpl<T>();\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BehaviorSubject, Observer, Subscription } from 'rxjs';\nimport { OnInitialSubscriptionHandlingBehaviorSubject } from '../../types/constituents/subjects/on-initial-subscription-handling-behavior-subject.interface';\nimport { OneTimeEventEmitter } from '../../types/constituents/emitters/one-time-event-emitter.interface';\n\nexport class OnInitialSubscriptionHandlingBehaviorSubjectImpl<T>\n  extends BehaviorSubject<T>\n  implements OnInitialSubscriptionHandlingBehaviorSubject<T>\n{\n  readonly #onInitialSubscriptionEventEmitter: OneTimeEventEmitter;\n\n  constructor(\n    initialValue : T,\n    onInitialSubscriptionEventEmitter: OneTimeEventEmitter,\n  ) {\n    super(initialValue);\n    this.#onInitialSubscriptionEventEmitter = onInitialSubscriptionEventEmitter;\n  }\n\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    let subscription : Subscription;\n    if(observerOrNext) {\n      if(typeof observerOrNext === 'function') subscription = super.subscribe(observerOrNext, error, complete);\n      else subscription = super.subscribe(observerOrNext);\n    } else subscription = super.subscribe();\n    this.#onInitialSubscriptionEventEmitter.triggerEvent();\n    return subscription;\n  }\n\n  onInitialSubscription(cb: () => void): void {\n    this.#onInitialSubscriptionEventEmitter.onEvent(cb);\n  }\n}\n","import { EmitterFactory } from \"../../types/constituents/emitters/emitter-factory.interface\";\nimport { OnInitialSubscriptionHandlingBehaviorSubject } from \"../../types/constituents/subjects/on-initial-subscription-handling-behavior-subject.interface\";\nimport { SubjectFactory } from \"../../types/constituents/subjects/subject-factory.interface\";\nimport { OnInitialSubscriptionHandlingBehaviorSubjectImpl } from \"./on-initial-subscription-handling-behavior-subject-impl\";\n\nexport class SubjectFactoryImpl implements SubjectFactory {\n  #emitterFactory : EmitterFactory;\n\n  constructor(emitterFactory : EmitterFactory) {\n    this.#emitterFactory = emitterFactory;\n  }\n\n  createOnInitialSubscriptionHandlingBehaviorSubject<T>(initialValue: T): OnInitialSubscriptionHandlingBehaviorSubject<T> {\n    return new OnInitialSubscriptionHandlingBehaviorSubjectImpl(initialValue, this.#emitterFactory.createOneTimeEventEmitter());\n  }\n}","import { ReplaySubject, from, type Subscription, type Subject } from 'rxjs';\nimport { logErrorInDevMode } from '../util/log-error-in-dev-mode';\nimport type { MultiFieldAggregator } from '../../types/constituents/aggregators/multi-field-aggregator.interface';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { FormElementMap } from '../../types/constituents/form-elements/form-element-map.type';\nimport type { AsyncAdapterFn } from '../../types/constituents/adapters/async-adapter-fn.type';\nimport type { AggregatedStateChanges } from '../../types/constituents/aggregators/aggregated-state-changes.interface';\n\nexport class AsyncAdapter<Fields extends FormElementMap, V>\n  implements Adapter<V>\n{\n  readonly stream: Subject<V>;\n  readonly #aggregator: MultiFieldAggregator<Fields>;\n  #adapterFnSubscription?: Subscription;\n\n  constructor(\n    adapterFn: AsyncAdapterFn<Fields, V>,\n    aggregator: MultiFieldAggregator<Fields>\n  ) {\n    this.#aggregator = aggregator;\n    this.stream = new ReplaySubject<V>(1),\n    this.#aggregator.aggregateChanges.subscribe(\n      (aggregateChange: AggregatedStateChanges<Fields>) => {\n        this.#adapterFnSubscription?.unsubscribe();\n        try {\n          const promiseOrObservable = adapterFn(aggregateChange);\n          this.#adapterFnSubscription = from(promiseOrObservable)\n          .subscribe({\n            next: next => this.stream.next(next),\n            error: e => {\n              logErrorInDevMode(e);\n              this.stream.error(e);\n            },\n          });\n        } catch (e) {\n          logErrorInDevMode(e);\n          this.stream.error(e);\n        }\n      }\n    );\n  }\n}","import { ReplaySubject, type Subject } from 'rxjs';\nimport { logErrorInDevMode } from '../util/log-error-in-dev-mode';\nimport type { SyncAdapterFn } from '../../types/constituents/adapters/sync-adapter-fn.type';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { MultiFieldAggregator } from '../../types/constituents/aggregators/multi-field-aggregator.interface';\nimport type { FormElementMap } from '../../types/constituents/form-elements/form-element-map.type';\nimport type { AggregatedStateChanges } from '../../types/constituents/aggregators/aggregated-state-changes.interface';\n\nexport class SyncAdapter<Fields extends FormElementMap, V>\n  implements Adapter<V>\n{\n  readonly stream: Subject<V>;\n  readonly #aggregator: MultiFieldAggregator<Fields>;\n\n  constructor(\n    adapterFn: SyncAdapterFn<Fields, V>,\n    aggregator: MultiFieldAggregator<Fields>\n  ) {\n    this.#aggregator = aggregator;\n    this.stream = new ReplaySubject<V>(1);\n    this.#aggregator.aggregateChanges.subscribe(\n      (aggregateChange: AggregatedStateChanges<Fields>) => {\n        try {\n          const nextValue = adapterFn(aggregateChange); //adapters can return no value\n          this.stream.next(nextValue);\n        } catch (e) {\n          logErrorInDevMode(e);\n          this.stream.error(e);\n        }\n      }\n    );\n  }\n}\n","import { AdapterFactory } from \"../../types/constituents/adapters/adapter-factory.interface\";\r\nimport { AsyncAdapterFn } from \"../../types/constituents/adapters/async-adapter-fn.type\";\r\nimport { SyncAdapterFn } from \"../../types/constituents/adapters/sync-adapter-fn.type\";\r\nimport { AggregatorFactory } from \"../../types/constituents/aggregators/aggregator-factory.interface\";\r\nimport { FormElementMap } from \"../../types/constituents/form-elements/form-element-map.type\";\r\nimport { AsyncAdapter } from \"./async-adapter\";\r\nimport { SyncAdapter } from \"./sync-adapter\";\r\n\r\nexport class AdapterFactoryImpl implements AdapterFactory {\r\n  readonly #aggregatorFactory : AggregatorFactory;\r\n\r\n  constructor(aggregatorFactory : AggregatorFactory) {\r\n    this.#aggregatorFactory = aggregatorFactory;\r\n  }\r\n\r\n  createSyncAdapterFromFnWithFields<Fields extends FormElementMap, V>(syncAdapterFn: SyncAdapterFn<Fields, V>, fields: Fields): SyncAdapter<Fields, V> {\r\n    const multiFieldAggregator = this.#aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\r\n    return new SyncAdapter(syncAdapterFn, multiFieldAggregator);\r\n  }\r\n  createAsyncAdapterFromFnWithFields<Fields extends FormElementMap, V>(asyncAdapterFn: AsyncAdapterFn<Fields, V>, fields: Fields): AsyncAdapter<Fields, V> {\r\n    const multiFieldAggregator = this.#aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\r\n    return new AsyncAdapter(asyncAdapterFn, multiFieldAggregator);\r\n  }\r\n  \r\n}","import { MessageType } from '../../types/constituents/state/messages/message-type.enum';\nimport { Validity } from '../../types/constituents/state/validity.enum';\nimport { GlobalMessages } from '../constants/global-messages.enum';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { Field } from '../../types/constituents/fields/field.interface';\nimport type { DualFieldSetStateArg } from '../../types/constituents/state/dual-field-set-state-arg.interface';\nimport type { DualFieldSetValueArg } from '../../types/constituents/state/dual-field-set-value-arg.interface';\nimport type { FieldState } from '../../types/constituents/state/field-state.interface';\n\nexport class StateControlledField implements Field {\n  protected readonly field: Field;\n  protected readonly adapter: Adapter<DualFieldSetStateArg | FieldState>;\n\n  get stateChanges() {\n    return this.field.stateChanges;\n  }\n\n  get state() {\n    return this.field.state;\n  }\n\n  set omit(omit: boolean) {\n    this.field.omit = omit;\n  }\n\n  get omit() {\n    return this.field.omit;\n  }\n\n  constructor(\n    field: Field,\n    adapter: Adapter<DualFieldSetStateArg | FieldState>,\n  ) {\n    this.field = field;\n    this.adapter = adapter;\n    this.adapter.stream.subscribe({\n      next: (next: DualFieldSetStateArg | FieldState) => this.setState(next),\n      error: () => {\n        this.setState({\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: GlobalMessages.FIELD_ADAPTER_ERROR,\n            },\n          ],\n        });\n      },\n    });\n  }\n\n  setValue(value: DualFieldSetValueArg | string) {\n    this.field.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg | FieldState): void {\n    this.field.setState(state);\n  }\n\n  reset() {\n    this.field.reset();\n  }\n}\n","import { StateControlledField } from './state-controlled-field';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { DualField } from '../../types/constituents/fields/dual-field.interface';\nimport type { DualFieldSetStateArg } from '../../types/constituents/state/dual-field-set-state-arg.interface';\nimport type { DualFieldSetValueArg } from '../../types/constituents/state/dual-field-set-value-arg.interface';\n\nexport class StateControlledDualField\n  extends StateControlledField\n  implements DualField\n{\n  get primaryField() {\n    return this.dualField.primaryField;\n  }\n\n  get secondaryField() {\n    return this.dualField.secondaryField;\n  }\n\n  set useSecondaryField(useSecondaryField: boolean) {\n    this.dualField.useSecondaryField = useSecondaryField;\n  }\n\n  get useSecondaryField() {\n    return this.dualField.useSecondaryField;\n  }\n\n  private get dualField() {\n    return this.field as DualField;\n  }\n\n  constructor(field: DualField, adapter: Adapter<DualFieldSetStateArg>) {\n    super(field, adapter);\n  }\n\n  setValue(value: DualFieldSetValueArg) {\n    super.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg): void {\n    super.setState(state);\n  }\n}\n","import { MessageType } from '../../types/constituents/state/messages/message-type.enum';\nimport { Validity } from '../../types/constituents/state/validity.enum';\nimport { GlobalMessages } from '../constants/global-messages.enum';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { Field } from '../../types/constituents/fields/field.interface';\nimport type { DualFieldSetStateArg } from '../../types/constituents/state/dual-field-set-state-arg.interface';\nimport type { DualFieldSetValueArg } from '../../types/constituents/state/dual-field-set-value-arg.interface';\nimport type { FieldState } from '../../types/constituents/state/field-state.interface';\n\nexport class ValueControlledField implements Field {\n  protected readonly field: Field;\n  protected readonly adapter: Adapter<DualFieldSetValueArg | string | undefined>;\n\n  get stateChanges() {\n    return this.field.stateChanges;\n  }\n\n  get state() {\n    return this.field.state;\n  }\n\n  set omit(omit: boolean) {\n    this.field.omit = omit;\n  }\n\n  get omit() {\n    return this.field.omit;\n  }\n\n  constructor(field: Field, adapter: Adapter<DualFieldSetValueArg | string | undefined>) {\n    this.field = field;\n    this.adapter = adapter;\n    this.adapter.stream.subscribe({\n      next: (next: string | DualFieldSetValueArg | undefined) => {\n        if(next) this.setValue(next)\n      },\n      error: () => {\n        this.setState({\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: GlobalMessages.FIELD_ADAPTER_ERROR,\n            },\n          ],\n        });\n      },\n    });\n  }\n\n  setValue(value: DualFieldSetValueArg | string) {\n    this.field.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg | FieldState): void {\n    this.field.setState(state);\n  }\n\n  reset() {\n    this.field.reset();\n  }\n}\n","import { ValueControlledField } from './value-controlled-field';\nimport type { Adapter } from '../../types/constituents/adapters/adapter.interface';\nimport type { DualField } from '../../types/constituents/fields/dual-field.interface';\nimport type { DualFieldSetValueArg } from '../../types/constituents/state/dual-field-set-value-arg.interface';\nimport type { DualFieldSetStateArg } from '../../types/constituents/state/dual-field-set-state-arg.interface';\n\nexport class ValueControlledDualField\n  extends ValueControlledField\n  implements DualField\n{\n  get primaryField() {\n    return this.dualField.primaryField;\n  }\n\n  get secondaryField() {\n    return this.dualField.secondaryField;\n  }\n\n  set useSecondaryField(useSecondaryField: boolean) {\n    this.dualField.useSecondaryField = useSecondaryField;\n  }\n\n  get useSecondaryField() {\n    return this.dualField.useSecondaryField;\n  }\n\n  private get dualField() {\n    return this.field as DualField;\n  }\n\n  constructor(field: DualField, adapter: Adapter<DualFieldSetValueArg | string | undefined>) {\n    super(field, adapter);\n  }\n\n  setValue(value: DualFieldSetValueArg) {\n    super.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg): void {\n    super.setState(state);\n  }\n}\n","import { AdapterFactory } from \"../../types/constituents/adapters/adapter-factory.interface\";\r\nimport { AsyncDualStateControlFn } from \"../../types/constituents/fields/async-dual-state-control-fn.type\";\r\nimport { AsyncDualValueControlFn } from \"../../types/constituents/fields/async-dual-value-control-fn.type\";\r\nimport { AsyncFieldStateControlFn } from \"../../types/constituents/fields/async-field-state-control-fn.type\";\r\nimport { AsyncFieldValueControlFn } from \"../../types/constituents/fields/async-field-value-control-fn.type\";\r\nimport { ControlledFieldFactory } from \"../../types/constituents/fields/controlled-field-factory.interface\";\r\nimport { DualField } from \"../../types/constituents/fields/dual-field.interface\";\r\nimport { Field } from \"../../types/constituents/fields/field.interface\";\r\nimport { SyncDualStateControlFn } from \"../../types/constituents/fields/sync-dual-state-control-fn.type\";\r\nimport { SyncDualValueControlFn } from \"../../types/constituents/fields/sync-dual-value-control-fn.type\";\r\nimport { SyncFieldStateControlFn } from \"../../types/constituents/fields/sync-field-state-control-fn.type\";\r\nimport { SyncFieldValueControlFn } from \"../../types/constituents/fields/sync-field-value-control-fn.type\";\r\nimport { FormElementMap } from \"../../types/constituents/form-elements/form-element-map.type\";\r\nimport { DualFieldSetStateArg } from \"../../types/constituents/state/dual-field-set-state-arg.interface\";\r\nimport { DualFieldSetValueArg } from \"../../types/constituents/state/dual-field-set-value-arg.interface\";\r\nimport { FieldState } from \"../../types/constituents/state/field-state.interface\";\r\nimport { AsyncAdapter } from \"../adapters/async-adapter\";\r\nimport { SyncAdapter } from \"../adapters/sync-adapter\";\r\nimport { StateControlledDualField } from \"./state-controlled-dual-field\";\r\nimport { StateControlledField } from \"./state-controlled-field\";\r\nimport { ValueControlledDualField } from \"./value-controlled-dual-field\";\r\nimport { ValueControlledField } from \"./value-controlled-field\";\r\n\r\nexport class ControlledFieldFactoryImpl implements ControlledFieldFactory {\r\n  readonly #adapterFactory : AdapterFactory;\r\n\r\n  constructor(adapterFactory : AdapterFactory) {\r\n    this.#adapterFactory = adapterFactory;\r\n  }\r\n  createStateControlledFieldWithSyncControlFn<Fields extends FormElementMap>(baseField: Field, stateControlFn: SyncFieldStateControlFn<Fields>, fields: Fields): StateControlledField {\r\n    const adapter = this.#adapterFactory.createSyncAdapterFromFnWithFields(stateControlFn, fields);\r\n    return new StateControlledField(baseField, adapter as SyncAdapter<Fields, FieldState | DualFieldSetStateArg>);\r\n  }\r\n  createStateControlledFieldWithAsyncControlFn<Fields extends FormElementMap>(baseField: Field, stateControlFn: AsyncFieldStateControlFn<Fields>, fields: Fields): StateControlledField {\r\n    const adapter = this.#adapterFactory.createAsyncAdapterFromFnWithFields(stateControlFn, fields);\r\n    return new StateControlledField(baseField, adapter as AsyncAdapter<Fields, FieldState | DualFieldSetStateArg>);\r\n  }\r\n  createValueControlledFieldWithSyncControlFn<Fields extends FormElementMap>(baseField: Field, valueControlFn: SyncFieldValueControlFn<Fields>, fields: Fields): ValueControlledField {\r\n    const adapter = this.#adapterFactory.createSyncAdapterFromFnWithFields(valueControlFn, fields);\r\n    return new ValueControlledField(baseField, adapter as SyncAdapter<Fields, string | DualFieldSetValueArg | undefined>);\r\n  }\r\n  createValueControlledFieldWithAsyncControlFn<Fields extends FormElementMap>(baseField: Field, valueControlFn: AsyncFieldValueControlFn<Fields>, fields: Fields): ValueControlledField {\r\n    const adapter = this.#adapterFactory.createAsyncAdapterFromFnWithFields(valueControlFn, fields);\r\n    return new ValueControlledField(baseField, adapter as AsyncAdapter<Fields, string | DualFieldSetValueArg | undefined>);\r\n  }\r\n  createStateControlledDualFieldWithSyncControlFn<Fields extends FormElementMap>(baseField: DualField, stateControlFn: SyncDualStateControlFn<Fields>, fields: Fields): StateControlledDualField {\r\n    const adapter = this.#adapterFactory.createSyncAdapterFromFnWithFields(stateControlFn, fields);\r\n    return new StateControlledDualField(baseField, adapter);\r\n  }\r\n  createStateControlledDualFieldWithAsyncControlFn<Fields extends FormElementMap>(baseField: DualField, stateControlFn: AsyncDualStateControlFn<Fields>, fields: Fields): StateControlledDualField {\r\n    const adapter = this.#adapterFactory.createAsyncAdapterFromFnWithFields(stateControlFn, fields);\r\n    return new StateControlledDualField(baseField, adapter);\r\n  }\r\n  createValueControlledDualFieldWithSyncControlFn<Fields extends FormElementMap>(baseField: DualField, valueControlFn: SyncDualValueControlFn<Fields>, fields: Fields): ValueControlledDualField {\r\n    const adapter = this.#adapterFactory.createSyncAdapterFromFnWithFields(valueControlFn, fields);\r\n    return new ValueControlledDualField(baseField, adapter as SyncAdapter<Fields, string | DualFieldSetValueArg | undefined>);\r\n  }\r\n  createValueControlledDualFieldWithAsyncControlFn<Fields extends FormElementMap>(baseField: DualField, valueControlFn: AsyncDualValueControlFn<Fields>, fields: Fields): ValueControlledDualField {\r\n    const adapter = this.#adapterFactory.createAsyncAdapterFromFnWithFields(valueControlFn, fields);\r\n    return new ValueControlledDualField(baseField, adapter as AsyncAdapter<Fields, string | DualFieldSetValueArg | undefined>);\r\n  }\r\n}","import { email } from \"./model/constituents/validators/util/email\";\r\nimport { required } from \"./model/constituents/validators/util/required\";\r\nimport { Services, getContainer } from \"./model/container\";\r\nimport { Field } from \"./model/types/constituents/fields/field.interface\";\r\nimport { Validity } from \"./model/types/constituents/state/validity.enum\";\r\nimport { FormElementsParser } from \"./model/types/parser/form-elements/form-elements-parser.interface\";\r\n\r\nconst container = getContainer();\r\n\r\nconst formElementsParser = container.get<FormElementsParser>(Services.FormElementsParser);\r\n\r\nconst formElementMap = formElementsParser.parseTemplate({\r\n  fieldA : 'a field',\r\n  fieldB : {\r\n    defaultValue: 'field b',\r\n    syncValidators: [required('Field B is required.'), email('Field B must be an email.')]\r\n  },\r\n  fieldC : {\r\n    defaultValue: 'field c',\r\n    syncValueControlFn: ({ fieldB }) => {\r\n      if(fieldB.validity < Validity.VALID_FINALIZABLE) return;\r\n      return fieldB.value.toUpperCase()\r\n    }\r\n  },\r\n  fieldD : {\r\n    primaryDefaultValue: 'field d',\r\n    secondaryDefaultValue: 'FIELD D',\r\n    omitByDefault: true\r\n  }\r\n});\r\n\r\n(formElementMap.fieldB as Field).setValue('new value in field B');\r\n(formElementMap.fieldB as Field).setValue('user@example.com');\r\n\r\nfor(const key in formElementMap) {\r\n  console.log(key);\r\n  console.log(formElementMap[key].state);\r\n}"],"mappings":"gyBACA,IAAMA,GAAS,CACb,SAAU,GACV,WACE,yEACJ,ECDO,SAASC,GAAOC,EAAuBC,EAAkD,CAC9F,IAAMC,EAAQC,GAAO,WAErB,OAAQC,GAAmB,CACtBD,GAAO,WAAUC,EAAQA,EAAM,KAAK,GAEvC,IAAMC,EAA2B,CAC/B,QAAUH,EAAM,KAAKE,CAAK,CAC5B,EACA,OAAIC,EAAO,QAEDJ,IACRI,EAAO,QAAUJ,GAFjBI,EAAO,QAAUL,EAKZK,CACT,CACF,CCjBO,SAASC,GAASC,EAAuBC,EAAkD,CAChG,OAAQC,GAAmB,CACtBC,GAAO,WAAUD,EAAQA,EAAM,KAAK,GAEvC,IAAME,EAA2B,CAC/B,QAAUF,EAAM,OAAS,CAC3B,EACA,OAAIE,EAAO,QAEDH,IACRG,EAAO,QAAUH,GAFjBG,EAAO,QAAUJ,EAKZI,CACT,CACF,CCnBA,IAAAC,GAAO,4BACPC,GAA0B,qBAC1BC,EAAwB,uCCFxB,IAAAC,GAA2D,gBCApD,SAASC,EAAkBC,EAAS,CACzC,QAAQ,IAAI,WAAa,eAAiB,QAAQ,MAAMA,CAAC,CAC3D,CDFA,IAAAC,EAAAC,GAAAC,EAeaC,GAAN,KAEP,CAKE,YACEC,EACAC,EACA,CAPFC,EAAA,KAASN,EAAT,QACAM,EAAA,KAASL,GAAT,QACAK,EAAA,KAAAJ,EAAqD,CAAC,GAMpDK,EAAA,KAAKP,EAAcI,GACnBG,EAAA,KAAKN,GAA2BI,EAClC,CAEA,SAASG,EAAU,CACjB,KAAK,eAAe,EACpB,IAAMC,EAAyC,CAC7C,WAAY,CACV,MAAAD,EACA,WACA,SAAU,CACR,CACE,eACA,KAAME,EAAA,KAAKT,GACb,CACF,CACF,CACF,EACA,OAAAQ,EAAO,WACL,IAAI,cAAoCE,GAAc,CACpD,IAAMC,EAA4C,CAChD,MAAAJ,EACA,WACA,SAAU,CAAC,CACb,EACA,QAASK,EAAc,EAAGA,EAAcH,EAAA,KAAKV,GAAY,OAAQa,IAAe,CAC9E,IAAMC,EAAYJ,EAAA,KAAKV,GAAYa,CAAW,EAC9C,GAAI,CAEF,IAAME,EAAUD,EAAUN,CAAK,EACzBQ,MAAe,SAAKD,CAAO,EAC9B,UACC,KAAK,wBAAwBH,EAAkBD,EAAYE,CAAW,CACxE,EACFH,EAAA,KAAKR,GAAwBW,CAAW,EAAIG,EAC9C,OAASC,EAAG,CACV,KAAK,mCACHL,EACAD,CACF,EAAEM,CAAC,CACL,CACF,CACF,CAAC,EACIR,CACT,CAEQ,wBACNG,EACAM,EACAL,EACA,CACA,MAAO,CACL,KAAM,KAAK,kCACTD,EACAM,EACAL,CACF,EACA,MAAO,KAAK,mCACVD,EACAM,CACF,CACF,CACF,CAEQ,kCACNN,EACAM,EACAL,EACA,CA4BA,OA3BoBM,GAA0B,CAC5C,GAAM,CAAE,QAAAC,EAAS,QAASC,CAAW,EAAIF,EACpCC,GAYCC,GACFT,EAAiB,SAAS,KAAK,CAC7B,aACA,KAAMS,CACR,CAAC,EAEH,KAAK,gBAAgBR,CAAW,EAC5B,KAAK,uBAAuB,IAC9BK,EAAgB,KAAKN,CAAgB,EACrCM,EAAgB,SAAS,KApB3B,KAAK,eAAe,EACpBN,EAAiB,SAAW,EACxBS,GACFT,EAAiB,SAAS,KAAK,CAC7B,eACA,KAAMS,CACR,CAAC,EAEHH,EAAgB,KAAKN,CAAgB,EACrCM,EAAgB,SAAS,EAc7B,CAEF,CAEQ,mCACNN,EACAM,EACA,CAYA,OAXqBD,GAAW,CAC9B,KAAK,eAAe,EACpBK,EAAkBL,CAAC,EACnBL,EAAiB,SAAW,EAC5BA,EAAiB,SAAS,KAAK,CAC7B,aACA,+DACF,CAAC,EACDM,EAAgB,KAAKN,CAAgB,EACrCM,EAAgB,SAAS,CAC3B,CAEF,CAEQ,gBAAiB,CACvB,QAAUK,KAAOb,EAAA,KAAKR,GACpBQ,EAAA,KAAKR,GAAwBqB,CAAG,EAAE,YAAY,EAEhDhB,EAAA,KAAKL,EAA0B,CAAC,EAClC,CAEQ,gBAAgBW,EAAsB,CAC5CH,EAAA,KAAKR,GAAwBW,CAAW,EAAE,YAAY,EACtD,OAAOH,EAAA,KAAKR,GAAwBW,CAAW,CACjD,CAEQ,wBAAyB,CAC/B,OAAO,OAAO,KAAKH,EAAA,KAAKR,EAAuB,EAAE,SAAW,CAC9D,CACF,EA5IWF,EAAA,YACAC,GAAA,YACTC,EAAA,YEpBF,IAAAsB,GAAAC,GAMaC,GAAN,KAEP,CAGE,YACEC,EACAC,EACA,CALFC,EAAA,KAASL,GAAT,QACAK,EAAA,KAASJ,GAAT,QAKEK,EAAA,KAAKN,GAAsBG,GAC3BG,EAAA,KAAKL,GAAuBG,EAC9B,CAEA,SAASG,EAAU,CACjB,IAAMC,EACJC,EAAA,KAAKT,IAAoB,SAASO,CAAK,EAEzC,GAAIC,EAAO,WAAW,UAAY,EAAkB,OAAOA,EAE3D,IAAME,EAAcD,EAAA,KAAKR,IAAqB,SAASM,CAAK,EAE5D,MAAO,CACL,WAAY,CACV,MAAOG,EAAY,WAAW,MAC9B,SAAUA,EAAY,WAAW,SACjC,SAAU,CACR,GAAGF,EAAO,WAAW,SACrB,GAAGE,EAAY,WAAW,QAC5B,CACF,EACA,WAAYA,EAAY,UAC1B,CACF,CACF,EA9BWV,GAAA,YACAC,GAAA,YCVX,IAAAU,GAQaC,GAAN,KAEP,CAGE,YAAYC,EAAqC,CAFjDC,EAAA,KAASH,GAAT,QAGEI,EAAA,KAAKJ,GAAcE,EACrB,CAEA,SAASG,EAAU,CACjB,MAAO,CACL,WAAY,KAAK,aAAaA,CAAK,CACrC,CACF,CAEQ,aAAaA,EAAU,CAC7B,IAAMC,EAAkC,CACtC,MAAAD,EACA,WACA,SAAU,CAAC,CACb,EACA,GAAI,CACF,QAAWE,KAAaC,EAAA,KAAKR,IAAa,CACxC,GAAM,CAAE,QAAAS,EAAS,QAASC,CAAW,EAAIH,EAAUF,CAAK,EACnDI,IAASH,EAAO,SAAW,GAC5BI,GACFJ,EAAO,SAAS,KAAK,CACnB,KAAMG,oBACN,KAAMC,CACR,CAAC,CAEL,CACF,OAASC,EAAG,CACVC,EAAkBD,CAAC,EACnBL,EAAO,SAAW,EAClBA,EAAO,SAAS,KAAK,CACnB,aACA,+DACF,CAAC,CACH,CACA,OAAOA,CACT,CACF,EAvCWN,GAAA,YCFJ,IAAMa,GAAN,KAAuF,CAC5F,gCAAmCC,EAAoCC,EAAsCC,sBAA4H,CACvO,IAAMC,EAAqB,IAAIC,GAA8BJ,CAAc,EAC3E,GAAGC,EAAgB,OAAS,EAAG,CAC7B,IAAMI,EAAsB,IAAIC,GAA+BL,EAAiBC,CAA4B,EAC5G,OAAGF,EAAe,OAAS,EAAU,IAAIO,GAAgCJ,EAAoBE,CAAmB,EACpGA,CACd,KAAO,QAAOF,CAChB,CACF,EClBA,IAAAK,GAA8C,gBAA9C,IAAAC,EAAAC,EAAAC,EAOaC,GAAN,KAAyC,CAsC9C,YACEC,EACAC,EACAC,EACA,CAtCFC,EAAA,KAAAP,EAA8B,IAC9BO,EAAA,KAAAN,EAAA,QACAM,EAAA,KAAAL,EAAA,QAqCE,KAAK,aAAeE,EACpB,KAAK,eAAiBC,EACtBG,EAAA,KAAKN,EAAiBI,GACtBE,EAAA,KAAKP,EAAQQ,EAAA,KAAKP,IAClB,KAAK,aAAa,aAAa,UAAU,IAAM,CAtDnD,IAAAQ,EAuDWD,EAAA,KAAKT,KAAoBU,EAAA,KAAK,eAAL,MAAAA,EAAmB,KAAK,KAAK,MAC7D,CAAC,EACD,KAAK,eAAe,aAAa,UAAU,IAAM,CAzDrD,IAAAA,EA0DUD,EAAA,KAAKT,MAAoBU,EAAA,KAAK,eAAL,MAAAA,EAAmB,KAAK,KAAK,OAC5D,CAAC,EACD,KAAK,aAAe,IAAI,mBAAgB,KAAK,KAAK,CACpD,CA9CA,IAAI,OAAQ,CACV,IAAMC,EACHF,EAAA,KAAKT,GAEF,KAAK,eAAe,MADpB,KAAK,aAAa,MAGxB,OAAAW,EAAM,kBAAoBF,EAAA,KAAKT,GAC/BW,EAAM,KAAOF,EAAA,KAAKR,GACXU,CACT,CAEA,IAAI,kBAAkBC,EAAmB,CACvC,IAAMC,EAAiB,KAAK,oBAAsBD,EAClDJ,EAAA,KAAKR,EAAqBY,GACtB,KAAK,cAAgBC,GAAgB,KAAK,aAAa,KAAK,KAAK,KAAK,CAC5E,CAEA,IAAI,mBAAoB,CACtB,OAAOJ,EAAA,KAAKT,EACd,CAEA,IAAI,KAAKc,EAAe,CApC1B,IAAAJ,EAqCIF,EAAA,KAAKP,EAAQa,IACbJ,EAAA,KAAK,eAAL,MAAAA,EAAmB,KAAK,KAAK,MAC/B,CAEA,IAAI,MAAO,CACT,OAAOD,EAAA,KAAKR,EACd,CAoBA,SAASc,EAAgC,CACnCA,EAAS,mBACX,KAAK,aAAa,SAASA,EAAS,iBAAiB,EACnDA,EAAS,qBACX,KAAK,eAAe,SAASA,EAAS,mBAAmB,EACvDA,EAAS,oBAAsB,SACjC,KAAK,kBAAoBA,EAAS,kBACtC,CAEA,SAASC,EAAgC,CACnCA,EAAS,OAAS,SAAW,KAAK,KAAOA,EAAS,MAClDA,EAAS,mBACX,KAAK,aAAa,SAASA,EAAS,iBAAiB,EACnDA,EAAS,qBACX,KAAK,eAAe,SAASA,EAAS,mBAAmB,EACvDA,EAAS,oBAAsB,SACjC,KAAK,kBAAoBA,EAAS,kBACtC,CAEA,OAAQ,CACNR,EAAA,KAAKP,EAAQQ,EAAA,KAAKP,IAClB,KAAK,aAAa,MAAM,EACxB,KAAK,eAAe,MAAM,EAC1B,KAAK,kBAAoB,EAC3B,CACF,EA7EEF,EAAA,YACAC,EAAA,YACAC,EAAA,YCbF,IAAAe,GAA6E,gBCAtE,SAASC,EAAWC,EAAgB,CACzC,OAAO,KAAK,MAAM,KAAK,UAAUA,CAAM,CAAC,CAC1C,CDFA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EASaC,GAAN,KAAiC,CAuBtC,YACEC,EACAC,EACAC,EACA,CAzBFC,EAAA,KAAST,EAAT,QACAS,EAAA,KAASR,EAAT,QACAQ,EAAA,KAASP,EAAT,QACAO,EAAA,KAAAN,EAAA,QACAM,EAAA,KAAAL,EAAA,QAsBEM,EAAA,KAAKV,EAAkBM,GACvBI,EAAA,KAAKT,EAAgBM,GACrBG,EAAA,KAAKR,EAAiBM,GACtB,IAAMG,EAAeC,EAAA,KAAKZ,GAAgB,SAASY,EAAA,KAAKX,EAAa,EACrES,EAAA,KAAKP,EAASU,EAAAC,EAAA,GACTH,EAAa,YADJ,CAEZ,KAAMC,EAAA,KAAKV,EACb,IACA,KAAK,aAAe,IAAI,mBAAgB,KAAK,KAAK,EAC9CS,EAAa,YACf,KAAK,yBAAyBA,EAAa,UAAU,CACzD,CA/BA,IAAI,OAAQ,CACV,OAAOI,EAAWH,EAAA,KAAKT,EAAM,CAC/B,CAEA,IAAI,KAAKa,EAAe,CACtB,KAAK,SAASH,EAAAC,EAAA,GACT,KAAK,OADI,CAEZ,KAAAE,CACF,EAAC,CACH,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,IACpB,CAoBA,SAASC,EAAe,CAClBL,EAAA,KAAKR,IACPQ,EAAA,KAAKR,GAA4B,YAAY,EAC/C,IAAMc,EAAiBN,EAAA,KAAKZ,GAAgB,SAASiB,CAAK,EAC1D,KAAK,SAASJ,EAAAC,EAAA,GACTI,EAAe,YADN,CAEZ,KAAM,KAAK,MAAM,IACnB,EAAC,EACGA,EAAe,YACjB,KAAK,yBAAyBA,EAAe,UAAU,CAC3D,CAEA,SAASC,EAAmB,CAC1BT,EAAA,KAAKP,EAASY,EAAWI,CAAK,GAC9B,KAAK,aAAa,KAAK,KAAK,KAAK,CACnC,CAEA,OAAQ,CACNP,EAAA,KAAKT,GAAO,KAAOS,EAAA,KAAKV,GACxB,KAAK,SAASU,EAAA,KAAKX,EAAa,CAClC,CAEQ,yBACNmB,EACA,CA1EJ,IAAAC,GA2EIA,EAAAT,EAAA,KAAKR,KAAL,MAAAiB,EAAkC,cAClCX,EAAA,KAAKN,EAA8BgB,EAAW,UAAUE,GAAU,CAChE,KAAK,SAAST,EAAAC,EAAA,GACTQ,GADS,CAEZ,SAAU,CACR,GAAG,KAAK,MAAM,SAAS,OACpBC,GAAqBA,EAAQ,gBAChC,EACA,GAAGD,EAAO,QACZ,EACA,KAAM,KAAK,MAAM,IACnB,EAAC,CACH,CAAC,EACH,CACF,EA9EWtB,EAAA,YACAC,EAAA,YACAC,EAAA,YACTC,EAAA,YACAC,EAAA,YEfF,IAAAoB,GASaC,GAAN,KAAuD,CAG5D,YAAYC,EAAqE,CAFjFC,EAAA,KAAAH,GAAA,QAGEI,EAAA,KAAKJ,GAAoCE,EAC3C,CAEA,YAAYG,EAAsBC,EAAwBC,EAAyCC,EAA2CC,EAA+C,CAC3L,IAAMC,EAAiBC,EAAA,KAAKX,IAAkC,gCAAgCO,EAAgBC,EAAiBC,CAA4B,EAC3J,OAAO,IAAIG,GAAUF,EAAgBL,EAAcC,CAAa,CAClE,CAEA,gBAAgBO,EAA6BC,EAA+BR,EAAwBC,EAAyCC,EAA2CC,EAAmD,CACzO,IAAMM,EAAe,KAAK,YAAYF,EAAqB,GAAON,EAAgBC,EAAiBC,CAA4B,EACzHO,GAAiB,KAAK,YAAYF,EAAuB,GAAOP,EAAgBC,EAAiBC,CAA4B,EACnI,OAAO,IAAIQ,GAAcF,EAAcC,GAAgBV,CAAa,CACtE,CACF,EAhBEN,GAAA,YCVF,IAAAkB,GAA8C,gBAA9C,IAAAC,EAAAC,EAAAC,EAAAC,EAQaC,GAAN,KAA2C,CA4BhD,YACEC,EACAC,EACAC,EACAC,EACA,CA9BFC,EAAA,KAAST,EAAT,QACAS,EAAA,KAASR,EAAT,QACAQ,EAAA,KAASP,EAAT,QACAO,EAAA,KAAAN,EAAA,QA4BE,KAAK,iBAAmBE,EACxBK,EAAA,KAAKV,EAAoBM,GACzBI,EAAA,KAAKT,EAAyCM,GAC9CG,EAAA,KAAKR,EAAiBM,GACtBE,EAAA,KAAKP,EAAQQ,EAAA,KAAKT,IAElBS,EAAA,KAAKV,GAAuC,gBAAgB,UAAU,IAAM,CAhDhF,IAAAW,GAiDMA,EAAA,KAAK,eAAL,MAAAA,EAAmB,KAAK,KAAK,MAC/B,CAAC,EAEDD,EAAA,KAAKX,GAAkB,aAAa,UAAU,IAAM,CApDxD,IAAAY,EAqDU,KAAK,gBAAcA,EAAA,KAAK,eAAL,MAAAA,EAAmB,KAAK,KAAK,OACtD,CAAC,EAED,KAAK,aAAe,IAAI,mBAAgB,KAAK,KAAK,CACpD,CAzCA,IAAI,OAAQ,CACV,OAAOC,EAAWC,EAAAC,EAAA,GACbJ,EAAA,KAAKX,GAAkB,OADV,CAEhB,SAAU,CACR,GAAGW,EAAA,KAAKV,GAAuC,SAC/C,GAAGU,EAAA,KAAKX,GAAkB,MAAM,QAClC,EACA,KAAMW,EAAA,KAAKR,EACb,EAAC,CACH,CAEA,IAAI,KAAKa,EAAe,CACtBN,EAAA,KAAKP,EAAQa,GACT,KAAK,cAAc,KAAK,aAAa,KAAK,KAAK,KAAK,CAC1D,CAEA,IAAI,MAAO,CACT,OAAOL,EAAA,KAAKR,EACd,CAyBA,OAAQ,CACNO,EAAA,KAAKP,EAAQQ,EAAA,KAAKT,IAClB,QAAUe,KAAa,KAAK,iBAC1B,KAAK,iBAAiBA,CAAS,EAAE,MAAM,CAE3C,CACF,EAtDWjB,EAAA,YACAC,EAAA,YACAC,EAAA,YACTC,EAAA,YCdF,IAAAe,EAkBaC,GAAN,KAAoG,CAkEzG,YAAYC,EAAyD,CAjErEC,EAAA,KAAAH,EAAA,QAkEEI,EAAA,KAAKJ,EAAYE,GACjB,KAAK,cAAc,CACrB,CAlEA,IAAI,cAAe,CACjB,OAAOG,EAAA,KAAKL,aAAqBM,EACnC,CACA,IAAI,aAAc,CAChB,MACE,CAAC,KAAK,cAAgB,OAAOD,EAAA,KAAKL,IAAc,UAAY,EAAE,iBAAkBK,EAAA,KAAKL,GAEzF,CACA,IAAI,YAA0E,CAC5E,OAAG,KAAK,aAAqBK,EAAA,KAAKL,GAC1B,KAAK,YAAoB,KAAK,uBAAuB,EACjD,KAAK,mBAAmB,CACtC,CACA,IAAI,oBAAqB,CACvB,GAAG,KAAK,2BAIN,OAFE,KAAK,YAAcK,EAAA,KAAKL,GACtBK,EAAA,KAAKL,IAC0B,kBAEvC,CACA,IAAI,qBAAsB,CACxB,GAAG,KAAK,4BAIN,OAFE,KAAK,YAAcK,EAAA,KAAKL,GACtBK,EAAA,KAAKL,IAC2B,mBAExC,CACA,IAAI,oBAAqB,CACvB,GAAG,KAAK,2BAIN,OAFE,KAAK,YAAcK,EAAA,KAAKL,GACtBK,EAAA,KAAKL,IAC0B,kBAEvC,CACA,IAAI,qBAAsB,CACxB,GAAG,KAAK,4BAIN,OAFE,KAAK,YAAcK,EAAA,KAAKL,GACtBK,EAAA,KAAKL,IAC2B,mBAExC,CAEA,IAAY,4BAA6B,CACvC,MAAO,CAAC,KAAK,cAAgB,OAAOK,EAAA,KAAKL,IAAc,UAAa,uBAAwBK,EAAA,KAAKL,EACnG,CAEA,IAAY,4BAA6B,CACvC,MAAO,CAAC,KAAK,cAAgB,OAAOK,EAAA,KAAKL,IAAc,UAAa,uBAAwBK,EAAA,KAAKL,EACnG,CAGA,IAAY,6BAA8B,CACxC,MAAO,CAAC,KAAK,cAAgB,OAAOK,EAAA,KAAKL,IAAc,UAAa,wBAAyBK,EAAA,KAAKL,EACpG,CAEA,IAAY,6BAA8B,CACxC,MAAO,CAAC,KAAK,cAAgB,OAAOK,EAAA,KAAKL,IAAc,UAAa,wBAAyBK,EAAA,KAAKL,EACpG,CAOQ,eAAgB,CACtB,GAAG,OAAOK,EAAA,KAAKL,IAAc,UAAYK,EAAA,KAAKL,aAAqBM,GAAgB,OAEnF,GAAG,OAAOD,EAAA,KAAKL,IAAc,SAAU,MAAM,IAAI,MAC/C,yGAAyG,OAAOK,EAAA,KAAKL,EAAS,GAChI,EAEA,GAAG,EAAE,iBAAkBK,EAAA,KAAKL,KAAc,EAAE,wBAAyBK,EAAA,KAAKL,IAAa,0BAA2BK,EAAA,KAAKL,IACrH,MAAM,IAAI,MAAM,oIAAoI,EAGtJ,GAAG,iBAAkBK,EAAA,KAAKL,KAAc,wBAAyBK,EAAA,KAAKL,IAAa,0BAA2BK,EAAA,KAAKL,IACjH,MAAM,IAAI,MAAM,iIAAiI,EAGnJ,IAAIO,EAAiB,EAKrB,GAJG,KAAK,4BAA4BA,IACjC,KAAK,4BAA4BA,IACjC,KAAK,6BAA6BA,IAClC,KAAK,6BAA6BA,IAClCA,EAAiB,EAClB,MAAM,IAAI,MAAM,2FAA2F,CAE/G,CAEQ,oBAA2C,CACjD,GAAG,OAAOF,EAAA,KAAKL,IAAc,SAC3B,MAAO,CACL,aAAeK,EAAA,KAAKL,GACpB,eAAiB,CAAC,EAClB,gBAAkB,CAAC,EACnB,cAAgB,EAClB,EACK,CACL,IAAMQ,EAAgBH,EAAA,KAAKL,GAC3B,MAAO,CACL,aAAeQ,EAAc,aAC7B,eAAiBA,EAAc,eAAiBA,EAAc,eAAiB,CAAC,EAChF,gBAAkBA,EAAc,gBAAkBA,EAAc,gBAAkB,CAAC,EACnF,cAAgB,EAAAA,EAAc,cAC9B,6BAA+BA,EAAc,4BAC/C,CACF,CACF,CAEQ,wBAAmD,CACzD,IAAMC,EAAoBJ,EAAA,KAAKL,GAC/B,MAAO,CACL,oBAAsBS,EAAkB,oBACxC,sBAAwBA,EAAkB,sBAC1C,eAAiBA,EAAkB,eAAiBA,EAAkB,eAAiB,CAAC,EACxF,gBAAkBA,EAAkB,gBAAkBA,EAAkB,gBAAkB,CAAC,EAC3F,cAAgB,EAAAA,EAAkB,cAClC,6BAA+BA,EAAkB,4BACnD,CACF,CACF,EA9HET,EAAA,YCnBF,IAAAU,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAoBaC,GAAN,KAA2D,CAahE,YAAYC,EAAqCC,EAAiD,CAZlGC,EAAA,KAASd,EAAT,QACAc,EAAA,KAASb,EAAT,QACAa,EAAA,KAASZ,EAA2B,CAAC,GACrCY,EAAA,KAASX,GAA6B,IAAI,KAC1CW,EAAA,KAASV,GAA6B,IAAI,KAC1CU,EAAA,KAAST,GAA8B,IAAI,KAC3CS,EAAA,KAASR,GAA8B,IAAI,KAC3CQ,EAAA,KAASP,GAAiC,IAAI,KAC9CO,EAAA,KAASN,GAAiC,IAAI,KAC9CM,EAAA,KAASL,GAAkC,IAAI,KAC/CK,EAAA,KAASJ,GAAkC,IAAI,KAG7CK,EAAA,KAAKf,EAAoBY,GACzBG,EAAA,KAAKd,EAA0BY,EACjC,CAEA,cAAgCG,EAAgF,CAC9G,QAAUC,KAAaD,EAAQ,CAC7B,IAAME,EAAS,IAAIC,GAAwBH,EAAOC,CAAS,CAAC,EAC5D,GAAGC,EAAO,aAAcE,EAAA,KAAKlB,GAAQe,CAAS,EAAIC,EAAO,mBACjDA,EAAO,YAAa,CAC1B,IAAMG,EAAiBH,EAAO,WAC9BE,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKpB,GAAkB,gBAC/CqB,EAAe,oBACfA,EAAe,sBACfA,EAAe,cACfA,EAAe,eACfA,EAAe,gBACfA,EAAe,4BACjB,CACF,KAAO,CACL,IAAMA,EAAiBH,EAAO,WAC9BE,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKpB,GAAkB,YAC/CqB,EAAe,aACfA,EAAe,cACfA,EAAe,eACfA,EAAe,gBACfA,EAAe,4BACjB,CACF,CACGH,EAAO,mBACLA,EAAO,YAAaE,EAAA,KAAKb,IAA+B,IAAIU,EAAWC,EAAO,kBAAkB,EAC9FE,EAAA,KAAKjB,IAA2B,IAAIc,EAAWC,EAAO,kBAA6D,EAChHA,EAAO,oBACZA,EAAO,YAAaE,EAAA,KAAKX,IAAgC,IAAIQ,EAAWC,EAAO,mBAAmB,EAChGE,EAAA,KAAKf,IAA4B,IAAIY,EAAWC,EAAO,mBAA+D,EACnHA,EAAO,mBACZA,EAAO,YAAaE,EAAA,KAAKZ,IAA+B,IAAIS,EAAWC,EAAO,kBAA4D,EACxIE,EAAA,KAAKhB,IAA2B,IAAIa,EAAWC,EAAO,kBAA6D,EAChHA,EAAO,sBACZA,EAAO,YAAaE,EAAA,KAAKV,IAAgC,IAAIO,EAAWC,EAAO,mBAA8D,EAC3IE,EAAA,KAAKd,IAA4B,IAAIW,EAAWC,EAAO,mBAA+D,EAE/H,CAGA,OAAU,CAACD,EAAWK,CAAS,IAAKF,EAAA,KAAKjB,IAA2B,QAAQ,EAC1EiB,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,4CAA4CmB,EAAA,KAAKlB,GAAQe,CAAS,EAAYK,EAAWF,EAAA,KAAKlB,EAAO,EAE9J,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKhB,IAA2B,QAAQ,EAC1EgB,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,4CAA4CmB,EAAA,KAAKlB,GAAQe,CAAS,EAAYK,EAAWF,EAAA,KAAKlB,EAAO,EAE9J,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKf,IAA4B,QAAQ,EAC3Ee,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,6CAA6CmB,EAAA,KAAKlB,GAAQe,CAAS,EAAYK,EAAWF,EAAA,KAAKlB,EAAO,EAE/J,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKd,IAA4B,QAAQ,EAC3Ec,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,6CAA6CmB,EAAA,KAAKlB,GAAQe,CAAS,EAAYK,EAAWF,EAAA,KAAKlB,EAAO,EAE/J,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKb,IAA+B,QAAQ,EAC9Ea,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,gDAAgDmB,EAAA,KAAKlB,GAAQe,CAAS,EAAgBK,EAAWF,EAAA,KAAKlB,EAAO,EAEtK,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKZ,IAA+B,QAAQ,EAC9EY,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,gDAAgDmB,EAAA,KAAKlB,GAAQe,CAAS,EAAgBK,EAAWF,EAAA,KAAKlB,EAAO,EAEtK,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKX,IAAgC,QAAQ,EAC/EW,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,iDAAiDmB,EAAA,KAAKlB,GAAQe,CAAS,EAAgBK,EAAWF,EAAA,KAAKlB,EAAO,EAEvK,OAAU,CAACe,EAAWK,CAAS,IAAKF,EAAA,KAAKV,IAAgC,QAAQ,EAC/EU,EAAA,KAAKlB,GAAQe,CAAS,EAAIG,EAAA,KAAKnB,GAAwB,iDAAiDmB,EAAA,KAAKlB,GAAQe,CAAS,EAAgBK,EAAWF,EAAA,KAAKlB,EAAO,EAEvK,OAAOkB,EAAA,KAAKlB,EACd,CACF,EAnFWF,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YC/BX,IAAAa,EAAAC,EAAAC,GAAAC,EAAAC,EAUaC,GAAN,KAEP,CAqBE,YACEC,EACAC,EACAC,EACAC,EACAC,EACA,CAtBFC,EAAA,KAASX,EAAT,QACAW,EAAA,KAASV,EAAT,QACAU,EAAA,KAAST,GAEL,CAAC,GACLS,EAAA,KAAAR,EAAA,QACAQ,EAAA,KAAAP,EAA8C,IA4B9C,KAAQ,0BAA4B,IAAM,CACxC,GAAG,CAACQ,EAAA,KAAKR,IAA+CQ,EAAA,KAAKT,GAAsC,CACjG,IAAMU,EACJD,EAAA,KAAKT,GAAqC,mBAE5C,QAAWW,KAAaD,EACtBD,EAAA,KAAKZ,GAAQc,CAAS,EAAE,aAAa,UAClCC,GAA0B,CACzBH,EAAA,KAAKV,IAAsBY,CAAS,EAAIC,EACxCH,EAAA,KAAKX,GAAmB,cAAca,EAAWC,CAAW,EACxDH,EAAA,KAAKR,IACP,KAAK,iBAAiB,KAAK,KAAK,sBAAsB,CAE1D,CACF,EAGF,KAAK,eAAe,SAASS,CAAkB,EAC/CG,EAAA,KAAKb,EAAuC,MAC5Ca,EAAA,KAAKZ,EAA8C,GACrD,CACF,EAhCEY,EAAA,KAAKhB,EAAUM,GACfU,EAAA,KAAKb,EACHI,GACFS,EAAA,KAAKf,EAAqBO,GAC1B,KAAK,iBAAmBE,EAAe,mDACrCE,EAAA,KAAKT,GAAqC,SAASS,EAAA,KAAKZ,EAAO,CACjE,EACA,KAAK,eAAiBS,EACtB,KAAK,iBAAiB,sBAAsB,KAAK,yBAAyB,CAC5E,CAxBA,IAAI,wBAAyB,CAC3B,OAAOQ,EAAAC,EAAA,GACFN,EAAA,KAAKV,KADH,CAEL,gBAAiBU,EAAA,KAAKX,GAAmB,SACzC,iBAAkBW,EAAA,KAAKX,GAAmB,IAC5C,EACF,CA0CF,EAxDWD,EAAA,YACAC,EAAA,YACAC,GAAA,YAGTC,EAAA,YACAC,EAAA,YCvBF,IAAAe,GAAyC,gBAAzC,IAAAC,EAUaC,GAAN,KAAiG,CAQtG,YAAYC,EAAyC,CANrDC,EAAA,KAAAH,EAAoC,CAAC,GAOnC,QAAQI,EAAI,EAAGA,EAAIF,EAAW,OAAQE,IAClBF,EAAWE,CAAC,EACpB,eAAe,UAAUC,GAAQ,CACtCA,EAAMC,EAAA,KAAKN,GAAUI,CAAC,EAAIC,EACxB,OAAOC,EAAA,KAAKN,GAAUI,CAAC,EACzB,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,KAAK,QAAQ,CAClE,CAAC,EAEH,KAAK,gBAAkB,IAAI,mBAAgB,KAAK,QAAQ,CAC1D,CAdA,IAAI,UAAW,CACb,MAAO,CAAC,GAAG,KAAK,iBAAiB,CAAC,CACpC,CAcA,CAAU,kBAAmB,CAC3B,QAAUG,KAAOD,EAAA,KAAKN,GAAW,MAAMQ,EAAWF,EAAA,KAAKN,GAAUO,CAAG,CAAC,CACvE,CACF,EArBEP,EAAA,YCZF,IAAAS,GAAAC,GAAAC,GAAAC,GAYaC,GAAN,KAAyD,CAM9D,YACEC,EACAC,EACAC,EACAC,EACA,CAVFC,EAAA,KAAAT,GAAA,QACAS,EAAA,KAAAR,GAAA,QACAQ,EAAA,KAAAP,GAAA,QACAO,EAAA,KAAAN,GAAA,QAQEO,EAAA,KAAKV,GAAwBK,GAC7BK,EAAA,KAAKT,GAAkBK,GACvBI,EAAA,KAAKR,GAAkBK,GACvBG,EAAA,KAAKP,GAAkBK,EACzB,CAEA,qCAAoEG,EAA8C,CAChH,OAAO,IAAIC,GACTD,EACAE,EAAA,KAAKb,IAAsB,0CAA0C,EACrEa,EAAA,KAAKZ,IAAgB,wBAAwB,EAC7CY,EAAA,KAAKX,IAAgB,0BAAuC,EAC5DW,EAAA,KAAKV,GACP,CACF,CACA,0DAA0DW,EAA0E,CAClI,OAAO,IAAIC,GAA0CD,CAAU,CACjE,CAEF,EA9BEd,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YChBF,IAAAa,EAAAC,EAIaC,GAAN,KAAyD,CAI9D,YAAYC,EAAmC,CAH/CC,EAAA,KAAAJ,EAAA,QACAI,EAAA,KAAAH,EAAiB,IAAI,KAGnBI,EAAA,KAAKL,EAAmBG,EAC1B,CAEA,IAAI,UAAW,CACb,OAAOG,EAAA,KAAKN,GAAiB,QAC/B,CAEA,IAAI,MAAO,CACT,OAAOM,EAAA,KAAKL,GAAe,KAAO,CACpC,CAEA,cAAcM,EAAmBC,EAAmB,CAClD,GAAM,CAAE,SAAAC,EAAU,KAAAC,CAAK,EAAIF,EAC3BF,EAAA,KAAKN,GAAiB,cAAcO,EAAWE,CAAQ,EACnDC,EAAMJ,EAAA,KAAKL,GAAe,IAAIM,CAAS,EACtCD,EAAA,KAAKL,GAAe,OAAOM,CAAS,CAC3C,CAEF,EAtBEP,EAAA,YACAC,EAAA,YCNF,IAAAU,GAA8C,gBAA9C,IAAAC,EAAAC,GAMaC,GAAN,KAA8F,CASnG,YAAYC,EAAmC,CAP/CC,EAAA,KAAAJ,EAAA,QACAI,EAAA,KAAAH,GAAqD,CAAC,GAOpDI,EAAA,KAAKL,EAAmBG,GACxB,KAAK,gBAAkB,IAAI,mBAA0BG,EAAA,KAAKN,GAAiB,QAAQ,CACrF,CAPA,IAAI,UAAW,CACb,OAAOM,EAAA,KAAKN,GAAiB,QAC/B,CAOA,aAAaO,EAAgD,CAC3D,IAAMC,EAAc,OAAOF,EAAA,KAAKL,IAAsB,MAAM,EAC5DK,EAAA,KAAKL,IAAsB,KAAKM,CAAmB,EACnDA,EAAoB,uBAAuB,UAAWE,GAA8B,CAClFH,EAAA,KAAKN,GAAiB,cAAcQ,EAAaC,CAAc,EAC/D,KAAK,gBAAgB,KAAKH,EAAA,KAAKN,GAAiB,QAAQ,CAC1D,CAAC,CACH,CACF,EApBEA,EAAA,YACAC,GAAA,YCPK,IAAKS,OACVA,IAAA,gBAAkB,EAAiB,GAAnC,kBACAA,IAAA,kCACAA,IAAA,sCACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,4CACAA,IAAA,0CAPUA,OAAA,ICFZ,IAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAGaC,GAAN,KAAuE,CAAvE,cACLC,EAAA,KAASP,GAAoB,IAAI,KACjCO,EAAA,KAASN,GAAwB,IAAI,KACrCM,EAAA,KAASL,GAA0B,IAAI,KACvCK,EAAA,KAASJ,GAA0B,IAAI,KACvCI,EAAA,KAASH,GAAqC,IAAI,KAClDG,EAAA,KAASF,GAAwB,IAAI,KAErC,IAAI,mBAAoB,CACtB,OAAGG,EAAA,KAAKR,IAAkB,KAAO,EAAUS,EAAkB,gBACrDD,EAAA,KAAKP,IAAsB,KAAO,EAAUQ,EAAkB,YAC9DD,EAAA,KAAKN,IAAwB,KAAO,EAAUO,EAAkB,cAChED,EAAA,KAAKL,IAAwB,KAAO,EAAUM,EAAkB,cAChED,EAAA,KAAKJ,IAAmC,KAAO,EAAUK,EAAkB,0BAC3ED,EAAA,KAAKH,IAAsB,KAAO,EAAUI,EAAkB,iBAC/DA,EAAkB,eAC3B,CAEA,cAAcC,EAAuBC,EAA4C,CAC/E,KAAK,YAAYD,EAAeC,EAAmBF,EAAkB,gBAAiBD,EAAA,KAAKR,GAAiB,EAC5G,KAAK,YAAYU,EAAeC,EAAmBF,EAAkB,YAAaD,EAAA,KAAKP,GAAqB,EAC5G,KAAK,YAAYS,EAAeC,EAAmBF,EAAkB,cAAeD,EAAA,KAAKN,GAAuB,EAChH,KAAK,YAAYQ,EAAeC,EAAmBF,EAAkB,cAAeD,EAAA,KAAKL,GAAuB,EAChH,KAAK,YAAYO,EAAeC,EAAmBF,EAAkB,0BAA2BD,EAAA,KAAKJ,GAAkC,EACvI,KAAK,YAAYM,EAAeC,EAAmBF,EAAkB,iBAAkBD,EAAA,KAAKH,GAAqB,CACnH,CAEQ,YAAYK,EAAwBE,EAAoCC,EAAsCC,EAAmB,CACpIF,IAAmBC,EAAkBC,EAAI,IAAIJ,CAAa,EACxDI,EAAI,OAAOJ,CAAa,CAC/B,CACF,EA9BWV,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YCTX,IAAAU,GAA8C,gBAA9C,IAAAC,EAAAC,GAMaC,GAAN,KAAyF,CAS9F,YAAYC,EAAmC,CAP/CC,EAAA,KAAAJ,EAAA,QACAI,EAAA,KAAAH,GAAqD,CAAC,GAOpDI,EAAA,KAAKL,EAAmBG,GACxB,KAAK,gBAAkB,IAAI,mBAA0BG,EAAA,KAAKN,GAAiB,QAAQ,CACrF,CAPA,IAAI,UAAW,CACb,OAAOM,EAAA,KAAKN,GAAiB,QAC/B,CAOA,aAAaO,EAAgD,CAC3D,IAAMC,EAAc,OAAOF,EAAA,KAAKL,IAAsB,MAAM,EAC5DK,EAAA,KAAKL,IAAsB,KAAKM,CAAmB,EACnDA,EAAoB,0BAA0B,UAAWE,GAA8B,CACrFH,EAAA,KAAKN,GAAiB,cAAcQ,EAAaC,CAAc,EAC/D,KAAK,gBAAgB,KAAKH,EAAA,KAAKN,GAAiB,QAAQ,CAC1D,CAAC,CACH,CACF,EApBEA,EAAA,YACAC,GAAA,YCTF,IAAAS,GAAAC,GAAAC,GAAAC,GAEaC,GAAN,KAA0B,CAA1B,cACLC,EAAA,KAASL,GAAgB,IAAI,KAC7BK,EAAA,KAASJ,GAAiB,IAAI,KAC9BI,EAAA,KAASH,GAAiB,IAAI,KAC9BG,EAAA,KAASF,GAA4B,IAAI,KAEzC,IAAI,UAAW,CACb,OAAIG,EAAA,KAAKN,IAAc,KAAO,IAC1BM,EAAA,KAAKL,IAAe,KAAO,IAC3BK,EAAA,KAAKJ,IAAe,KAAO,IAC3BI,EAAA,KAAKH,IAA0B,KAAO,KAG5C,CAEA,cAAcI,EAAoBC,EAAqB,CACrD,KAAK,YAAYD,EAAWC,IAA0BF,EAAA,KAAKN,GAAa,EACxE,KAAK,YAAYO,EAAWC,IAA4BF,EAAA,KAAKL,GAAc,EAC3E,KAAK,YAAYM,EAAWC,IAA4BF,EAAA,KAAKJ,GAAc,EAC3E,KAAK,YACHK,EACAC,IAEAF,EAAA,KAAKH,GACP,CACF,CAEQ,YAAYI,EAAoBE,EAA2BC,EAA6BC,EAAmB,CAC7GF,IAAmBC,EACvBC,EAAI,IAAIJ,CAAS,EACZI,EAAI,OAAOJ,CAAS,CAC3B,CACF,EA/BWP,GAAA,YACAC,GAAA,YACAC,GAAA,YACAC,GAAA,YCKJ,IAAMS,GAAN,KAAmD,CACxD,yBAA6C,CAC3C,OAAO,IAAIC,GAAsB,KAAK,sBAAsB,CAAC,CAC/D,CACA,gCAA2D,CACzD,OAAO,IAAIC,EACb,CACA,8CAAmF,CACjF,OAAO,IAAIC,GAAqC,KAAK,sBAAsB,CAAC,CAC9E,CACA,yDAA8F,CAC5F,MAAM,IAAIC,GAA0C,KAAK,sBAAsB,CAAC,CAClF,CACA,uBAAyC,CACvC,OAAO,IAAIC,EACb,CACF,ECrBO,IAAMC,GAAN,KAEP,CAIE,YAAYC,EAAsC,CAHlD,KAAS,mBAAqB,IAAI,IAIhC,KAAK,kBAAoBA,CAC3B,CAEA,SACEC,EACgC,CAChC,IAAMC,EAEF,CAAC,EACL,QAAWC,KAAOF,EAChBC,EAAgBC,CAAmC,EAAIF,EAAOE,CAAG,EAAE,MAGrE,IAAMH,EAAoB,KAAK,kBACzBI,EAAqB,KAAK,mBAEhC,OAAO,IAAI,MAAMF,EAAiB,CAChC,IAAIG,EAAQC,EAAM,CAChB,GAAIA,IAAS,kBAAmB,OAAON,EAAkB,SACpD,GAAIM,IAAS,mBAAoB,OAAON,EAAkB,KAC1D,CACH,IAAMO,EAAWD,EAAK,SAAS,EAC/B,GAAI,EAAEA,KAAQL,IAAWM,IAAa,cAAe,OAAOF,EAAOE,CAAQ,EAE3EH,EAAmB,IAAIG,CAAQ,EAC/B,IAAMC,GAAQH,EAAOE,CAAQ,EAC7B,OAAAP,EAAkB,cAAcO,EAAUC,EAAK,EAExCH,EAAOE,CAAQ,CACxB,CACF,CACF,CAAC,CACH,CACF,EC9CA,IAAAE,GAKaC,GAAN,KAA+D,CAGpE,YAAYC,EAAiC,CAF7CC,EAAA,KAAAH,GAAA,QAGEI,EAAA,KAAKJ,GAAkBE,EACzB,CAEA,2CAAiF,CAC/E,OAAO,IAAIG,GAAwCC,EAAA,KAAKN,IAAgB,wBAAwB,CAAC,CACnG,CACF,EATEA,GAAA,YCNF,IAAAO,EAAAC,EAEaC,GAAN,KAA6D,CAA7D,cACLC,EAAA,KAAAH,EAA0B,IAC1BG,EAAA,KAAAF,EAAA,QAEA,QAAQG,EAAgB,CAClBC,EAAA,KAAKL,GAAgBI,EAAG,EACvBE,EAAA,KAAKL,EAAMG,EAClB,CAEA,cAAe,CACRC,EAAA,KAAKL,KACRM,EAAA,KAAKN,EAAiB,IAClBK,EAAA,KAAKJ,IAAKI,EAAA,KAAKJ,GAAL,WAElB,CACF,EAdED,EAAA,YACAC,EAAA,YCJF,IAAAM,EAAAC,EAEaC,GAAN,KAAmE,CAAnE,cACLC,EAAA,KAAAH,EAAA,QACAG,EAAA,KAAAF,EAAA,QAEA,QAAQG,EAAyB,CAC3BC,EAAA,KAAKL,GAAQI,EAAGC,EAAA,KAAKL,EAAM,EAC1BM,EAAA,KAAKL,EAAMG,EAClB,CAEA,SAASG,EAAW,CACbF,EAAA,KAAKL,KACRM,EAAA,KAAKN,EAASO,GACVF,EAAA,KAAKJ,IAAKI,EAAA,KAAKJ,GAAL,UAASI,EAAA,KAAKL,IAEhC,CACF,EAdEA,EAAA,YACAC,EAAA,YCEK,IAAMO,GAAN,KAEP,CACE,2BAAiD,CAC/C,OAAO,IAAIC,EACb,CACA,2BAAuD,CACrD,OAAO,IAAIC,EACb,CACF,ECdA,IAAAC,GAAwD,gBADxD,IAAAC,EAKaC,GAAN,cACG,kBAEV,CAGE,YACEC,EACAC,EACA,CACA,MAAMD,CAAY,EANpBE,EAAA,KAASJ,EAAT,QAOEK,EAAA,KAAKL,EAAqCG,EAC5C,CAEA,UACEG,EACAC,EACAC,EACc,CACd,IAAIC,EACJ,OAAGH,EACE,OAAOA,GAAmB,WAAYG,EAAe,MAAM,UAAUH,EAAgBC,EAAOC,CAAQ,EAClGC,EAAe,MAAM,UAAUH,CAAc,EAC7CG,EAAe,MAAM,UAAU,EACtCC,EAAA,KAAKV,GAAmC,aAAa,EAC9CS,CACT,CAEA,sBAAsBE,EAAsB,CAC1CD,EAAA,KAAKV,GAAmC,QAAQW,CAAE,CACpD,CACF,EA3BWX,EAAA,YCTX,IAAAY,GAKaC,GAAN,KAAmD,CAGxD,YAAYC,EAAiC,CAF7CC,EAAA,KAAAH,GAAA,QAGEI,EAAA,KAAKJ,GAAkBE,EACzB,CAEA,mDAAsDG,EAAkE,CACtH,OAAO,IAAIC,GAAiDD,EAAcE,EAAA,KAAKP,IAAgB,0BAA0B,CAAC,CAC5H,CACF,EATEA,GAAA,YCNF,IAAAQ,GAAqE,gBAArE,IAAAC,GAAAC,GAQaC,GAAN,KAEP,CAKE,YACEC,EACAC,EACA,CANFC,EAAA,KAASL,GAAT,QACAK,EAAA,KAAAJ,GAAA,QAMEK,EAAA,KAAKN,GAAcI,GACnB,KAAK,OAAS,IAAI,iBAAiB,CAAC,EACpCG,EAAA,KAAKP,IAAY,iBAAiB,UAC/BQ,GAAoD,CAtB3D,IAAAC,GAuBQA,EAAAF,EAAA,KAAKN,MAAL,MAAAQ,EAA6B,cAC7B,GAAI,CACF,IAAMC,EAAsBP,EAAUK,CAAe,EACrDF,EAAA,KAAKL,MAAyB,SAAKS,CAAmB,EACrD,UAAU,CACT,KAAMC,GAAQ,KAAK,OAAO,KAAKA,CAAI,EACnC,MAAOC,GAAK,CACVC,EAAkBD,CAAC,EACnB,KAAK,OAAO,MAAMA,CAAC,CACrB,CACF,CAAC,EACH,OAASA,EAAG,CACVC,EAAkBD,CAAC,EACnB,KAAK,OAAO,MAAMA,CAAC,CACrB,CACF,CACF,CACF,CACF,EA7BWZ,GAAA,YACTC,GAAA,YCbF,IAAAa,GAA4C,gBAA5C,IAAAC,GAQaC,GAAN,KAEP,CAIE,YACEC,EACAC,EACA,CALFC,EAAA,KAASJ,GAAT,QAMEK,EAAA,KAAKL,GAAcG,GACnB,KAAK,OAAS,IAAI,iBAAiB,CAAC,EACpCG,EAAA,KAAKN,IAAY,iBAAiB,UAC/BO,GAAoD,CACnD,GAAI,CACF,IAAMC,EAAYN,EAAUK,CAAe,EAC3C,KAAK,OAAO,KAAKC,CAAS,CAC5B,OAASC,EAAG,CACVC,EAAkBD,CAAC,EACnB,KAAK,OAAO,MAAMA,CAAC,CACrB,CACF,CACF,CACF,CACF,EApBWT,GAAA,YCZX,IAAAW,EAQaC,GAAN,KAAmD,CAGxD,YAAYC,EAAuC,CAFnDC,EAAA,KAASH,EAAT,QAGEI,EAAA,KAAKJ,EAAqBE,EAC5B,CAEA,kCAAoEG,EAAyCC,EAAwC,CACnJ,IAAMC,EAAuBC,EAAA,KAAKR,GAAmB,qCAAqCM,CAAM,EAChG,OAAO,IAAIG,GAAYJ,EAAeE,CAAoB,CAC5D,CACA,mCAAqEG,EAA2CJ,EAAyC,CACvJ,IAAMC,EAAuBC,EAAA,KAAKR,GAAmB,qCAAqCM,CAAM,EAChG,OAAO,IAAIK,GAAaD,EAAgBH,CAAoB,CAC9D,CAEF,EAfWP,EAAA,YCAJ,IAAMY,EAAN,KAA4C,CAIjD,IAAI,cAAe,CACjB,OAAO,KAAK,MAAM,YACpB,CAEA,IAAI,OAAQ,CACV,OAAO,KAAK,MAAM,KACpB,CAEA,IAAI,KAAKC,EAAe,CACtB,KAAK,MAAM,KAAOA,CACpB,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,IACpB,CAEA,YACEC,EACAC,EACA,CACA,KAAK,MAAQD,EACb,KAAK,QAAUC,EACf,KAAK,QAAQ,OAAO,UAAU,CAC5B,KAAOC,GAA4C,KAAK,SAASA,CAAI,EACrE,MAAO,IAAM,CACX,KAAK,SAAS,CACZ,MAAO,GACP,WACA,SAAU,CACR,CACE,aACA,wEACF,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAEA,SAASC,EAAsC,CAC7C,KAAK,MAAM,SAASA,CAAK,CAC3B,CAEA,SAASC,EAAgD,CACvD,KAAK,MAAM,SAASA,CAAK,CAC3B,CAEA,OAAQ,CACN,KAAK,MAAM,MAAM,CACnB,CACF,ECzDO,IAAMC,GAAN,cACGC,CAEV,CACE,IAAI,cAAe,CACjB,OAAO,KAAK,UAAU,YACxB,CAEA,IAAI,gBAAiB,CACnB,OAAO,KAAK,UAAU,cACxB,CAEA,IAAI,kBAAkBC,EAA4B,CAChD,KAAK,UAAU,kBAAoBA,CACrC,CAEA,IAAI,mBAAoB,CACtB,OAAO,KAAK,UAAU,iBACxB,CAEA,IAAY,WAAY,CACtB,OAAO,KAAK,KACd,CAEA,YAAYC,EAAkBC,EAAwC,CACpE,MAAMD,EAAOC,CAAO,CACtB,CAEA,SAASC,EAA6B,CACpC,MAAM,SAASA,CAAK,CACtB,CAEA,SAASC,EAAmC,CAC1C,MAAM,SAASA,CAAK,CACtB,CACF,EChCO,IAAMC,EAAN,KAA4C,CAIjD,IAAI,cAAe,CACjB,OAAO,KAAK,MAAM,YACpB,CAEA,IAAI,OAAQ,CACV,OAAO,KAAK,MAAM,KACpB,CAEA,IAAI,KAAKC,EAAe,CACtB,KAAK,MAAM,KAAOA,CACpB,CAEA,IAAI,MAAO,CACT,OAAO,KAAK,MAAM,IACpB,CAEA,YAAYC,EAAcC,EAA6D,CACrF,KAAK,MAAQD,EACb,KAAK,QAAUC,EACf,KAAK,QAAQ,OAAO,UAAU,CAC5B,KAAOC,GAAoD,CACtDA,GAAM,KAAK,SAASA,CAAI,CAC7B,EACA,MAAO,IAAM,CACX,KAAK,SAAS,CACZ,MAAO,GACP,WACA,SAAU,CACR,CACE,aACA,wEACF,CACF,CACF,CAAC,CACH,CACF,CAAC,CACH,CAEA,SAASC,EAAsC,CAC7C,KAAK,MAAM,SAASA,CAAK,CAC3B,CAEA,SAASC,EAAgD,CACvD,KAAK,MAAM,SAASA,CAAK,CAC3B,CAEA,OAAQ,CACN,KAAK,MAAM,MAAM,CACnB,CACF,ECxDO,IAAMC,GAAN,cACGC,CAEV,CACE,IAAI,cAAe,CACjB,OAAO,KAAK,UAAU,YACxB,CAEA,IAAI,gBAAiB,CACnB,OAAO,KAAK,UAAU,cACxB,CAEA,IAAI,kBAAkBC,EAA4B,CAChD,KAAK,UAAU,kBAAoBA,CACrC,CAEA,IAAI,mBAAoB,CACtB,OAAO,KAAK,UAAU,iBACxB,CAEA,IAAY,WAAY,CACtB,OAAO,KAAK,KACd,CAEA,YAAYC,EAAkBC,EAA6D,CACzF,MAAMD,EAAOC,CAAO,CACtB,CAEA,SAASC,EAA6B,CACpC,MAAM,SAASA,CAAK,CACtB,CAEA,SAASC,EAAmC,CAC1C,MAAM,SAASA,CAAK,CACtB,CACF,ECzCA,IAAAC,EAuBaC,GAAN,KAAmE,CAGxE,YAAYC,EAAiC,CAF7CC,EAAA,KAASH,EAAT,QAGEI,EAAA,KAAKJ,EAAkBE,EACzB,CACA,4CAA2EG,EAAkBC,EAAiDC,EAAsC,CAClL,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,kCAAkCM,EAAgBC,CAAM,EAC7F,OAAO,IAAIG,EAAqBL,EAAWG,CAAiE,CAC9G,CACA,6CAA4EH,EAAkBC,EAAkDC,EAAsC,CACpL,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,mCAAmCM,EAAgBC,CAAM,EAC9F,OAAO,IAAIG,EAAqBL,EAAWG,CAAkE,CAC/G,CACA,4CAA2EH,EAAkBM,EAAiDJ,EAAsC,CAClL,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,kCAAkCW,EAAgBJ,CAAM,EAC7F,OAAO,IAAIK,EAAqBP,EAAWG,CAAyE,CACtH,CACA,6CAA4EH,EAAkBM,EAAkDJ,EAAsC,CACpL,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,mCAAmCW,EAAgBJ,CAAM,EAC9F,OAAO,IAAIK,EAAqBP,EAAWG,CAA0E,CACvH,CACA,gDAA+EH,EAAsBC,EAAgDC,EAA0C,CAC7L,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,kCAAkCM,EAAgBC,CAAM,EAC7F,OAAO,IAAIM,GAAyBR,EAAWG,CAAO,CACxD,CACA,iDAAgFH,EAAsBC,EAAiDC,EAA0C,CAC/L,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,mCAAmCM,EAAgBC,CAAM,EAC9F,OAAO,IAAIM,GAAyBR,EAAWG,CAAO,CACxD,CACA,gDAA+EH,EAAsBM,EAAgDJ,EAA0C,CAC7L,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,kCAAkCW,EAAgBJ,CAAM,EAC7F,OAAO,IAAIO,GAAyBT,EAAWG,CAAyE,CAC1H,CACA,iDAAgFH,EAAsBM,EAAiDJ,EAA0C,CAC/L,IAAMC,EAAUC,EAAA,KAAKT,GAAgB,mCAAmCW,EAAgBJ,CAAM,EAC9F,OAAO,IAAIO,GAAyBT,EAAWG,CAA0E,CAC3H,CACF,EArCWR,EAAA,YrCaX,UAAQ,SAASe,EAAoC,EACrD,UAAQ,SAASC,EAAkB,EACnC,UAAQ,SAASC,EAAkB,EACnC,UAAQ,SAASC,GAAoB,CAAC,gBAAuB,CAAC,EAC9D,UAAQ,SAASC,GAA0B,CAAC,gBAAuB,CAAC,EACpE,UAAQ,SAASC,GAAsB,CAAC,6BAAoC,CAAC,EAC7E,UAAQ,SAASC,GAAuB,CAAC,uBAA+B,iBAAyB,iBAAyB,gBAAuB,CAAC,EAClJ,UAAQ,SAASC,GAAoB,CAAC,mBAA0B,CAAC,EACjE,UAAQ,SAASC,GAA4B,CAAC,gBAAuB,CAAC,EACtE,UAAQ,SAASC,GAAwB,CAAC,mBAA2B,wBAA+B,CAAC,EAE9F,SAASC,IAAe,CAC7B,IAAMC,EAAY,IAAI,aAEtB,OAAAA,EACG,KAAuC,6BAAoC,EAC3E,GAAGX,EAAoC,EACvC,iBAAiB,EACpBW,EACG,KAAuB,kBAAyB,EAChD,GAAGN,EAAoB,EACvB,iBAAiB,EACpBM,EACG,KAAqB,gBAAuB,EAC5C,GAAGV,EAAkB,EACrB,iBAAiB,EACpBU,EACG,KAAqB,gBAAuB,EAC5C,GAAGT,EAAkB,EACrB,iBAAiB,EACpBS,EACG,KAAqB,gBAAuB,EAC5C,GAAGR,EAAkB,EACrB,iBAAiB,EACpBQ,EACG,KAA2B,sBAA6B,EACxD,GAAGP,EAAwB,EAC3B,iBAAiB,EACpBO,EACG,KAAwB,mBAA0B,EAClD,GAAGL,EAAqB,EACxB,iBAAiB,EACpBK,EACG,KAAqB,gBAAuB,EAC5C,GAAGJ,EAAkB,EACrB,iBAAiB,EACpBI,EACG,KAA6B,wBAA+B,EAC5D,GAAGH,EAA0B,EAC7B,iBAAiB,EACpBG,EACG,KAAyB,oBAA2B,EACpD,GAAGF,EAAsB,EACzB,iBAAiB,EACbE,CACT,CsCrFA,IAAMC,GAAYC,GAAa,EAEzBC,GAAqBF,GAAU,wBAAmD,EAElFG,GAAiBD,GAAmB,cAAc,CACtD,OAAS,UACT,OAAS,CACP,aAAc,UACd,eAAgB,CAACE,GAAS,sBAAsB,EAAGC,GAAM,2BAA2B,CAAC,CACvF,EACA,OAAS,CACP,aAAc,UACd,mBAAoB,CAAC,CAAE,OAAAC,CAAO,IAAM,CAClC,GAAG,EAAAA,EAAO,SAAW,GACrB,OAAOA,EAAO,MAAM,YAAY,CAClC,CACF,EACA,OAAS,CACP,oBAAqB,UACrB,sBAAuB,UACvB,cAAe,EACjB,CACF,CAAC,EAEAH,GAAe,OAAiB,SAAS,sBAAsB,EAC/DA,GAAe,OAAiB,SAAS,kBAAkB,EAE5D,QAAUI,KAAOJ,GACf,QAAQ,IAAII,CAAG,EACf,QAAQ,IAAIJ,GAAeI,CAAG,EAAE,KAAK","names":["config","email","errorMessage","successMessage","regex","config","value","result","required","errorMessage","successMessage","value","config","result","import_reflect_metadata","import_inversify","import_inversify_vanillajs_helpers","import_rxjs","logErrorInDevMode","e","_validators","_pendingValidatorMessage","_validatorSubscriptions","AsyncSingleInputValidatorSuite","validators","pendingValidatorMessage","__privateAdd","__privateSet","value","result","__privateGet","subscriber","observableResult","validatorId","validator","promise","subscription","e","outerSubscriber","next","isValid","messageTxt","logErrorInDevMode","key","_syncValidatorSuite","_asyncValidatorSuite","HybridSingleInputValidatorSuite","syncValidatorSuite","asyncValidatorSuite","__privateAdd","__privateSet","value","result","__privateGet","asyncResult","_validators","SyncSingleInputValidatorSuite","validators","__privateAdd","__privateSet","value","result","validator","__privateGet","isValid","messageTxt","e","logErrorInDevMode","SingleInputValidatorSuiteFactoryImpl","syncValidators","asyncValidators","pendingAsyncValidatorMessage","syncValidatorSuite","SyncSingleInputValidatorSuite","asyncValidatorSuite","AsyncSingleInputValidatorSuite","HybridSingleInputValidatorSuite","import_rxjs","_useSecondaryField","_omit","_omitByDefault","DualFieldImpl","primaryField","secondaryField","omitByDefault","__privateAdd","__privateSet","__privateGet","_a","state","useSecondaryField","changeDetected","omit","valueObj","stateObj","import_rxjs","copyObject","object","_validatorSuite","_defaultValue","_omitByDefault","_state","_validatorSuiteSubscription","FieldImpl","validatorSuite","defaultValue","omitByDefault","__privateAdd","__privateSet","initialState","__privateGet","__spreadProps","__spreadValues","copyObject","omit","value","validityResult","state","observable","_a","result","message","_singleInputValidatorSuiteFactory","BaseFieldFactoryImpl","singleInputValidatorSuiteFactory","__privateAdd","__privateSet","defaultValue","omitByDefault","syncValidators","asyncValidators","pendingAsyncValidatorMessage","validatorSuite","__privateGet","FieldImpl","primaryDefaultValue","secondaryDefaultValue","primaryField","secondaryField","DualFieldImpl","import_rxjs","_finalizerManager","_multiFieldValidatorMessagesAggregator","_omitByDefault","_omit","NestedFormImpl","userFacingFields","finalizerManager","multiFieldValidatorMessagesAggregator","omitByDefault","__privateAdd","__privateSet","__privateGet","_a","copyObject","__spreadProps","__spreadValues","omit","fieldName","_template","FieldTemplateParserImpl","template","__privateAdd","__privateSet","__privateGet","NestedFormImpl","controlFnFlags","fieldTemplate","dualFieldTemplate","_baseFieldFactory","_controlledFieldFactory","_fields","_syncStateControlledFields","_syncValueControlledFields","_asyncStateControlledFields","_asyncValueControlledFields","_syncStateControlledDualFields","_syncValueControlledDualFields","_asyncStateControlledDualFields","_asyncValueControlledDualFields","FormElementsParserImpl","baseFieldFactory","controlledFieldFactory","__privateAdd","__privateSet","fields","fieldName","parsed","FieldTemplateParserImpl","__privateGet","parsedTemplate","controlFn","_fields","_fieldStateReducer","_aggregatedFieldState","_aggregatedStateChangesProxyProducer","_accessedFieldsSubscriptionProcessCompleted","MultiFieldAggregatorImpl","fields","aggregatedStateChangesProxyProducer","fieldStateReducer","accessedFields","subjectFactory","__privateAdd","__privateGet","accessedFieldNames","fieldName","stateChange","__privateSet","__spreadProps","__spreadValues","import_rxjs","_messages","MultiInputValidatorMessagesAggregatorImpl","validators","__privateAdd","i","next","__privateGet","key","copyObject","_proxyProducerFactory","_reducerFactory","_emitterFactory","_subjectFactory","AggregatorFactoryImpl","proxyProducerFactory","reducerFactory","emitterFactory","subjectFactory","__privateAdd","__privateSet","fields","MultiFieldAggregatorImpl","__privateGet","validators","MultiInputValidatorMessagesAggregatorImpl","_validityReducer","_omittedFields","FieldStateReducerImpl","validityReducer","__privateAdd","__privateSet","__privateGet","fieldName","state","validity","omit","import_rxjs","_validityReducer","_multiInputValidators","FinalizerFacingMultiInputValidatorReducer","validityReducer","__privateAdd","__privateSet","__privateGet","multiFieldValidator","validatorId","validityChange","FinalizerValidity","_errantFinalizers","_fieldErrorFinalizers","_fieldInvalidFinalizers","_fieldPendingFinalizers","_fieldValidUnfinalizableFinalizers","_finalizingFinalizers","FinalizerValidityReducerImpl","__privateAdd","__privateGet","FinalizerValidity","finalizerName","finalizerValidity","actualValidity","expectedValidity","set","import_rxjs","_validityReducer","_multiInputValidators","UserFacingMultiInputValidatorReducer","validityReducer","__privateAdd","__privateSet","__privateGet","multiFieldValidator","validatorId","validityChange","_errantFields","_invalidFields","_pendingFields","_validUnfinalizableFields","ValidityReducerImpl","__privateAdd","__privateGet","elementId","validity","actualValidity","expectedValidity","set","ReducerFactoryImpl","FieldStateReducerImpl","FinalizerValidityReducerImpl","UserFacingMultiInputValidatorReducer","FinalizerFacingMultiInputValidatorReducer","ValidityReducerImpl","AggregatedStateChangesProxyProducerImpl","fieldStateReducer","fields","aggregatedState","key","accessedFieldNames","target","prop","propName","state","_reducerFactory","ProxyProducerFactoryImpl","reducerFactory","__privateAdd","__privateSet","AggregatedStateChangesProxyProducerImpl","__privateGet","_eventOccurred","_cb","OneTimeEventEmitterImpl","__privateAdd","cb","__privateGet","__privateSet","_value","_cb","OneTimeValueEmitterImpl","__privateAdd","cb","__privateGet","__privateSet","value","EmitterFactoryImpl","OneTimeEventEmitterImpl","OneTimeValueEmitterImpl","import_rxjs","_onInitialSubscriptionEventEmitter","OnInitialSubscriptionHandlingBehaviorSubjectImpl","initialValue","onInitialSubscriptionEventEmitter","__privateAdd","__privateSet","observerOrNext","error","complete","subscription","__privateGet","cb","_emitterFactory","SubjectFactoryImpl","emitterFactory","__privateAdd","__privateSet","initialValue","OnInitialSubscriptionHandlingBehaviorSubjectImpl","__privateGet","import_rxjs","_aggregator","_adapterFnSubscription","AsyncAdapter","adapterFn","aggregator","__privateAdd","__privateSet","__privateGet","aggregateChange","_a","promiseOrObservable","next","e","logErrorInDevMode","import_rxjs","_aggregator","SyncAdapter","adapterFn","aggregator","__privateAdd","__privateSet","__privateGet","aggregateChange","nextValue","e","logErrorInDevMode","_aggregatorFactory","AdapterFactoryImpl","aggregatorFactory","__privateAdd","__privateSet","syncAdapterFn","fields","multiFieldAggregator","__privateGet","SyncAdapter","asyncAdapterFn","AsyncAdapter","StateControlledField","omit","field","adapter","next","value","state","StateControlledDualField","StateControlledField","useSecondaryField","field","adapter","value","state","ValueControlledField","omit","field","adapter","next","value","state","ValueControlledDualField","ValueControlledField","useSecondaryField","field","adapter","value","state","_adapterFactory","ControlledFieldFactoryImpl","adapterFactory","__privateAdd","__privateSet","baseField","stateControlFn","fields","adapter","__privateGet","StateControlledField","valueControlFn","ValueControlledField","StateControlledDualField","ValueControlledDualField","SingleInputValidatorSuiteFactoryImpl","ReducerFactoryImpl","EmitterFactoryImpl","SubjectFactoryImpl","ProxyProducerFactoryImpl","BaseFieldFactoryImpl","AggregatorFactoryImpl","AdapterFactoryImpl","ControlledFieldFactoryImpl","FormElementsParserImpl","getContainer","container","container","getContainer","formElementsParser","formElementMap","required","email","fieldB","key"]}