{"version":3,"sources":["../src/index.ts","../src/model/state/validity.enum.ts","../src/model/state/messages/message-type.enum.ts","../src/config.ts","../src/model/container.ts","../src/model/adapters/adapter-factory-impl.ts","../src/model/adapters/adapter-factory.interface.ts","../src/model/aggregators/aggregator-factory.interface.ts","../src/model/adapters/async-adapter.ts","../src/model/util/log-error-in-dev-mode.ts","../src/model/adapters/sync-adapter.ts","../src/model/emitters/emitter-factory.interface.ts","../src/model/proxies/proxy-producer-factory.interface.ts","../src/model/reducers/reducer-factory.interface.ts","../src/model/subjects/subject-factory.interface.ts","../src/model/aggregators/multi-field-aggregator-impl.ts","../src/model/aggregators/multi-input-validator-messages-aggregator-impl.ts","../src/model/util/copy-object.ts","../src/model/aggregators/aggregator-factory-impl.ts","../src/model/emitters/one-time-event-emitter-impl.ts","../src/model/emitters/one-time-value-emitter-impl.ts","../src/model/emitters/emitter-factory-impl.ts","../src/model/fields/base/base-field-factory.interface.ts","../src/model/validators/single-input/single-input-validator-suite-factory.interface.ts","../src/model/fields/base/dual-field.ts","../src/model/fields/base/abstract-field.ts","../src/model/fields/base/abstract-dual-field.ts","../src/model/fields/base/field.ts","../src/model/fields/base/base-field-factory-impl.ts","../src/model/fields/controlled/controlled-field-factory-impl.ts","../src/model/fields/controlled/state-controlled-dual-field.ts","../src/model/fields/controlled/state-controlled-field.ts","../src/model/fields/controlled/value-controlled-dual-field.ts","../src/model/fields/controlled/value-controlled-field.ts","../src/model/fields/controlled/controlled-field-factory.interface.ts","../src/model/finalizers/finalizer-functions/finalizer-fn-factory-impl.ts","../src/model/finalizers/finalizer-functions/finalizer-fn-factory.interface.ts","../src/model/finalizers/finalizer-validity-translator.interface.ts","../src/model/finalizers/finalizer-validity-translator-impl.ts","../src/model/proxies/aggregated-state-changes-proxy-producer-impl.ts","../src/model/proxies/proxy-producer-factory-impl.ts","../src/model/reducers/field-state/field-state-reducer-impl.ts","../src/model/reducers/multi-input-validator-validity/finalizer-facing-multi-input-validator-reducer.ts","../src/model/reducers/finalizer-validity/finalizer-validity-reducer-impl.ts","../src/model/reducers/multi-input-validator-validity/user-facing-multi-input-validator-reducer.ts","../src/model/reducers/validity/validity-reducer-impl.ts","../src/model/reducers/reducer-factory-impl.ts","../src/model/subjects/on-initial-subscription-handling-behavior-subject-impl.ts","../src/model/subjects/subject-factory-impl.ts","../src/model/validators/single-input/async-single-input-validator-suite.ts","../src/model/validators/single-input/hybrid-single-input-validator-suite.ts","../src/model/validators/single-input/sync-single-input-validator-suite.ts","../src/model/validators/single-input/single-input-validator-suite-factory-impl.ts","../src/model/insertion-order-heap/insertion-order-heap-factory.interface.ts","../src/model/insertion-order-heap/insertion-order-heap-factory-impl.ts","../src/model/insertion-order-heap/insertion-order-heap-impl.ts","../src/model/trackers/tracker-factory.interface.ts","../src/model/trackers/first-nonvalid-form-element-tracker-impl.ts","../src/model/trackers/tracker-factory-impl.ts","../src/model/validators/multi-input/multi-input-validator-factory-impl.ts","../src/model/validators/multi-input/async-multi-input-validator.ts","../src/model/validators/multi-input/multi-input-validator-factory.interface.ts","../src/model/validators/multi-input/sync-multi-input-validator.ts","../src/model/form-elements/multi-input-validated/finalizer-facing-multi-input-validated-form-element.ts","../src/model/form-elements/multi-input-validated/multi-input-validated-form-element-factory.interface.ts","../src/model/form-elements/multi-input-validated/user-facing-multi-input-validated-dual-field.ts","../src/model/form-elements/multi-input-validated/user-facing-multi-input-validated-field.ts","../src/model/form-elements/multi-input-validated/user-facing-multi-input-validated-nested-form.ts","../src/model/forms/abstract-nested-form.ts","../src/model/form-elements/multi-input-validated/multi-input-validated-form-element-factory-impl.ts","../src/model/templates/multi-field-validators/multi-field-validators-template-parser-impl.ts","../src/model/templates/multi-field-validators/multi-field-validators-template-parser.interface.ts","../src/model/fields/auto-transformed/auto-transformed-field-factory.interface.ts","../src/model/finalizers/finalizer-manager-factory-impl.ts","../src/model/finalizers/finalizer-manager-factory.interface.ts","../src/model/finalizers/finalizer-manager-impl.ts","../src/model/finalizers/finalizer-factory-impl.ts","../src/model/finalizers/async-finalizer.ts","../src/model/finalizers/default-finalizer.ts","../src/model/finalizers/finalizer-factory.interface.ts","../src/model/finalizers/sync-finalizer.ts","../src/model/submission/submission-manager-factory-impl.ts","../src/model/submission/submission-manager-factory.interface.ts","../src/model/submission/submission-manager-impl.ts","../src/model/templates/forms/nested-form-template-parser-impl.ts","../src/model/forms/nested-form.ts","../src/model/templates/finalizers/finalizer-template-dictionary-parser.interface.ts","../src/model/templates/form-elements/form-element-template-dictionary-parser.interface.ts","../src/model/templates/forms/nested-form-template-parser.interface.ts","../src/model/templates/forms/root-form-template-parser-impl.ts","../src/model/forms/root-form.ts","../src/model/forms/abstract-root-form.ts","../src/model/templates/forms/root-form-template-parser.interface.ts","../src/model/templates/fields/base/base-field-template-parser.interface.ts","../src/model/templates/fields/controlled/controlled-field-template-parser.interface.ts","../src/model/templates/form-elements/form-element-template-dictionary-parser-impl.ts","../src/model/templates/fields/base/base-field-template-parser-impl.ts","../src/model/templates/fields/base/base-field-parsing-error.ts","../src/model/templates/fields/controlled/controlled-field-template-parser-impl.ts","../src/model/templates/fields/controlled/controlled-field-template-parsing-error.ts","../src/model/templates/finalizers/finalizer-template-dictionary-parser-impl.ts","../src/model/auto-transforms/auto-transformer-impl.ts","../src/model/auto-transforms/auto-transformer.interface.ts","../src/model/fields/auto-transformed/auto-transformed-field-factory-impl.ts","../src/model/fields/auto-transformed/auto-transformed-field.ts","../src/model/validators/util/email.ts","../src/model/validators/util/in-date-range.ts","../src/model/validators/util/in-length-range.ts","../src/model/validators/util/in-num-range.ts","../src/model/validators/util/includes-digit.ts","../src/model/validators/util/includes-lower.ts","../src/model/validators/util/includes-symbol.ts","../src/model/validators/util/includes-upper.ts","../src/model/validators/util/max-date.ts","../src/model/validators/util/max-length.ts","../src/model/validators/util/max-num.ts","../src/model/validators/util/min-date.ts","../src/model/validators/util/min-length.ts","../src/model/validators/util/min-num.ts","../src/model/validators/util/pattern.ts","../src/model/validators/util/required.ts","../src/hooks/use-root-form.ts","../src/hooks/use-form-state.ts","../src/hooks/use-first-non-valid-form-element.ts","../src/hooks/use-field.ts","../src/hooks/use-switch-to-secondary-field.ts","../src/hooks/use-dual-field.ts","../src/hooks/use-omittable-form-element.ts","../src/hooks/use-form.ts","../src/hooks/use-submission-attempted.ts","../src/components/field-messages.component.tsx","../src/components/form-context.ts","../src/components/messages.component.tsx","../src/components/default-message.component.tsx","../src/components/form-messages.component.tsx","../src/components/input-group.component.tsx","../src/components/label.component.tsx","../src/components/util/validity-to-string.ts","../src/components/input.component.tsx","../src/components/nested-form-provider.component.tsx","../src/components/reset-button.component.tsx","../src/components/root-form-provider.component.tsx","../src/components/submit-button.component.tsx"],"sourcesContent":["export { \n  Validity, \n  MessageType,\n  email,\n  inDateRange,\n  inLengthRange,\n  inNumRange,\n  includesDigit,\n  includesLower,\n  includesSymbol,\n  includesUpper,\n  maxDate,\n  maxLength,\n  maxNum,\n  minDate,\n  minLength,\n  minNum,\n  pattern,\n  required\n} from './model';\nexport type { Message, State, AnyState, FieldState, DualFieldSetStateArg, DualFieldSetValueArg, RootFormTemplate, NestedFormTemplate } from './model';\nexport { useRootForm } from './hooks';\nexport { FieldMessages, FormContext, FormMessages, InputGroup, Input, Label, NestedFormProvider, ResetButton, RootFormProvider, SubmitButton, validityToString } from './components';\nexport type { MessageComponent, MessageComponentProps } from './components';","export enum Validity {\n  ERROR = 0,\n  INVALID,\n  PENDING,\n  VALID_UNFINALIZABLE,\n  VALID_FINALIZABLE,\n}\n","export enum MessageType {\n  ERROR = 'ERROR',\n  INVALID = 'INVALID',\n  PENDING = 'PENDING',\n  VALID = 'VALID',\n}\n","import rc from 'rc';\n\nconst config : any = rc('modeledformsreact', {\n  autoTrim: true,\n  emailRegex:\n    /^[A-Z0-9]+(?:[_%+.-][A-Z0-9]+)*@[A-Z0-9]+(?:[.-][A-Z0-9]+)*\\.[A-Z]{2,}$/i,\n  symbolRegex: /[ !\"#$%&'()*+,-./\\\\:;<=>?@[\\]^_`{|}~]/,\n  globalMessages: {\n    pendingAsyncValidatorSuite: 'Checking field...',\n    singleFieldValidationError:\n      'An unexpected error occurred while validating the field.',\n    pendingAsyncMultiFieldValidator: 'Checking form...',\n    multiFieldValidationError:\n      'An unexpected error occurred while validating the validity of the form.',\n    adapterError:\n      \"An unexpected error occurred while generating this field's value.\",\n    finalizerError:\n      'An unexpected error occurred while preparing the form for submission.',\n    finalizerPending: 'Preparing form for submission...',\n    submissionFailed:\n      'There are invalid or pending fields, or the form is currently being prepared for submission.',\n  },\n});\n\nexport { config };\n","import { ContainerBuilder } from 'undecorated-di';\nimport { AdapterFactoryService } from './adapters/adapter-factory-impl';\nimport { AggregatorFactoryService } from './aggregators/aggregator-factory-impl';\nimport { EmitterFactoryService } from './emitters/emitter-factory-impl';\nimport { BaseFieldFactoryService } from './fields/base/base-field-factory-impl';\nimport { ControlledFieldFactoryService } from './fields/controlled/controlled-field-factory-impl';\nimport { FinalizerFnFactoryService } from './finalizers/finalizer-functions/finalizer-fn-factory-impl';\nimport { FinalizerValidityTranslatorService } from './finalizers/finalizer-validity-translator-impl';\nimport { ProxyProducerFactoryService } from './proxies/proxy-producer-factory-impl';\nimport { ReducerFactoryService } from './reducers/reducer-factory-impl';\nimport { SubjectFactoryService } from './subjects/subject-factory-impl';\nimport { SingleInputValidatorSuiteFactoryService } from './validators/single-input/single-input-validator-suite-factory-impl';\nimport { InsertionOrderHeapFactoryService } from './insertion-order-heap/insertion-order-heap-factory-impl';\nimport { TrackerFactoryService } from './trackers/tracker-factory-impl';\nimport { MultiInputValidatorFactoryService } from './validators/multi-input/multi-input-validator-factory-impl';\nimport { MultiInputValidatedFormElementFactoryService } from './form-elements/multi-input-validated/multi-input-validated-form-element-factory-impl';\nimport { MultiFieldValidatorsTemplateParserService } from './templates/multi-field-validators/multi-field-validators-template-parser-impl';\nimport { FinalizerManagerFactoryService } from './finalizers/finalizer-manager-factory-impl';\nimport { FinalizerFactoryService } from './finalizers/finalizer-factory-impl';\nimport { SubmissionManagerFactoryService } from './submission/submission-manager-factory-impl';\nimport { NestedFormTemplateParserService } from './templates/forms/nested-form-template-parser-impl';\nimport { RootFormTemplateParserService } from './templates/forms/root-form-template-parser-impl';\nimport { FormElementTemplateDictionaryParserService } from './templates/form-elements/form-element-template-dictionary-parser-impl';\nimport { BaseFieldTemplateParserService } from './templates/fields/base/base-field-template-parser-impl';\nimport { ControlledFieldTemplateParserService } from './templates/fields/controlled/controlled-field-template-parser-impl';\nimport { FinalizerTemplateDictionaryParserService } from './templates/finalizers/finalizer-template-dictionary-parser-impl';\nimport { AutoTransformerService } from './auto-transforms/auto-transformer-impl';\nimport { AutoTransformedFieldFactoryService } from './fields/auto-transformed/auto-transformed-field-factory-impl';\n\nconst container = ContainerBuilder.createContainerBuilder()\n  .registerSingletonService(AdapterFactoryService)\n  .registerSingletonService(AggregatorFactoryService)\n  .registerSingletonService(EmitterFactoryService)\n  .registerSingletonService(BaseFieldFactoryService)\n  .registerSingletonService(BaseFieldTemplateParserService)\n  .registerSingletonService(ControlledFieldTemplateParserService)\n  .registerSingletonService(ControlledFieldFactoryService)\n  .registerSingletonService(ProxyProducerFactoryService)\n  .registerSingletonService(ReducerFactoryService)\n  .registerSingletonService(SubjectFactoryService)\n  .registerSingletonService(SingleInputValidatorSuiteFactoryService)\n  .registerSingletonService(InsertionOrderHeapFactoryService)\n  .registerSingletonService(TrackerFactoryService)\n  .registerSingletonService(MultiInputValidatorFactoryService)\n  .registerSingletonService(MultiInputValidatedFormElementFactoryService)\n  .registerSingletonService(MultiFieldValidatorsTemplateParserService)\n  .registerSingletonService(FinalizerFnFactoryService)\n  .registerSingletonService(FinalizerValidityTranslatorService)\n  .registerSingletonService(FinalizerFactoryService)\n  .registerSingletonService(FinalizerManagerFactoryService)\n  .registerSingletonService(FinalizerTemplateDictionaryParserService)\n  .registerSingletonService(SubmissionManagerFactoryService)\n  .registerSingletonService(FormElementTemplateDictionaryParserService)\n  .registerSingletonService(NestedFormTemplateParserService)\n  .registerSingletonService(RootFormTemplateParserService)\n  .registerSingletonService(AutoTransformerService)\n  .registerSingletonService(AutoTransformedFieldFactoryService)\n  .build();\n\nexport { container };\n","import { autowire } from 'undecorated-di';\nimport {\n  AdapterFactory,\n  AdapterFactoryKey,\n  AdapterFactoryKeyType,\n} from './adapter-factory.interface';\nimport { AsyncAdapterFn } from './async-adapter-fn.type';\nimport { SyncAdapterFn } from './sync-adapter-fn.type';\nimport {\n  AggregatorFactory,\n  AggregatorFactoryKey,\n} from '../aggregators/aggregator-factory.interface';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport { AsyncAdapter } from './async-adapter';\nimport { SyncAdapter } from './sync-adapter';\n\nclass AdapterFactoryImpl implements AdapterFactory {\n  readonly _aggregatorFactory: AggregatorFactory;\n\n  constructor(aggregatorFactory: AggregatorFactory) {\n    this._aggregatorFactory = aggregatorFactory;\n  }\n\n  createSyncAdapterFromFnWithFields<V>(\n    syncAdapterFn: SyncAdapterFn<V>,\n    fields: FormElementDictionary,\n  ): SyncAdapter<V> {\n    const multiFieldAggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new SyncAdapter(syncAdapterFn, multiFieldAggregator);\n  }\n  createAsyncAdapterFromFnWithFields<V>(\n    asyncAdapterFn: AsyncAdapterFn<V>,\n    fields: FormElementDictionary,\n  ): AsyncAdapter<V> {\n    const multiFieldAggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new AsyncAdapter(asyncAdapterFn, multiFieldAggregator);\n  }\n}\n\nconst AdapterFactoryService = autowire<\n  AdapterFactoryKeyType,\n  AdapterFactory,\n  AdapterFactoryImpl\n>(AdapterFactoryImpl, AdapterFactoryKey, [AggregatorFactoryKey]);\n\nexport { AdapterFactoryImpl, AdapterFactoryService };\n","import { AsyncAdapter } from './async-adapter';\nimport { SyncAdapter } from './sync-adapter';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport { AsyncAdapterFn } from './async-adapter-fn.type';\nimport { SyncAdapterFn } from './sync-adapter-fn.type';\n\ninterface AdapterFactory {\n  createSyncAdapterFromFnWithFields<V>(\n    syncAdapterFn: SyncAdapterFn<V>,\n    fields: FormElementDictionary,\n  ): SyncAdapter<V>;\n  createAsyncAdapterFromFnWithFields<V>(\n    asyncAdapterFn: AsyncAdapterFn<V>,\n    fields: FormElementDictionary,\n  ): AsyncAdapter<V>;\n}\nconst AdapterFactoryKey = 'AdapterFactory';\ntype AdapterFactoryKeyType = typeof AdapterFactoryKey;\n\nexport { AdapterFactoryKey, type AdapterFactory, type AdapterFactoryKeyType };\n","import { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport { MultiInputValidator } from '../validators/multi-input/multi-input-validator.interface';\nimport { MultiFieldAggregator } from './multi-field-aggregator.interface';\nimport { MultiInputValidatorMessagesAggregator } from './multi-input-validator-messages-aggregator.interface';\n\ninterface AggregatorFactory {\n  createMultiFieldAggregatorFromFields(\n    fields: FormElementDictionary,\n  ): MultiFieldAggregator;\n  createMultiInputValidatorMessagesAggregatorFromValidators(\n    validators: Array<MultiInputValidator>,\n  ): MultiInputValidatorMessagesAggregator;\n}\nconst AggregatorFactoryKey = 'AggregatorFactory';\ntype AggregatorFactoryKeyType = typeof AggregatorFactoryKey;\n\nexport {\n  AggregatorFactoryKey,\n  type AggregatorFactory,\n  type AggregatorFactoryKeyType,\n};\n","import { ReplaySubject, from, type Subscription, type Subject } from 'rxjs';\nimport { logErrorInDevMode } from '../util/log-error-in-dev-mode';\nimport type { MultiFieldAggregator } from '../aggregators/multi-field-aggregator.interface';\nimport type { Adapter } from './adapter.interface';\nimport type { AsyncAdapterFn } from './async-adapter-fn.type';\nimport type { AggregatedStateChanges } from '../aggregators/aggregated-state-changes.interface';\n\nexport class AsyncAdapter<V> implements Adapter<V> {\n  readonly stream: Subject<V>;\n  readonly _aggregator: MultiFieldAggregator;\n  _adapterFnSubscription?: Subscription;\n\n  constructor(adapterFn: AsyncAdapterFn<V>, aggregator: MultiFieldAggregator) {\n    this._aggregator = aggregator;\n    (this.stream = new ReplaySubject<V>(1)),\n      this._aggregator.aggregateChanges.subscribe(\n        (aggregateChange: AggregatedStateChanges) => {\n          this._adapterFnSubscription?.unsubscribe();\n          try {\n            const promiseOrObservable = adapterFn(aggregateChange);\n            this._adapterFnSubscription = from(promiseOrObservable).subscribe({\n              next: next => this.stream.next(next),\n              error: e => {\n                logErrorInDevMode(e);\n                this.stream.error(e);\n              },\n            });\n          } catch (e) {\n            logErrorInDevMode(e);\n            this.stream.error(e);\n          }\n        },\n      );\n  }\n}\n","export function logErrorInDevMode(e: any) {\n  process.env.NODE_ENV === 'development' && console.error(e);\n}\n","import { ReplaySubject, type Subject } from 'rxjs';\nimport { logErrorInDevMode } from '../util/log-error-in-dev-mode';\nimport type { SyncAdapterFn } from './sync-adapter-fn.type';\nimport type { Adapter } from './adapter.interface';\nimport type { MultiFieldAggregator } from '../aggregators/multi-field-aggregator.interface';\nimport type { AggregatedStateChanges } from '../aggregators/aggregated-state-changes.interface';\n\nexport class SyncAdapter<V> implements Adapter<V> {\n  readonly stream: Subject<V>;\n  readonly _aggregator: MultiFieldAggregator;\n\n  constructor(adapterFn: SyncAdapterFn<V>, aggregator: MultiFieldAggregator) {\n    this._aggregator = aggregator;\n    this.stream = new ReplaySubject<V>(1);\n    this._aggregator.aggregateChanges.subscribe(\n      (aggregateChange: AggregatedStateChanges) => {\n        try {\n          const nextValue = adapterFn(aggregateChange); //adapters can return no value\n          this.stream.next(nextValue);\n        } catch (e) {\n          logErrorInDevMode(e);\n          this.stream.error(e);\n        }\n      },\n    );\n  }\n}\n","import type { OneTimeEventEmitter } from './one-time-event-emitter.interface';\nimport { OneTimeValueEmitter } from './one-time-value-emitter.interface';\n\ninterface EmitterFactory {\n  createOneTimeEventEmitter(): OneTimeEventEmitter;\n  createOneTimeValueEmitter<T>(): OneTimeValueEmitter<T>;\n}\nconst EmitterFactoryKey = 'EmitterFactory';\ntype EmitterFactoryKeyType = typeof EmitterFactoryKey;\n\nexport { EmitterFactoryKey, type EmitterFactory, type EmitterFactoryKeyType };\n","import { AggregatedStateChangesProxyProducer } from './aggregated-state-changes-proxy-producer.interface';\n\ninterface ProxyProducerFactory {\n  createAggregatedStateChangesProxyProducer(): AggregatedStateChangesProxyProducer;\n}\nconst ProxyProducerFactoryKey = 'ProxyProducerFactory';\ntype ProxyProducerFactoryKeyType = typeof ProxyProducerFactoryKey;\n\nexport {\n  ProxyProducerFactoryKey,\n  type ProxyProducerFactory,\n  type ProxyProducerFactoryKeyType,\n};\n","import { FieldStateReducer } from './field-state/field-state-reducer.interface';\nimport { FinalizerValidityReducer } from './finalizer-validity/finalizer-validity-reducer.interface';\nimport { MultiInputValidatorValidityReducer } from './multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\nimport { ValidityReducer } from './validity/validity-reducer.interface';\n\ninterface ReducerFactory {\n  createFieldStateReducer(): FieldStateReducer;\n  createFinalizerValidityReducer(): FinalizerValidityReducer;\n  createUserMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer;\n  createFinalizerFacingMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer;\n  createValidityReducer(): ValidityReducer;\n}\nconst ReducerFactoryKey = 'ReducerFactory';\ntype ReducerFactoryKeyType = typeof ReducerFactoryKey;\n\nexport { ReducerFactoryKey, type ReducerFactory, type ReducerFactoryKeyType };\n","import { OnInitialSubscriptionHandlingBehaviorSubject } from './on-initial-subscription-handling-behavior-subject.interface';\n\ninterface SubjectFactory {\n  createOnInitialSubscriptionHandlingBehaviorSubject<T>(\n    initialValue: T,\n  ): OnInitialSubscriptionHandlingBehaviorSubject<T>;\n}\nconst SubjectFactoryKey = 'SubjectFactory';\ntype SubjectFactoryKeyType = typeof SubjectFactoryKey;\n\nexport { SubjectFactoryKey, type SubjectFactory, type SubjectFactoryKeyType };\n","import type { AggregatedStateChanges } from './aggregated-state-changes.interface';\nimport type { MultiFieldAggregator } from './multi-field-aggregator.interface';\nimport type { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport type { FieldStateReducer } from '../reducers/field-state/field-state-reducer.interface';\nimport type { AnyState } from '../state/any-state.type';\nimport type { OnInitialSubscriptionHandlingBehaviorSubject } from '../subjects/on-initial-subscription-handling-behavior-subject.interface';\nimport type { AggregatedStateChangesProxyProducer } from '../proxies/aggregated-state-changes-proxy-producer.interface';\nimport type { OneTimeValueEmitter } from '../emitters/one-time-value-emitter.interface';\nimport type { SubjectFactory } from '../subjects/subject-factory.interface';\n\nexport class MultiFieldAggregatorImpl implements MultiFieldAggregator {\n  readonly aggregateChanges: OnInitialSubscriptionHandlingBehaviorSubject<AggregatedStateChanges>;\n  readonly accessedFields: OneTimeValueEmitter<Set<string>>;\n  readonly _fields: FormElementDictionary;\n  readonly _fieldStateReducer: FieldStateReducer;\n  readonly _aggregatedFieldState: {\n    [key: string]: AnyState;\n  } = {};\n  _aggregatedStateChangesProxyProducer: AggregatedStateChangesProxyProducer | null;\n  _accessedFieldsSubscriptionProcessCompleted = false;\n\n  get aggregatedStateChanges() {\n    return {\n      ...this._aggregatedFieldState,\n      overallValidity: () => this._fieldStateReducer.validity,\n      hasOmittedFields: () => this._fieldStateReducer.omit,\n    } as AggregatedStateChanges;\n  }\n\n  constructor(\n    fields: FormElementDictionary,\n    aggregatedStateChangesProxyProducer: AggregatedStateChangesProxyProducer,\n    fieldStateReducer: FieldStateReducer,\n    accessedFields: OneTimeValueEmitter<Set<string>>,\n    subjectFactory: SubjectFactory,\n  ) {\n    this._fields = fields;\n    this._aggregatedStateChangesProxyProducer =\n      aggregatedStateChangesProxyProducer;\n    this._fieldStateReducer = fieldStateReducer;\n    this.aggregateChanges =\n      subjectFactory.createOnInitialSubscriptionHandlingBehaviorSubject(\n        this._aggregatedStateChangesProxyProducer.getProxy(this._fields),\n      );\n    this.accessedFields = accessedFields;\n    this.aggregateChanges.onInitialSubscription(this._subscribeToAccessedFields);\n  }\n\n  _subscribeToAccessedFields = () => {\n    if (\n      !this._accessedFieldsSubscriptionProcessCompleted &&\n      this._aggregatedStateChangesProxyProducer\n    ) {\n      const accessedFieldNames =\n        this._aggregatedStateChangesProxyProducer.accessedFieldNames;\n\n      for (const fieldName of accessedFieldNames) {\n        this._fields[fieldName].stateChanges.subscribe(\n          (stateChange: AnyState) => {\n            this._aggregatedFieldState[fieldName] = stateChange;\n            this._fieldStateReducer.updateTallies(fieldName, stateChange);\n            if (this._accessedFieldsSubscriptionProcessCompleted) {\n              this.aggregateChanges.next(this.aggregatedStateChanges);\n            }\n          },\n        );\n      }\n\n      this.accessedFields.setValue(accessedFieldNames);\n      this._aggregatedStateChangesProxyProducer = null;\n      this._accessedFieldsSubscriptionProcessCompleted = true;\n    }\n  };\n}\n","import { BehaviorSubject, Subject } from 'rxjs';\nimport { copyObject } from '../util/copy-object';\nimport type { MultiInputValidatorMessagesAggregator } from './multi-input-validator-messages-aggregator.interface';\nimport { Message } from '../state/messages/message.interface';\nimport { MultiInputValidator } from '../validators/multi-input/multi-input-validator.interface';\n\ntype MessagesByValidatorId = {\n  [id: number]: Message;\n};\n\nexport class MultiInputValidatorMessagesAggregatorImpl\n  implements MultiInputValidatorMessagesAggregator\n{\n  messagesChanges: Subject<Message[]>;\n  _messages: MessagesByValidatorId = {};\n\n  get messages() {\n    return [...this._generateMessages()];\n  }\n\n  constructor(validators: Array<MultiInputValidator>) {\n    for (let i = 0; i < validators.length; i++) {\n      const validator = validators[i];\n      validator.messageChanges.subscribe(next => {\n        if (next) this._messages[i] = next;\n        else delete this._messages[i];\n        if (this.messagesChanges) this.messagesChanges.next(this.messages);\n      });\n    }\n    this.messagesChanges = new BehaviorSubject(this.messages);\n  }\n\n  *_generateMessages() {\n    for (const key in this._messages) yield copyObject(this._messages[key]);\n  }\n}\n","export function copyObject(object: object) {\n  return JSON.parse(JSON.stringify(object));\n}\n","import {\n  AggregatorFactory,\n  AggregatorFactoryKey,\n  AggregatorFactoryKeyType,\n} from './aggregator-factory.interface';\nimport { MultiFieldAggregator } from './multi-field-aggregator.interface';\nimport { MultiInputValidatorMessagesAggregator } from './multi-input-validator-messages-aggregator.interface';\nimport {\n  EmitterFactory,\n  EmitterFactoryKey,\n} from '../emitters/emitter-factory.interface';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport {\n  ProxyProducerFactory,\n  ProxyProducerFactoryKey,\n} from '../proxies/proxy-producer-factory.interface';\nimport {\n  ReducerFactory,\n  ReducerFactoryKey,\n} from '../reducers/reducer-factory.interface';\nimport {\n  SubjectFactory,\n  SubjectFactoryKey,\n} from '../subjects/subject-factory.interface';\nimport { MultiInputValidator } from '../validators/multi-input/multi-input-validator.interface';\nimport { MultiFieldAggregatorImpl } from './multi-field-aggregator-impl';\nimport { MultiInputValidatorMessagesAggregatorImpl } from './multi-input-validator-messages-aggregator-impl';\nimport { autowire } from 'undecorated-di';\n\nclass AggregatorFactoryImpl implements AggregatorFactory {\n  _proxyProducerFactory: ProxyProducerFactory;\n  _reducerFactory: ReducerFactory;\n  _emitterFactory: EmitterFactory;\n  _subjectFactory: SubjectFactory;\n\n  constructor(\n    proxyProducerFactory: ProxyProducerFactory,\n    reducerFactory: ReducerFactory,\n    emitterFactory: EmitterFactory,\n    subjectFactory: SubjectFactory,\n  ) {\n    this._proxyProducerFactory = proxyProducerFactory;\n    this._reducerFactory = reducerFactory;\n    this._emitterFactory = emitterFactory;\n    this._subjectFactory = subjectFactory;\n  }\n\n  createMultiFieldAggregatorFromFields(\n    fields: FormElementDictionary,\n  ): MultiFieldAggregator {\n    return new MultiFieldAggregatorImpl(\n      fields,\n      this._proxyProducerFactory.createAggregatedStateChangesProxyProducer(),\n      this._reducerFactory.createFieldStateReducer(),\n      this._emitterFactory.createOneTimeValueEmitter<Set<string>>(),\n      this._subjectFactory,\n    );\n  }\n  createMultiInputValidatorMessagesAggregatorFromValidators(\n    validators: MultiInputValidator[],\n  ): MultiInputValidatorMessagesAggregator {\n    return new MultiInputValidatorMessagesAggregatorImpl(validators);\n  }\n}\n\nconst AggregatorFactoryService = autowire<\n  AggregatorFactoryKeyType,\n  AggregatorFactory,\n  AggregatorFactoryImpl\n>(AggregatorFactoryImpl, AggregatorFactoryKey, [\n  ProxyProducerFactoryKey,\n  ReducerFactoryKey,\n  EmitterFactoryKey,\n  SubjectFactoryKey,\n]);\n\nexport { AggregatorFactoryImpl, AggregatorFactoryService };\n","import { OneTimeEventEmitter } from './one-time-event-emitter.interface';\n\nexport class OneTimeEventEmitterImpl implements OneTimeEventEmitter {\n  _eventOccurred: boolean = false;\n  _callbacks: Array<() => void> = [];\n\n  onEvent(cb: () => void) {\n    if (this._eventOccurred) cb();\n    else this._callbacks.push(cb);\n  }\n\n  triggerEvent() {\n    if (!this._eventOccurred) {\n      this._eventOccurred = true;\n      for (const cb of this._callbacks) {\n        cb();\n      }\n    }\n  }\n}\n","import type { OneTimeValueEmitter } from './one-time-value-emitter.interface';\n\nexport class OneTimeValueEmitterImpl<T> implements OneTimeValueEmitter<T> {\n  _value?: T;\n  _callbacks: Array<(value: T) => void> = [];\n\n  onValue(cb: (value: T) => void) {\n    if (this._value) cb(this._value);\n    else this._callbacks.push(cb);\n  }\n\n  setValue(value: T) {\n    if (!this._value) {\n      this._value = value;\n      for (const cb of this._callbacks) {\n        cb(this._value);\n      }\n    }\n  }\n}\n","import {\n  EmitterFactory,\n  EmitterFactoryKey,\n  EmitterFactoryKeyType,\n} from './emitter-factory.interface';\nimport { OneTimeEventEmitter } from './one-time-event-emitter.interface';\nimport { OneTimeValueEmitter } from './one-time-value-emitter.interface';\nimport { OneTimeEventEmitterImpl } from './one-time-event-emitter-impl';\nimport { OneTimeValueEmitterImpl } from './one-time-value-emitter-impl';\nimport { autowire } from 'undecorated-di';\n\nclass EmitterFactoryImpl implements EmitterFactory {\n  createOneTimeEventEmitter(): OneTimeEventEmitter {\n    return new OneTimeEventEmitterImpl();\n  }\n  createOneTimeValueEmitter<T>(): OneTimeValueEmitter<T> {\n    return new OneTimeValueEmitterImpl<T>();\n  }\n}\n\nconst EmitterFactoryService = autowire<\n  EmitterFactoryKeyType,\n  EmitterFactory,\n  EmitterFactoryImpl\n>(EmitterFactoryImpl, EmitterFactoryKey);\n\nexport { EmitterFactoryImpl, EmitterFactoryService };\n","import { AsyncValidator } from '../../validators/async-validator.type';\nimport { SyncValidator } from '../../validators/sync-validator.type';\nimport { AbstractField } from './abstract-field';\nimport { AbstractDualField } from './abstract-dual-field';\n\ninterface BaseFieldFactory {\n  createField(\n    defaultValue: string,\n    omitByDefault: boolean,\n    syncValidators: Array<SyncValidator<string>>,\n    asyncValidators: Array<AsyncValidator<string>>,\n    pendingAsyncValidatorMessage?: string,\n  ): AbstractField;\n  createDualField(\n    primaryDefaultValue: string,\n    secondaryDefaultValue: string,\n    omitByDefault: boolean,\n    syncValidators: Array<SyncValidator<string>>,\n    asyncValidators: Array<AsyncValidator<string>>,\n    pendingAsyncValidatorMessage?: string,\n  ): AbstractDualField;\n}\nconst BaseFieldFactoryKey = 'BaseFieldFactory';\ntype BaseFieldFactoryKeyType = typeof BaseFieldFactoryKey;\n\nexport {\n  BaseFieldFactoryKey,\n  type BaseFieldFactory,\n  type BaseFieldFactoryKeyType,\n};\n","import { AsyncValidator } from '../async-validator.type';\nimport { SyncValidator } from '../sync-validator.type';\nimport { SingleInputValidatorSuite } from './single-input-validator-suite.interface';\n\ninterface SingleInputValidatorSuiteFactory {\n  createSingleInputValidatorSuite<T>(\n    syncValidators: SyncValidator<T>[],\n    asyncValidators: AsyncValidator<T>[],\n    pendingAsyncValidatorMessage?: string,\n  ): SingleInputValidatorSuite<T>;\n}\nconst SingleInputValidatorSuiteFactoryKey = 'SingleInputValidatorSuiteFactory';\ntype SingleInputValidatorSuiteFactoryKeyType =\n  typeof SingleInputValidatorSuiteFactoryKey;\n\nexport {\n  SingleInputValidatorSuiteFactoryKey,\n  type SingleInputValidatorSuiteFactory,\n  type SingleInputValidatorSuiteFactoryKeyType,\n};\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { AbstractField } from './abstract-field';\nimport { AbstractDualField } from './abstract-dual-field';\nimport type { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport type { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport type { FieldState } from '../../state/field-state.interface';\n\nexport class DualField extends AbstractDualField {\n  readonly primaryField: AbstractField;\n  readonly secondaryField: AbstractField;\n  readonly stateChanges: Subject<FieldState>;\n  _useSecondaryField: boolean = false;\n  _omit: boolean;\n  _omitByDefault: boolean;\n\n  get state() {\n    const state = !this._useSecondaryField\n      ? this.primaryField.state\n      : this.secondaryField.state;\n    state.useSecondaryField = this._useSecondaryField;\n    state.omit = this._omit;\n    return state;\n  }\n\n  set useSecondaryField(useSecondaryField) {\n    const changeDetected = this.useSecondaryField !== useSecondaryField;\n    this._useSecondaryField = useSecondaryField;\n    if (this.stateChanges && changeDetected) this.stateChanges.next(this.state);\n  }\n\n  get useSecondaryField() {\n    return this._useSecondaryField;\n  }\n\n  set omit(omit: boolean) {\n    this._omit = omit;\n    this.stateChanges?.next(this.state);\n  }\n\n  get omit() {\n    return this._omit;\n  }\n\n  constructor(\n    primaryField: AbstractField,\n    secondaryField: AbstractField,\n    omitByDefault: boolean,\n  ) {\n    super();\n    this.primaryField = primaryField;\n    this.secondaryField = secondaryField;\n    this._omitByDefault = omitByDefault;\n    this._omit = this._omitByDefault;\n    this.primaryField.stateChanges.subscribe(() => {\n      if (!this._useSecondaryField) this.stateChanges?.next(this.state);\n    });\n    this.secondaryField.stateChanges.subscribe(() => {\n      if (this._useSecondaryField) this.stateChanges?.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  setValue(valueObj: DualFieldSetValueArg) {\n    if (valueObj.primaryFieldValue)\n      this.primaryField.setValue(valueObj.primaryFieldValue);\n    if (valueObj.secondaryFieldValue)\n      this.secondaryField.setValue(valueObj.secondaryFieldValue);\n    if (valueObj.useSecondaryField !== undefined)\n      this.useSecondaryField = valueObj.useSecondaryField;\n  }\n\n  setState(stateObj: DualFieldSetStateArg) {\n    if (stateObj.omit !== undefined) this.omit = stateObj.omit;\n    if (stateObj.primaryFieldState)\n      this.primaryField.setState(stateObj.primaryFieldState);\n    if (stateObj.secondaryFieldState)\n      this.secondaryField.setState(stateObj.secondaryFieldState);\n    if (stateObj.useSecondaryField !== undefined)\n      this.useSecondaryField = stateObj.useSecondaryField;\n  }\n\n  reset = () => {\n    this._omit = this._omitByDefault;\n    this.primaryField.reset();\n    this.secondaryField.reset();\n    this.useSecondaryField = false;\n  }\n}\n","import type { OmittableFormElement } from '../../form-elements/omittable-form-element.interface';\nimport type { StatefulFormElement } from '../../form-elements/stateful-form-element.interface';\nimport type { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport type { ResettableFormElement } from '../../form-elements/resettable-form-element.interface';\nimport type { FieldState } from '../../state/field-state.interface';\nimport type { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport { Subject } from 'rxjs';\nimport { State } from '../../state/state.interface';\n\nexport abstract class AbstractField\n  implements\n    StatefulFormElement<string>,\n    OmittableFormElement,\n    ResettableFormElement\n{\n  abstract state: FieldState;\n  abstract stateChanges: Subject<State<string>>;\n  abstract omit: boolean;\n\n  abstract setState(state: FieldState | DualFieldSetStateArg): void;\n  abstract setValue(value: string | DualFieldSetValueArg): void;\n  abstract reset(): void;\n}\n","import { AbstractField } from './abstract-field';\n\nexport abstract class AbstractDualField extends AbstractField {\n  abstract primaryField: AbstractField;\n  abstract secondaryField: AbstractField;\n  abstract useSecondaryField: boolean;\n}\n","import {\n  BehaviorSubject,\n  Observable,\n  type Subject,\n  type Subscription,\n} from 'rxjs';\nimport { copyObject } from '../../util/copy-object';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { AbstractField } from './abstract-field';\nimport type { FieldState } from '../../state/field-state.interface';\nimport type { SingleInputValidatorSuite } from '../../validators/single-input/single-input-validator-suite.interface';\nimport type { ValidatorSuiteResult } from '../../validators/validator-suite-result.interface';\nimport type { Message } from '../../state/messages/message.interface';\n\nexport class Field extends AbstractField {\n  readonly stateChanges: Subject<FieldState>;\n  readonly _validatorSuite: SingleInputValidatorSuite<string>;\n  readonly _defaultValue: string;\n  readonly _omitByDefault;\n  _state: FieldState;\n  _validatorSuiteSubscription?: Subscription;\n\n  get state() {\n    return copyObject(this._state);\n  }\n\n  set omit(omit: boolean) {\n    this.setState({\n      ...this.state,\n      omit,\n    });\n  }\n\n  get omit() {\n    return this.state.omit as boolean;\n  }\n\n  constructor(\n    validatorSuite: SingleInputValidatorSuite<string>,\n    defaultValue: string,\n    omitByDefault: boolean,\n  ) {\n    super();\n    this._validatorSuite = validatorSuite;\n    this._defaultValue = defaultValue;\n    this._omitByDefault = omitByDefault;\n    const initialState = this._validatorSuite.evaluate(this._defaultValue);\n    this._state = {\n      ...initialState.syncResult,\n      omit: this._omitByDefault,\n    };\n    this.stateChanges = new BehaviorSubject(this.state);\n    if (initialState.observable)\n      this._handleValidityObservable(initialState.observable);\n  }\n\n  setValue(value: string) {\n    if (this._validatorSuiteSubscription)\n      this._validatorSuiteSubscription.unsubscribe();\n    const validityResult = this._validatorSuite.evaluate(value);\n    this.setState({\n      ...validityResult.syncResult,\n      omit: this.state.omit,\n    });\n    if (validityResult.observable)\n      this._handleValidityObservable(validityResult.observable);\n  }\n\n  setState(state: FieldState) {\n    this._state = copyObject(state);\n    this.stateChanges.next(this.state);\n  }\n\n  reset() {\n    this._state.omit = this._omitByDefault;\n    this.setValue(this._defaultValue);\n  }\n\n  _handleValidityObservable(\n    observable: Observable<ValidatorSuiteResult<string>>,\n  ) {\n    this._validatorSuiteSubscription?.unsubscribe();\n    this._validatorSuiteSubscription = observable.subscribe(result => {\n      this.setState({\n        ...result,\n        messages: [\n          ...this.state.messages.filter(\n            (message: Message) => message.type !== MessageType.PENDING,\n          ),\n          ...result.messages,\n        ],\n        omit: this.state.omit,\n      });\n    });\n  }\n}\n","import {\n  BaseFieldFactory,\n  BaseFieldFactoryKey,\n  BaseFieldFactoryKeyType,\n} from './base-field-factory.interface';\nimport { AsyncValidator } from '../../validators/async-validator.type';\nimport {\n  SingleInputValidatorSuiteFactoryKey,\n  SingleInputValidatorSuiteFactory,\n} from '../../validators/single-input/single-input-validator-suite-factory.interface';\nimport { SyncValidator } from '../../validators/sync-validator.type';\nimport { AbstractField } from './abstract-field';\nimport { AbstractDualField } from './abstract-dual-field';\nimport { DualField } from './dual-field';\nimport { Field } from './field';\nimport { autowire } from 'undecorated-di';\n\nclass BaseFieldFactoryImpl implements BaseFieldFactory {\n  _singleInputValidatorSuiteFactory: SingleInputValidatorSuiteFactory;\n\n  constructor(\n    singleInputValidatorSuiteFactory: SingleInputValidatorSuiteFactory,\n  ) {\n    this._singleInputValidatorSuiteFactory = singleInputValidatorSuiteFactory;\n  }\n\n  createField(\n    defaultValue: string,\n    omitByDefault: boolean,\n    syncValidators: SyncValidator<string>[],\n    asyncValidators: AsyncValidator<string>[],\n    pendingAsyncValidatorMessage?: string,\n  ): AbstractField {\n    const validatorSuite =\n      this._singleInputValidatorSuiteFactory.createSingleInputValidatorSuite(\n        syncValidators,\n        asyncValidators,\n        pendingAsyncValidatorMessage,\n      );\n    return new Field(validatorSuite, defaultValue, omitByDefault);\n  }\n\n  createDualField(\n    primaryDefaultValue: string,\n    secondaryDefaultValue: string,\n    omitByDefault: boolean,\n    syncValidators: SyncValidator<string>[],\n    asyncValidators: AsyncValidator<string>[],\n    pendingAsyncValidatorMessage?: string,\n  ): AbstractDualField {\n    const primaryField = this.createField(\n      primaryDefaultValue,\n      false,\n      syncValidators,\n      asyncValidators,\n      pendingAsyncValidatorMessage,\n    );\n    const secondaryField = this.createField(\n      secondaryDefaultValue,\n      false,\n      syncValidators,\n      asyncValidators,\n      pendingAsyncValidatorMessage,\n    );\n    return new DualField(primaryField, secondaryField, omitByDefault);\n  }\n}\n\nconst BaseFieldFactoryService = autowire<\n  BaseFieldFactoryKeyType,\n  BaseFieldFactory,\n  BaseFieldFactoryImpl\n>(BaseFieldFactoryImpl, BaseFieldFactoryKey, [\n  SingleInputValidatorSuiteFactoryKey,\n]);\n\nexport { BaseFieldFactoryImpl, BaseFieldFactoryService };\n","import { autowire } from 'undecorated-di';\nimport {\n  AdapterFactory,\n  AdapterFactoryKey,\n} from '../../adapters/adapter-factory.interface';\nimport { Adapter } from '../../adapters/adapter.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport { FieldState } from '../../state/field-state.interface';\nimport { AbstractDualField } from '../base/abstract-dual-field';\nimport { AbstractField } from '../base/abstract-field';\nimport { AsyncDualFieldStateControlFn } from './control-functions/dual-fields/async-dual-field-state-control-fn.type';\nimport { AsyncDualFieldValueControlFn } from './control-functions/dual-fields/async-dual-field-value-control-fn.type';\nimport { SyncDualFieldStateControlFn } from './control-functions/dual-fields/sync-dual-field-state-control-fn.type';\nimport { SyncDualFieldValueControlFn } from './control-functions/dual-fields/sync-dual-field-value-control-fn.type';\nimport { AsyncFieldStateControlFn } from './control-functions/fields/async-field-state-control-fn.type';\nimport { AsyncFieldValueControlFn } from './control-functions/fields/async-field-value-control-fn.type';\nimport { SyncFieldStateControlFn } from './control-functions/fields/sync-field-state-control-fn.type';\nimport { SyncFieldValueControlFn } from './control-functions/fields/sync-field-value-control-fn.type';\nimport { ControlledFieldFactory } from './controlled-field-factory.interface';\nimport { StateControlledDualField } from './state-controlled-dual-field';\nimport { StateControlledField } from './state-controlled-field';\nimport { ValueControlledDualField } from './value-controlled-dual-field';\nimport { ValueControlledField } from './value-controlled-field';\nimport {\n  ControlledFieldFactoryKey,\n  ControlledFieldFactoryKeyType,\n} from './controlled-field-factory.interface';\n\nclass ControlledFieldFactoryImpl implements ControlledFieldFactory {\n  _adapterFactory: AdapterFactory;\n\n  constructor(adapterFactory: AdapterFactory) {\n    this._adapterFactory = adapterFactory;\n  }\n\n  createStateControlledFieldWithSyncAdapter(\n    baseField: AbstractField,\n    stateControlFn: SyncDualFieldStateControlFn | SyncFieldStateControlFn,\n    fields: FormElementDictionary,\n  ): StateControlledDualField | StateControlledField {\n    const adapter = this._adapterFactory.createSyncAdapterFromFnWithFields<\n      DualFieldSetStateArg | FieldState\n    >(stateControlFn, fields);\n    return baseField instanceof AbstractDualField\n      ? new StateControlledDualField(\n          baseField,\n          adapter as unknown as Adapter<DualFieldSetStateArg>,\n        )\n      : new StateControlledField(\n          baseField,\n          adapter as unknown as Adapter<FieldState>,\n        );\n  }\n\n  createStateControlledFieldWithAsyncAdapter(\n    baseField: AbstractField,\n    stateControlFn: AsyncFieldStateControlFn | AsyncDualFieldStateControlFn,\n    fields: FormElementDictionary,\n  ): StateControlledDualField | StateControlledField {\n    const adapter = this._adapterFactory.createAsyncAdapterFromFnWithFields<\n      DualFieldSetStateArg | FieldState\n    >(stateControlFn, fields);\n    return baseField instanceof AbstractDualField\n      ? new StateControlledDualField(\n          baseField,\n          adapter as unknown as Adapter<DualFieldSetStateArg>,\n        )\n      : new StateControlledField(\n          baseField,\n          adapter as unknown as Adapter<FieldState>,\n        );\n  }\n  createValueControlledFieldWithSyncAdapter(\n    baseField: AbstractField,\n    valueControlFn: SyncFieldValueControlFn | SyncDualFieldValueControlFn,\n    fields: FormElementDictionary,\n  ): ValueControlledField | ValueControlledDualField {\n    const adapter = this._adapterFactory.createSyncAdapterFromFnWithFields<\n      DualFieldSetValueArg | string | undefined\n    >(valueControlFn, fields);\n    return baseField instanceof AbstractDualField\n      ? new ValueControlledDualField(\n          baseField,\n          adapter as unknown as Adapter<DualFieldSetValueArg>,\n        )\n      : new ValueControlledField(\n          baseField,\n          adapter as unknown as Adapter<string | undefined>,\n        );\n  }\n  createValueControlledFieldWithAsyncAdapter(\n    baseField: AbstractField,\n    valueControlFn: AsyncFieldValueControlFn | AsyncDualFieldValueControlFn,\n    fields: FormElementDictionary,\n  ): ValueControlledField | ValueControlledDualField {\n    const adapter = this._adapterFactory.createAsyncAdapterFromFnWithFields<\n      DualFieldSetValueArg | string | undefined\n    >(valueControlFn, fields);\n    return baseField instanceof AbstractDualField\n      ? new ValueControlledDualField(\n          baseField,\n          adapter as unknown as Adapter<DualFieldSetValueArg>,\n        )\n      : new ValueControlledField(\n          baseField,\n          adapter as unknown as Adapter<string | undefined>,\n        );\n  }\n}\n\nconst ControlledFieldFactoryService = autowire<\n  ControlledFieldFactoryKeyType,\n  ControlledFieldFactory,\n  ControlledFieldFactoryImpl\n>(ControlledFieldFactoryImpl, ControlledFieldFactoryKey, [AdapterFactoryKey]);\n\nexport { ControlledFieldFactoryImpl, ControlledFieldFactoryService };\n","import { AbstractDualField } from '../base/abstract-dual-field';\nimport { Validity } from '../../state/validity.enum';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { config } from '../../../config';\nimport type { Adapter } from '../../adapters/adapter.interface';\nimport type { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport type { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport type { FieldState } from '../../state/field-state.interface';\n\nexport class StateControlledDualField extends AbstractDualField {\n  readonly _field: AbstractDualField;\n  readonly _adapter: Adapter<DualFieldSetStateArg>;\n\n  get stateChanges() {\n    return this._field.stateChanges;\n  }\n\n  get state() {\n    return this._field.state;\n  }\n\n  set omit(omit: boolean) {\n    this._field.omit = omit;\n  }\n\n  get omit() {\n    return this._field.omit;\n  }\n\n  get primaryField() {\n    return this._dualField.primaryField;\n  }\n\n  get secondaryField() {\n    return this._dualField.secondaryField;\n  }\n\n  set useSecondaryField(useSecondaryField: boolean) {\n    this._dualField.useSecondaryField = useSecondaryField;\n  }\n\n  get useSecondaryField() {\n    return this._dualField.useSecondaryField;\n  }\n\n  get _dualField() {\n    return this._field as AbstractDualField;\n  }\n\n  constructor(\n    field: AbstractDualField,\n    adapter: Adapter<DualFieldSetStateArg>,\n  ) {\n    super();\n    this._field = field;\n    this._adapter = adapter;\n    this._adapter.stream.subscribe({\n      next: (next: DualFieldSetStateArg) => this.setState(next),\n      error: () => {\n        const errorState: FieldState = {\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: config.globalMessages.adapterError,\n            },\n          ],\n        };\n        const setStateArg: DualFieldSetStateArg = this._dualField\n          .useSecondaryField\n          ? {\n              secondaryFieldState: errorState,\n            }\n          : {\n              primaryFieldState: errorState,\n            };\n        this.setState(setStateArg);\n      },\n    });\n  }\n\n  setValue(value: DualFieldSetValueArg) {\n    this._dualField.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg): void {\n    this._dualField.setState(state);\n  }\n\n  reset(): void {\n    this._dualField.reset();\n  }\n}\n","import { MessageType } from '../../state/messages/message-type.enum';\nimport { Validity } from '../../state/validity.enum';\nimport { config } from '../../../config';\nimport { AbstractField } from '../base/abstract-field';\nimport type { Adapter } from '../../adapters/adapter.interface';\nimport type { FieldState } from '../../state/field-state.interface';\n\nexport class StateControlledField extends AbstractField {\n  readonly _field: AbstractField;\n  readonly _adapter: Adapter<FieldState>;\n\n  get stateChanges() {\n    return this._field.stateChanges;\n  }\n\n  get state() {\n    return this._field.state;\n  }\n\n  set omit(omit: boolean) {\n    this._field.omit = omit;\n  }\n\n  get omit() {\n    return this._field.omit;\n  }\n\n  constructor(field: AbstractField, adapter: Adapter<FieldState>) {\n    super();\n    this._field = field;\n    this._adapter = adapter;\n    this._adapter.stream.subscribe({\n      next: (next: FieldState) => this.setState(next),\n      error: () => {\n        this.setState({\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: config.globalMessages.adapterError,\n            },\n          ],\n        });\n      },\n    });\n  }\n\n  setValue(value: string) {\n    this._field.setValue(value);\n  }\n\n  setState(state: FieldState): void {\n    this._field.setState(state);\n  }\n\n  reset() {\n    this._field.reset();\n  }\n}\n","import { AbstractDualField } from '../base/abstract-dual-field';\nimport type { Adapter } from '../../adapters/adapter.interface';\nimport type { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport type { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport { Validity } from '../../state/validity.enum';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { config } from '../../../config';\nimport { FieldState } from '../../state/field-state.interface';\n\nexport class ValueControlledDualField extends AbstractDualField {\n  readonly _field: AbstractDualField;\n  readonly _adapter: Adapter<DualFieldSetValueArg>;\n\n  get stateChanges() {\n    return this._field.stateChanges;\n  }\n\n  get state() {\n    return this._field.state;\n  }\n\n  set omit(omit: boolean) {\n    this._field.omit = omit;\n  }\n\n  get omit() {\n    return this._field.omit;\n  }\n\n  get primaryField() {\n    return this._dualField.primaryField;\n  }\n\n  get secondaryField() {\n    return this._dualField.secondaryField;\n  }\n\n  set useSecondaryField(useSecondaryField: boolean) {\n    this._dualField.useSecondaryField = useSecondaryField;\n  }\n\n  get useSecondaryField() {\n    return this._dualField.useSecondaryField;\n  }\n\n  get _dualField() {\n    return this._field as AbstractDualField;\n  }\n\n  constructor(\n    field: AbstractDualField,\n    adapter: Adapter<DualFieldSetValueArg>,\n  ) {\n    super();\n    this._field = field;\n    this._adapter = adapter;\n    this._adapter.stream.subscribe({\n      next: (next: DualFieldSetValueArg) => {\n        if (next) this.setValue(next);\n      },\n      error: () => {\n        const errorState: FieldState = {\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: config.globalMessages.adapterError,\n            },\n          ],\n        };\n        const setStateArg: DualFieldSetStateArg = this._dualField\n          .useSecondaryField\n          ? {\n              secondaryFieldState: errorState,\n            }\n          : {\n              primaryFieldState: errorState,\n            };\n        this.setState(setStateArg);\n      },\n    });\n  }\n\n  setValue(value: DualFieldSetValueArg) {\n    this._dualField.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg): void {\n    this._dualField.setState(state);\n  }\n\n  reset() {\n    this._dualField.reset();\n  }\n}\n","import { MessageType } from '../../state/messages/message-type.enum';\nimport { Validity } from '../../state/validity.enum';\nimport { config } from '../../../config';\nimport { AbstractField } from '../base/abstract-field';\nimport type { Adapter } from '../../adapters/adapter.interface';\nimport type { FieldState } from '../../state/field-state.interface';\n\nexport class ValueControlledField extends AbstractField {\n  readonly _field: AbstractField;\n  readonly _adapter: Adapter<string | undefined>;\n\n  get stateChanges() {\n    return this._field.stateChanges;\n  }\n\n  get state() {\n    return this._field.state;\n  }\n\n  set omit(omit: boolean) {\n    this._field.omit = omit;\n  }\n\n  get omit() {\n    return this._field.omit;\n  }\n\n  constructor(field: AbstractField, adapter: Adapter<string | undefined>) {\n    super();\n    this._field = field;\n    this._adapter = adapter;\n    this._adapter.stream.subscribe({\n      next: (next: string | undefined) => {\n        if (next) this.setValue(next);\n      },\n      error: () => {\n        this.setState({\n          value: '',\n          validity: Validity.ERROR,\n          messages: [\n            {\n              type: MessageType.ERROR,\n              text: config.globalMessages.adapterError,\n            },\n          ],\n        });\n      },\n    });\n  }\n\n  setValue(value: string) {\n    this._field.setValue(value);\n  }\n\n  setState(state: FieldState): void {\n    this._field.setState(state);\n  }\n\n  reset() {\n    this._field.reset();\n  }\n}\n","import { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { AbstractField } from '../base/abstract-field';\nimport { AsyncDualFieldStateControlFn } from './control-functions/dual-fields/async-dual-field-state-control-fn.type';\nimport { AsyncDualFieldValueControlFn } from './control-functions/dual-fields/async-dual-field-value-control-fn.type';\nimport { SyncDualFieldStateControlFn } from './control-functions/dual-fields/sync-dual-field-state-control-fn.type';\nimport { SyncDualFieldValueControlFn } from './control-functions/dual-fields/sync-dual-field-value-control-fn.type';\nimport { AsyncFieldStateControlFn } from './control-functions/fields/async-field-state-control-fn.type';\nimport { AsyncFieldValueControlFn } from './control-functions/fields/async-field-value-control-fn.type';\nimport { SyncFieldStateControlFn } from './control-functions/fields/sync-field-state-control-fn.type';\nimport { SyncFieldValueControlFn } from './control-functions/fields/sync-field-value-control-fn.type';\nimport { StateControlledDualField } from './state-controlled-dual-field';\nimport { StateControlledField } from './state-controlled-field';\nimport { ValueControlledDualField } from './value-controlled-dual-field';\nimport { ValueControlledField } from './value-controlled-field';\n\ninterface ControlledFieldFactory {\n  createStateControlledFieldWithSyncAdapter(\n    baseField: AbstractField,\n    stateControlFn: SyncDualFieldStateControlFn | SyncFieldStateControlFn,\n    fields: FormElementDictionary,\n  ): StateControlledDualField | StateControlledField;\n\n  createStateControlledFieldWithAsyncAdapter(\n    baseField: AbstractField,\n    stateControlFn: AsyncDualFieldStateControlFn | AsyncFieldStateControlFn,\n    fields: FormElementDictionary,\n  ): StateControlledDualField | StateControlledField;\n\n  createValueControlledFieldWithSyncAdapter(\n    baseField: AbstractField,\n    valueControlFn: SyncDualFieldValueControlFn | SyncFieldValueControlFn,\n    fields: FormElementDictionary,\n  ): ValueControlledDualField | ValueControlledField;\n\n  createValueControlledFieldWithAsyncAdapter(\n    baseField: AbstractField,\n    valueControlFn: AsyncDualFieldValueControlFn | AsyncFieldValueControlFn,\n    fields: FormElementDictionary,\n  ): ValueControlledDualField | ValueControlledField;\n}\nconst ControlledFieldFactoryKey = 'ControlledFieldFactory';\ntype ControlledFieldFactoryKeyType = typeof ControlledFieldFactoryKey;\n\nexport {\n  ControlledFieldFactoryKey,\n  type ControlledFieldFactory,\n  type ControlledFieldFactoryKeyType,\n};\n","import { Observable } from 'rxjs';\nimport { AsyncAdapterFn } from '../../adapters/async-adapter-fn.type';\nimport { SyncAdapterFn } from '../../adapters/sync-adapter-fn.type';\nimport { AggregatedStateChanges } from '../../aggregators/aggregated-state-changes.interface';\nimport {\n  FinalizerFnFactory,\n  FinalizerFnFactoryKey,\n  FinalizerFnFactoryKeyType,\n} from './finalizer-fn-factory.interface';\nimport {\n  FinalizerValidityTranslator,\n  FinalizerValidityTranslatorKey,\n} from '../finalizer-validity-translator.interface';\nimport { FinalizerState } from '../../state/finalizer-state.interface';\nimport { FinalizerValidity } from '../../state/finalizer-validity.enum';\nimport { Validity } from '../../state/validity.enum';\nimport { SyncBaseFinalizerFn } from './sync-base-finalizer-fn.type';\nimport { AsyncBaseFinalizerFn } from './async-base-finalizer-fn.type';\nimport { logErrorInDevMode } from '../../util/log-error-in-dev-mode';\nimport { autowire } from 'undecorated-di';\n\nclass FinalizerFnFactoryImpl implements FinalizerFnFactory {\n  _finalizerValidityTranslator: FinalizerValidityTranslator;\n\n  constructor(finalizerValidityTranslator: FinalizerValidityTranslator) {\n    this._finalizerValidityTranslator = finalizerValidityTranslator;\n  }\n\n  createSyncFinalizerFn(\n    baseAdapterFn: SyncBaseFinalizerFn,\n  ): SyncAdapterFn<FinalizerState> {\n    return (aggregatedStateChanges: AggregatedStateChanges) => {\n      let value: any;\n      let error: any;\n\n      //attempt to create the value first so that fields are accessed and hasOmittedFields, overallValidity\n      //can be accessed the first time\n      try {\n        value = baseAdapterFn(aggregatedStateChanges);\n      } catch (e) {\n        logErrorInDevMode(e);\n        error = e;\n      }\n\n      if (aggregatedStateChanges.hasOmittedFields()) {\n        return { finalizerValidity: FinalizerValidity.VALID_FINALIZED };\n      }\n      const overallValidity = aggregatedStateChanges.overallValidity();\n      if (overallValidity < Validity.VALID_FINALIZABLE) {\n        return {\n          finalizerValidity:\n            this._finalizerValidityTranslator.translateValidityToFinalizerValidity(\n              overallValidity,\n            ),\n        };\n      }\n      if (error) {\n        return {\n          finalizerValidity: FinalizerValidity.FINALIZER_ERROR,\n        };\n      } else {\n        return {\n          value,\n          finalizerValidity: FinalizerValidity.VALID_FINALIZED,\n        };\n      }\n    };\n  }\n\n  createAsyncFinalizerFn(\n    baseAdapterFn: AsyncBaseFinalizerFn,\n  ): AsyncAdapterFn<FinalizerState> {\n    return (aggregatedStateChanges: AggregatedStateChanges) => {\n      return new Observable<FinalizerState>(subscriber => {\n        //first attempt to create the promise so that hasOmittedFields and overallValidity can be accessed the first time\n        let promise: Promise<any> | undefined = undefined;\n        let error: any;\n\n        try {\n          promise = baseAdapterFn(aggregatedStateChanges);\n        } catch (e) {\n          error = e;\n        }\n\n        if (error) {\n          logErrorInDevMode(error);\n          subscriber.next({\n            finalizerValidity: FinalizerValidity.FINALIZER_ERROR,\n          });\n          subscriber.complete();\n        } else if (aggregatedStateChanges.hasOmittedFields()) {\n          subscriber.next({\n            finalizerValidity: FinalizerValidity.VALID_FINALIZED,\n          });\n          subscriber.complete();\n        } else if (\n          aggregatedStateChanges.overallValidity() < Validity.VALID_FINALIZABLE\n        ) {\n          subscriber.next({\n            finalizerValidity:\n              this._finalizerValidityTranslator.translateValidityToFinalizerValidity(\n                aggregatedStateChanges.overallValidity(),\n              ),\n          });\n        } else if (promise) {\n          subscriber.next({\n            finalizerValidity: FinalizerValidity.VALID_FINALIZING,\n          });\n          promise\n            .then(value => {\n              subscriber.next({\n                value,\n                finalizerValidity: FinalizerValidity.VALID_FINALIZED,\n              });\n              subscriber.complete();\n            })\n            .catch(e => {\n              logErrorInDevMode(e);\n              subscriber.next({\n                finalizerValidity: FinalizerValidity.FINALIZER_ERROR,\n              });\n              subscriber.complete();\n            });\n        } else {\n          throw new Error('Async finalizer function did not return a promise.');\n        }\n      });\n    };\n  }\n}\n\nconst FinalizerFnFactoryService = autowire<\n  FinalizerFnFactoryKeyType,\n  FinalizerFnFactory,\n  FinalizerFnFactoryImpl\n>(FinalizerFnFactoryImpl, FinalizerFnFactoryKey, [\n  FinalizerValidityTranslatorKey,\n]);\n\nexport { FinalizerFnFactoryImpl, FinalizerFnFactoryService };\n","import { AsyncBaseFinalizerFn } from './async-base-finalizer-fn.type';\nimport { AsyncFinalizerFn } from './async-finalizer-fn.type';\nimport { SyncBaseFinalizerFn } from './sync-base-finalizer-fn.type';\nimport { SyncFinalizerFn } from './sync-finalizer-fn.type';\n\ninterface FinalizerFnFactory {\n  createSyncFinalizerFn(baseAdapterFn: SyncBaseFinalizerFn): SyncFinalizerFn;\n  createAsyncFinalizerFn(baseAdapterFn: AsyncBaseFinalizerFn): AsyncFinalizerFn;\n}\nconst FinalizerFnFactoryKey = 'FinalizerFnFactory';\ntype FinalizerFnFactoryKeyType = typeof FinalizerFnFactoryKey;\n\nexport {\n  FinalizerFnFactoryKey,\n  type FinalizerFnFactory,\n  type FinalizerFnFactoryKeyType,\n};\n","import { FinalizerValidity } from '../state/finalizer-validity.enum';\nimport { Validity } from '../state/validity.enum';\n\nexport interface FinalizerValidityTranslator {\n  translateFinalizerValidityToValidity(\n    finalizerValidity: FinalizerValidity,\n  ): Validity;\n  translateValidityToFinalizerValidity(validity: Validity): FinalizerValidity;\n}\n\nexport const FinalizerValidityTranslatorKey = 'FinalizerValidityTranslator';\n\nexport type FinalizerValidityTranslatorKeyType =\n  typeof FinalizerValidityTranslatorKey;\n","import {\n  FinalizerValidityTranslator,\n  FinalizerValidityTranslatorKey,\n  FinalizerValidityTranslatorKeyType,\n} from './finalizer-validity-translator.interface';\nimport { FinalizerValidity } from '../state/finalizer-validity.enum';\nimport { Validity } from '../state/validity.enum';\nimport { autowire } from 'undecorated-di';\n\nclass FinalizerValidityTranslatorImpl implements FinalizerValidityTranslator {\n  translateFinalizerValidityToValidity(\n    finalizerValidity: FinalizerValidity,\n  ): Validity {\n    switch (finalizerValidity) {\n      case FinalizerValidity.FINALIZER_ERROR:\n        return Validity.ERROR;\n      case FinalizerValidity.FIELD_ERROR:\n        return Validity.ERROR;\n      case FinalizerValidity.FIELD_INVALID:\n        return Validity.INVALID;\n      case FinalizerValidity.FIELD_PENDING:\n        return Validity.PENDING;\n      case FinalizerValidity.FIELD_VALID_UNFINALIZABLE:\n        return Validity.VALID_UNFINALIZABLE;\n      case FinalizerValidity.VALID_FINALIZING:\n        return Validity.VALID_FINALIZABLE;\n      case FinalizerValidity.VALID_FINALIZED:\n        return Validity.VALID_FINALIZABLE;\n    }\n  }\n  translateValidityToFinalizerValidity(validity: Validity): FinalizerValidity {\n    let returnValue;\n    switch (validity) {\n      case Validity.ERROR:\n        returnValue = FinalizerValidity.FIELD_ERROR;\n        break;\n      case Validity.INVALID:\n        returnValue = FinalizerValidity.FIELD_INVALID;\n        break;\n      case Validity.PENDING:\n        returnValue = FinalizerValidity.FIELD_PENDING;\n        break;\n      case Validity.VALID_UNFINALIZABLE:\n        returnValue = FinalizerValidity.FIELD_VALID_UNFINALIZABLE;\n        break;\n      case Validity.VALID_FINALIZABLE:\n        returnValue = FinalizerValidity.VALID_FINALIZING;\n        break;\n    }\n    return returnValue;\n  }\n}\n\nconst FinalizerValidityTranslatorService = autowire<\n  FinalizerValidityTranslatorKeyType,\n  FinalizerValidityTranslator,\n  FinalizerValidityTranslatorImpl\n>(FinalizerValidityTranslatorImpl, FinalizerValidityTranslatorKey);\n\nexport { FinalizerValidityTranslatorImpl, FinalizerValidityTranslatorService };\n","import type { AggregatedStateChanges } from '../aggregators/aggregated-state-changes.interface';\nimport type { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport type { AggregatedStateChangesProxyProducer } from './aggregated-state-changes-proxy-producer.interface';\nimport type { FieldStateReducer } from '../reducers/field-state/field-state-reducer.interface';\nimport type { AnyState } from '../state/any-state.type';\n\nexport class AggregatedStateChangesProxyProducerImpl\n  implements AggregatedStateChangesProxyProducer\n{\n  readonly accessedFieldNames = new Set<string>();\n  readonly fieldStateReducer: FieldStateReducer;\n\n  constructor(fieldStateReducer: FieldStateReducer) {\n    this.fieldStateReducer = fieldStateReducer;\n  }\n\n  getProxy(fields: FormElementDictionary): AggregatedStateChanges {\n    const aggregatedState: {\n      [key: string]: AnyState;\n    } = {};\n    for (const key in fields) {\n      aggregatedState[key] = fields[key].state;\n    }\n\n    const fieldStateReducer = this.fieldStateReducer;\n    const accessedFieldNames = this.accessedFieldNames;\n\n    return new Proxy(aggregatedState, {\n      get(target, prop) {\n        if (prop === 'overallValidity') return () => fieldStateReducer.validity;\n        else if (prop === 'hasOmittedFields')\n          return () => fieldStateReducer.omit;\n        else {\n          const propName = prop.toString();\n          if (!(prop in fields) || propName === 'constructor')\n            return target[propName];\n\n          accessedFieldNames.add(propName);\n          const state = target[propName];\n          fieldStateReducer.updateTallies(propName, state);\n\n          return target[propName];\n        }\n      },\n    }) as AggregatedStateChanges;\n  }\n}\n","import { AggregatedStateChangesProxyProducer } from './aggregated-state-changes-proxy-producer.interface';\nimport {\n  ProxyProducerFactory,\n  ProxyProducerFactoryKey,\n  ProxyProducerFactoryKeyType,\n} from './proxy-producer-factory.interface';\nimport {\n  ReducerFactory,\n  ReducerFactoryKey,\n} from '../reducers/reducer-factory.interface';\nimport { AggregatedStateChangesProxyProducerImpl } from './aggregated-state-changes-proxy-producer-impl';\nimport { autowire } from 'undecorated-di';\n\nclass ProxyProducerFactoryImpl implements ProxyProducerFactory {\n  _reducerFactory: ReducerFactory;\n\n  constructor(reducerFactory: ReducerFactory) {\n    this._reducerFactory = reducerFactory;\n  }\n\n  createAggregatedStateChangesProxyProducer(): AggregatedStateChangesProxyProducer {\n    return new AggregatedStateChangesProxyProducerImpl(\n      this._reducerFactory.createFieldStateReducer(),\n    );\n  }\n}\n\nconst ProxyProducerFactoryService = autowire<\n  ProxyProducerFactoryKeyType,\n  ProxyProducerFactory,\n  ProxyProducerFactoryImpl\n>(ProxyProducerFactoryImpl, ProxyProducerFactoryKey, [ReducerFactoryKey]);\n\nexport { ProxyProducerFactoryImpl, ProxyProducerFactoryService };\n","import type { FieldStateReducer } from './field-state-reducer.interface';\nimport type { FieldState } from '../../state/field-state.interface';\nimport { ValidityReducer } from '../validity/validity-reducer.interface';\n\nexport class FieldStateReducerImpl implements FieldStateReducer {\n  _validityReducer: ValidityReducer;\n  _omittedFields = new Set<string>();\n\n  constructor(validityReducer: ValidityReducer) {\n    this._validityReducer = validityReducer;\n  }\n\n  get validity() {\n    return this._validityReducer.validity;\n  }\n\n  get omit() {\n    return this._omittedFields.size > 0;\n  }\n\n  updateTallies(fieldName: string, state: FieldState) {\n    const { validity, omit } = state;\n    this._validityReducer.updateTallies(fieldName, validity);\n    if (omit) this._omittedFields.add(fieldName);\n    else this._omittedFields.delete(fieldName);\n  }\n}\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { MultiInputValidatorValidityReducer } from './multi-input-validator-validity-reducer.interface';\nimport { Validity } from '../../state/validity.enum';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\nimport { ValidityReducer } from '../validity/validity-reducer.interface';\n\nexport class FinalizerFacingMultiInputValidatorReducer\n  implements MultiInputValidatorValidityReducer\n{\n  validityChanges: Subject<Validity>;\n  _validityReducer: ValidityReducer;\n  _multiInputValidators: Array<MultiInputValidator> = [];\n\n  get validity() {\n    return this._validityReducer.validity;\n  }\n\n  constructor(validityReducer: ValidityReducer) {\n    this._validityReducer = validityReducer;\n    this.validityChanges = new BehaviorSubject<Validity>(\n      this._validityReducer.validity,\n    );\n  }\n\n  addValidator(multiFieldValidator: MultiInputValidator): void {\n    const validatorId = String(this._multiInputValidators.length);\n    this._multiInputValidators.push(multiFieldValidator);\n    multiFieldValidator.overallValidityChanges.subscribe(\n      (validityChange: Validity) => {\n        this._validityReducer.updateTallies(validatorId, validityChange);\n        this.validityChanges.next(this._validityReducer.validity);\n      },\n    );\n  }\n}\n","import { FinalizerValidity } from '../../state/finalizer-validity.enum';\nimport type { FinalizerValidityReducer } from './finalizer-validity-reducer.interface';\n\nexport class FinalizerValidityReducerImpl implements FinalizerValidityReducer {\n  readonly _errantFinalizers = new Set<string>();\n  readonly _fieldErrorFinalizers = new Set<string>();\n  readonly _fieldInvalidFinalizers = new Set<string>();\n  readonly _fieldPendingFinalizers = new Set<string>();\n  readonly _fieldValidUnfinalizableFinalizers = new Set<string>();\n  readonly _finalizingFinalizers = new Set<string>();\n\n  get finalizerValidity() {\n    if (this._errantFinalizers.size > 0)\n      return FinalizerValidity.FINALIZER_ERROR;\n    else if (this._fieldErrorFinalizers.size > 0)\n      return FinalizerValidity.FIELD_ERROR;\n    else if (this._fieldInvalidFinalizers.size > 0)\n      return FinalizerValidity.FIELD_INVALID;\n    else if (this._fieldPendingFinalizers.size > 0)\n      return FinalizerValidity.FIELD_PENDING;\n    else if (this._fieldValidUnfinalizableFinalizers.size > 0)\n      return FinalizerValidity.FIELD_VALID_UNFINALIZABLE;\n    else if (this._finalizingFinalizers.size > 0)\n      return FinalizerValidity.VALID_FINALIZING;\n    return FinalizerValidity.VALID_FINALIZED;\n  }\n\n  updateTallies(\n    finalizerName: string,\n    finalizerValidity: FinalizerValidity,\n  ): void {\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.FINALIZER_ERROR,\n      this._errantFinalizers,\n    );\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.FIELD_ERROR,\n      this._fieldErrorFinalizers,\n    );\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.FIELD_INVALID,\n      this._fieldInvalidFinalizers,\n    );\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.FIELD_PENDING,\n      this._fieldPendingFinalizers,\n    );\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.FIELD_VALID_UNFINALIZABLE,\n      this._fieldValidUnfinalizableFinalizers,\n    );\n    this._updateTally(\n      finalizerName,\n      finalizerValidity,\n      FinalizerValidity.VALID_FINALIZING,\n      this._finalizingFinalizers,\n    );\n  }\n\n  _updateTally(\n    finalizerName: string,\n    actualValidity: FinalizerValidity,\n    expectedValidity: FinalizerValidity,\n    set: Set<string>,\n  ) {\n    if (actualValidity === expectedValidity) set.add(finalizerName);\n    else set.delete(finalizerName);\n  }\n}\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { MultiInputValidatorValidityReducer } from './multi-input-validator-validity-reducer.interface';\nimport { Validity } from '../../state/validity.enum';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\nimport { ValidityReducer } from '../validity/validity-reducer.interface';\n\nexport class UserFacingMultiInputValidatorReducer\n  implements MultiInputValidatorValidityReducer\n{\n  validityChanges: Subject<Validity>;\n  _validityReducer: ValidityReducer;\n  _multiInputValidators: Array<MultiInputValidator> = [];\n\n  get validity() {\n    return this._validityReducer.validity;\n  }\n\n  constructor(validityReducer: ValidityReducer) {\n    this._validityReducer = validityReducer;\n    this.validityChanges = new BehaviorSubject<Validity>(\n      this._validityReducer.validity,\n    );\n  }\n\n  addValidator(multiFieldValidator: MultiInputValidator): void {\n    const validatorId = String(this._multiInputValidators.length);\n    this._multiInputValidators.push(multiFieldValidator);\n    multiFieldValidator.calculatedValidityChanges.subscribe(\n      (validityChange: Validity) => {\n        this._validityReducer.updateTallies(validatorId, validityChange);\n        this.validityChanges.next(this._validityReducer.validity);\n      },\n    );\n  }\n}\n","import { Validity } from '../../state/validity.enum';\n\nexport class ValidityReducerImpl {\n  readonly _errantFields = new Set<string>();\n  readonly _invalidFields = new Set<string>();\n  readonly _pendingFields = new Set<string>();\n  readonly _validUnfinalizableFields = new Set<string>();\n\n  get validity() {\n    if (this._errantFields.size > 0) return Validity.ERROR;\n    if (this._invalidFields.size > 0) return Validity.INVALID;\n    if (this._pendingFields.size > 0) return Validity.PENDING;\n    if (this._validUnfinalizableFields.size > 0)\n      return Validity.VALID_UNFINALIZABLE;\n    return Validity.VALID_FINALIZABLE;\n  }\n\n  updateTallies(elementId: string, validity: Validity) {\n    this._updateTally(elementId, validity, Validity.ERROR, this._errantFields);\n    this._updateTally(\n      elementId,\n      validity,\n      Validity.INVALID,\n      this._invalidFields,\n    );\n    this._updateTally(\n      elementId,\n      validity,\n      Validity.PENDING,\n      this._pendingFields,\n    );\n    this._updateTally(\n      elementId,\n      validity,\n      Validity.VALID_UNFINALIZABLE,\n      this._validUnfinalizableFields,\n    );\n  }\n\n  _updateTally(\n    elementId: string,\n    actualValidity: Validity,\n    expectedValidity: Validity,\n    set: Set<string>,\n  ) {\n    if (actualValidity === expectedValidity) set.add(elementId);\n    else set.delete(elementId);\n  }\n}\n","import { FieldStateReducer } from './field-state/field-state-reducer.interface';\nimport { FinalizerValidityReducer } from './finalizer-validity/finalizer-validity-reducer.interface';\nimport { MultiInputValidatorValidityReducer } from './multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\nimport {\n  ReducerFactory,\n  ReducerFactoryKey,\n  ReducerFactoryKeyType,\n} from './reducer-factory.interface';\nimport { ValidityReducer } from './validity/validity-reducer.interface';\nimport { FieldStateReducerImpl } from './field-state/field-state-reducer-impl';\nimport { FinalizerFacingMultiInputValidatorReducer } from './multi-input-validator-validity/finalizer-facing-multi-input-validator-reducer';\nimport { FinalizerValidityReducerImpl } from './finalizer-validity/finalizer-validity-reducer-impl';\nimport { UserFacingMultiInputValidatorReducer } from './multi-input-validator-validity/user-facing-multi-input-validator-reducer';\nimport { ValidityReducerImpl } from './validity/validity-reducer-impl';\nimport { autowire } from 'undecorated-di';\n\nclass ReducerFactoryImpl implements ReducerFactory {\n  createFieldStateReducer(): FieldStateReducer {\n    return new FieldStateReducerImpl(this.createValidityReducer());\n  }\n  createFinalizerValidityReducer(): FinalizerValidityReducer {\n    return new FinalizerValidityReducerImpl();\n  }\n  createUserMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer {\n    return new UserFacingMultiInputValidatorReducer(\n      this.createValidityReducer(),\n    );\n  }\n  createFinalizerFacingMultiInputValidatorValidityReducer(): MultiInputValidatorValidityReducer {\n    return new FinalizerFacingMultiInputValidatorReducer(\n      this.createValidityReducer(),\n    );\n  }\n  createValidityReducer(): ValidityReducer {\n    return new ValidityReducerImpl();\n  }\n}\n\nconst ReducerFactoryService = autowire<\n  ReducerFactoryKeyType,\n  ReducerFactory,\n  ReducerFactoryImpl\n>(ReducerFactoryImpl, ReducerFactoryKey);\n\nexport { ReducerFactoryImpl, ReducerFactoryService };\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BehaviorSubject, Observer, Subscription } from 'rxjs';\nimport { OnInitialSubscriptionHandlingBehaviorSubject } from './on-initial-subscription-handling-behavior-subject.interface';\nimport { OneTimeEventEmitter } from '../emitters/one-time-event-emitter.interface';\n\nexport class OnInitialSubscriptionHandlingBehaviorSubjectImpl<T>\n  extends BehaviorSubject<T>\n  implements OnInitialSubscriptionHandlingBehaviorSubject<T>\n{\n  readonly _onInitialSubscriptionEventEmitter: OneTimeEventEmitter;\n\n  constructor(\n    initialValue: T,\n    onInitialSubscriptionEventEmitter: OneTimeEventEmitter,\n  ) {\n    super(initialValue);\n    this._onInitialSubscriptionEventEmitter = onInitialSubscriptionEventEmitter;\n  }\n\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null,\n  ): Subscription {\n    let subscription: Subscription;\n    if (observerOrNext) {\n      if (typeof observerOrNext === 'function')\n        subscription = super.subscribe(observerOrNext, error, complete);\n      else subscription = super.subscribe(observerOrNext);\n    } else subscription = super.subscribe();\n    this._onInitialSubscriptionEventEmitter.triggerEvent();\n    return subscription;\n  }\n\n  onInitialSubscription(cb: () => void): void {\n    this._onInitialSubscriptionEventEmitter.onEvent(cb);\n  }\n}\n","import {\n  EmitterFactory,\n  EmitterFactoryKey,\n} from '../emitters/emitter-factory.interface';\nimport { OnInitialSubscriptionHandlingBehaviorSubject } from './on-initial-subscription-handling-behavior-subject.interface';\nimport {\n  SubjectFactory,\n  SubjectFactoryKey,\n  SubjectFactoryKeyType,\n} from './subject-factory.interface';\nimport { OnInitialSubscriptionHandlingBehaviorSubjectImpl } from './on-initial-subscription-handling-behavior-subject-impl';\nimport { autowire } from 'undecorated-di';\n\nclass SubjectFactoryImpl implements SubjectFactory {\n  _emitterFactory: EmitterFactory;\n\n  constructor(emitterFactory: EmitterFactory) {\n    this._emitterFactory = emitterFactory;\n  }\n\n  createOnInitialSubscriptionHandlingBehaviorSubject<T>(\n    initialValue: T,\n  ): OnInitialSubscriptionHandlingBehaviorSubject<T> {\n    return new OnInitialSubscriptionHandlingBehaviorSubjectImpl(\n      initialValue,\n      this._emitterFactory.createOneTimeEventEmitter(),\n    );\n  }\n}\n\nconst SubjectFactoryService = autowire<\n  SubjectFactoryKeyType,\n  SubjectFactory,\n  SubjectFactoryImpl\n>(SubjectFactoryImpl, SubjectFactoryKey, [EmitterFactoryKey]);\n\nexport { SubjectFactoryImpl, SubjectFactoryService };\n","import { Observable, Subscriber, Subscription, from } from 'rxjs';\nimport { Validity } from '../../state/validity.enum';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport type { AsyncValidator } from '../async-validator.type';\nimport type { SingleInputValidatorSuite } from './single-input-validator-suite.interface';\nimport type { ValidatorSuiteResult } from '../validator-suite-result.interface';\nimport type { ValidatorSuiteResultsObject } from '../validator-suite-results-object.interface';\nimport type { ValidatorResult } from '../validator-result.interface';\nimport { logErrorInDevMode } from '../../util/log-error-in-dev-mode';\nimport { config } from '../../../config';\n\ntype ValidatorSubscriptionMap = {\n  [key: number]: Subscription;\n};\n\nexport class AsyncSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly _validators: Array<AsyncValidator<T>>;\n  readonly _pendingValidatorMessage: string;\n  _validatorSubscriptions: ValidatorSubscriptionMap = {};\n\n  constructor(\n    validators: Array<AsyncValidator<T>>,\n    pendingValidatorMessage: string,\n  ) {\n    this._validators = validators;\n    this._pendingValidatorMessage = pendingValidatorMessage;\n  }\n\n  evaluate(value: T) {\n    this._unsubscribeAll();\n    const result: ValidatorSuiteResultsObject<T> = {\n      syncResult: {\n        value,\n        validity: Validity.PENDING,\n        messages: [\n          {\n            type: MessageType.PENDING,\n            text: this._pendingValidatorMessage,\n          },\n        ],\n      },\n    };\n    result.observable = new Observable<ValidatorSuiteResult<T>>(subscriber => {\n      const observableResult: ValidatorSuiteResult<T> = {\n        value,\n        validity: Validity.VALID_FINALIZABLE,\n        messages: [],\n      };\n      for (\n        let validatorId = 0;\n        validatorId < this._validators.length;\n        validatorId++\n      ) {\n        const validator = this._validators[validatorId];\n        try {\n          //as the validator function is user-defined, it may throw errors even before the promise rejects\n          const promise = validator(value);\n          const subscription = from(promise).subscribe(\n            this._createValidatorObserver(\n              observableResult,\n              subscriber,\n              validatorId,\n            ),\n          );\n          this._validatorSubscriptions[validatorId] = subscription;\n        } catch (e) {\n          this._createValidatorObserverErrorMethod(\n            observableResult,\n            subscriber,\n          )(e);\n        }\n      }\n    });\n    return result;\n  }\n\n  _createValidatorObserver(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n    validatorId: number,\n  ) {\n    return {\n      next: this._createValidatorObserverNextMethod(\n        observableResult,\n        outerSubscriber,\n        validatorId,\n      ),\n      error: this._createValidatorObserverErrorMethod(\n        observableResult,\n        outerSubscriber,\n      ),\n    };\n  }\n\n  _createValidatorObserverNextMethod(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n    validatorId: number,\n  ) {\n    const nextMethod = (next: ValidatorResult) => {\n      const { isValid, message: messageTxt } = next;\n      if (!isValid) {\n        this._unsubscribeAll();\n        observableResult.validity = Validity.INVALID;\n        if (messageTxt) {\n          observableResult.messages.push({\n            type: MessageType.INVALID,\n            text: messageTxt,\n          });\n        }\n        outerSubscriber.next(observableResult);\n        outerSubscriber.complete();\n      } else {\n        if (messageTxt) {\n          observableResult.messages.push({\n            type: MessageType.VALID,\n            text: messageTxt,\n          });\n        }\n        this._unsubscribeById(validatorId);\n        if (this._allValidatorsCompleted()) {\n          outerSubscriber.next(observableResult);\n          outerSubscriber.complete();\n        }\n      }\n    };\n    return nextMethod;\n  }\n\n  _createValidatorObserverErrorMethod(\n    observableResult: ValidatorSuiteResult<T>,\n    outerSubscriber: Subscriber<ValidatorSuiteResult<T>>,\n  ) {\n    const errorMethod = (e: any) => {\n      this._unsubscribeAll();\n      logErrorInDevMode(e);\n      observableResult.validity = Validity.ERROR;\n      observableResult.messages.push({\n        type: MessageType.ERROR,\n        text: config.globalMessages.singleFieldValidationError,\n      });\n      outerSubscriber.next(observableResult);\n      outerSubscriber.complete();\n    };\n    return errorMethod;\n  }\n\n  _unsubscribeAll() {\n    for (const key in this._validatorSubscriptions) {\n      this._validatorSubscriptions[key].unsubscribe();\n    }\n    this._validatorSubscriptions = {};\n  }\n\n  _unsubscribeById(validatorId: number) {\n    this._validatorSubscriptions[validatorId].unsubscribe();\n    delete this._validatorSubscriptions[validatorId];\n  }\n\n  _allValidatorsCompleted() {\n    return Object.keys(this._validatorSubscriptions).length === 0;\n  }\n}\n","import { AsyncSingleInputValidatorSuite } from './async-single-input-validator-suite';\nimport { SyncSingleInputValidatorSuite } from './sync-single-input-validator-suite';\nimport { Validity } from '../../state/validity.enum';\nimport type { SingleInputValidatorSuite } from './single-input-validator-suite.interface';\nimport type { ValidatorSuiteResultsObject } from '../validator-suite-results-object.interface';\n\nexport class HybridSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly _syncValidatorSuite: SyncSingleInputValidatorSuite<T>;\n  readonly _asyncValidatorSuite: AsyncSingleInputValidatorSuite<T>;\n  constructor(\n    syncValidatorSuite: SyncSingleInputValidatorSuite<T>,\n    asyncValidatorSuite: AsyncSingleInputValidatorSuite<T>,\n  ) {\n    this._syncValidatorSuite = syncValidatorSuite;\n    this._asyncValidatorSuite = asyncValidatorSuite;\n  }\n\n  evaluate(value: T) {\n    const result: ValidatorSuiteResultsObject<T> =\n      this._syncValidatorSuite.evaluate(value);\n\n    if (result.syncResult.validity <= Validity.INVALID) return result;\n\n    const asyncResult = this._asyncValidatorSuite.evaluate(value);\n\n    return {\n      syncResult: {\n        value: asyncResult.syncResult.value,\n        validity: asyncResult.syncResult.validity,\n        messages: [\n          ...result.syncResult.messages,\n          ...asyncResult.syncResult.messages,\n        ],\n      },\n      observable: asyncResult.observable,\n    };\n  }\n}\n","import { Validity } from '../../state/validity.enum';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { config } from '../../../config';\nimport { logErrorInDevMode } from '../../util/log-error-in-dev-mode';\nimport type { SingleInputValidatorSuite } from './single-input-validator-suite.interface';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorSuiteResult } from '../validator-suite-result.interface';\n\nexport class SyncSingleInputValidatorSuite<T>\n  implements SingleInputValidatorSuite<T>\n{\n  readonly _validators: Array<SyncValidator<T>>;\n\n  constructor(validators: Array<SyncValidator<T>>) {\n    this._validators = validators;\n  }\n\n  evaluate(value: T) {\n    return {\n      syncResult: this._evaluateSync(value),\n    };\n  }\n\n  _evaluateSync(value: T) {\n    const result: ValidatorSuiteResult<T> = {\n      value,\n      validity: Validity.VALID_FINALIZABLE,\n      messages: [],\n    };\n    try {\n      for (const validator of this._validators) {\n        const { isValid, message: messageTxt } = validator(value);\n        if (!isValid) result.validity = Validity.INVALID;\n        if (messageTxt) {\n          result.messages.push({\n            type: isValid ? MessageType.VALID : MessageType.INVALID,\n            text: messageTxt,\n          });\n        }\n      }\n    } catch (e) {\n      logErrorInDevMode(e);\n      result.validity = Validity.ERROR;\n      result.messages.push({\n        type: MessageType.ERROR,\n        text: config.globalMessages.singleFieldValidationError,\n      });\n    }\n    return result;\n  }\n}\n","import { AsyncValidator } from '../async-validator.type';\nimport {\n  SingleInputValidatorSuiteFactoryKey,\n  SingleInputValidatorSuiteFactoryKeyType,\n  SingleInputValidatorSuiteFactory,\n} from './single-input-validator-suite-factory.interface';\nimport { SingleInputValidatorSuite } from './single-input-validator-suite.interface';\nimport { SyncValidator } from '../sync-validator.type';\nimport { config } from '../../../config';\nimport { AsyncSingleInputValidatorSuite } from './async-single-input-validator-suite';\nimport { HybridSingleInputValidatorSuite } from './hybrid-single-input-validator-suite';\nimport { SyncSingleInputValidatorSuite } from './sync-single-input-validator-suite';\nimport { autowire } from 'undecorated-di';\n\nclass SingleInputValidatorSuiteFactoryImpl\n  implements SingleInputValidatorSuiteFactory\n{\n  createSingleInputValidatorSuite<T>(\n    syncValidators: SyncValidator<T>[],\n    asyncValidators: AsyncValidator<T>[],\n    pendingAsyncValidatorMessage: string = config.globalMessages\n      .pendingAsyncValidatorSuite,\n  ): SingleInputValidatorSuite<T> {\n    const syncValidatorSuite = new SyncSingleInputValidatorSuite(\n      syncValidators,\n    );\n    if (asyncValidators.length > 0) {\n      const asyncValidatorSuite = new AsyncSingleInputValidatorSuite(\n        asyncValidators,\n        pendingAsyncValidatorMessage,\n      );\n      if (syncValidators.length > 0)\n        return new HybridSingleInputValidatorSuite(\n          syncValidatorSuite,\n          asyncValidatorSuite,\n        );\n      else return asyncValidatorSuite;\n    } else return syncValidatorSuite;\n  }\n}\n\nconst SingleInputValidatorSuiteFactoryService = autowire<\n  SingleInputValidatorSuiteFactoryKeyType,\n  SingleInputValidatorSuiteFactory,\n  SingleInputValidatorSuiteFactoryImpl\n>(SingleInputValidatorSuiteFactoryImpl, SingleInputValidatorSuiteFactoryKey);\n\nexport {\n  SingleInputValidatorSuiteFactoryImpl,\n  SingleInputValidatorSuiteFactoryService,\n};\n","import { InsertionOrderHeap } from './insertion-order-heap.interface';\n\ninterface InsertionOrderHeapFactory {\n  createInsertionOrderHeap(): InsertionOrderHeap;\n}\nconst InsertionOrderHeapFactoryKey = 'InsertionOrderHeapFactory';\ntype InsertionOrderHeapFactoryKeyType = typeof InsertionOrderHeapFactoryKey;\n\nexport {\n  InsertionOrderHeapFactoryKey,\n  type InsertionOrderHeapFactory,\n  type InsertionOrderHeapFactoryKeyType,\n};\n","import {\n  InsertionOrderHeapFactoryKey,\n  type InsertionOrderHeapFactory,\n  type InsertionOrderHeapFactoryKeyType,\n} from './insertion-order-heap-factory.interface';\nimport { autowire } from 'undecorated-di';\nimport { InsertionOrderHeap } from './insertion-order-heap.interface';\nimport { InsertionOrderHeapImpl } from './insertion-order-heap-impl';\n\nclass InsertionOrderHeapFactoryImpl implements InsertionOrderHeapFactory {\n  createInsertionOrderHeap(): InsertionOrderHeap {\n    return new InsertionOrderHeapImpl();\n  }\n}\n\nconst InsertionOrderHeapFactoryService = autowire<\n  InsertionOrderHeapFactoryKeyType,\n  InsertionOrderHeapFactory,\n  InsertionOrderHeapFactoryImpl\n>(InsertionOrderHeapFactoryImpl, InsertionOrderHeapFactoryKey);\n\nexport { InsertionOrderHeapFactoryImpl, InsertionOrderHeapFactoryService };\n","import { InsertionOrderHeap } from './insertion-order-heap.interface';\n\ninterface HeapElement {\n  readonly priorityId: number;\n  readonly value: string;\n}\n\ninterface ElementDictionaryValue {\n  readonly priorityId: number;\n  currentHeapIndex: number;\n}\n\nexport class InsertionOrderHeapImpl implements InsertionOrderHeap {\n  _heap: Array<HeapElement> = [];\n  _elementDictionary: {\n    [key: string]: ElementDictionaryValue;\n  } = {};\n  _currentPriorityId = 0;\n\n  get size() {\n    return this._heap.length;\n  }\n\n  get topValue(): string | undefined {\n    return this._heap[0]?.value;\n  }\n\n  addValue(value: string) {\n    const elementDictionaryKey = value;\n    if (!(elementDictionaryKey in this._elementDictionary)) {\n      this._elementDictionary[elementDictionaryKey] = {\n        priorityId: this._currentPriorityId++,\n        currentHeapIndex: -1,\n      };\n    }\n\n    const dictionaryValue = this._elementDictionary[elementDictionaryKey];\n\n    //if element is already in the heap, there is no need to add it, so return\n    if (dictionaryValue.currentHeapIndex >= 0) return;\n\n    const heapElement: HeapElement = {\n      priorityId: dictionaryValue.priorityId,\n      value: value,\n    };\n    this._addHeapElement(heapElement);\n  }\n\n  removeValue(value: string) {\n    const heapIndex = this._elementDictionary[value].currentHeapIndex;\n    this._removeHeapElementAtIndex(heapIndex);\n  }\n\n  _addHeapElement(heapElement: HeapElement) {\n    this._heap.push(heapElement);\n    const heapIndex = this.size - 1;\n    this._elementDictionary[heapElement.value].currentHeapIndex = heapIndex;\n    this._heapifyUp(heapIndex);\n  }\n\n  _removeHeapElementAtIndex(heapIndex: number) {\n    //if heap is empty, or the element does not exist in the heap, return\n    if (this.size === 0 || heapIndex === -1) return;\n\n    if (heapIndex === this.size - 1) {\n      const removedElement = this._heap[heapIndex];\n      this._heap.pop();\n      this._elementDictionary[removedElement.value].currentHeapIndex = -1;\n    } else {\n      const removedElement = this._heap[heapIndex];\n      const elevatedElement = (this._heap[heapIndex] =\n        this._heap[this.size - 1]);\n      this._elementDictionary[removedElement.value].currentHeapIndex = -1;\n      this._elementDictionary[elevatedElement.value].currentHeapIndex =\n        heapIndex;\n      this._heapifyDown(heapIndex);\n    }\n  }\n\n  _heapifyDown(heapIndex: number) {\n    const _leftChild = this._leftChild(heapIndex);\n    const _rightChild = this._rightChild(heapIndex);\n    let smallest = heapIndex;\n\n    if (\n      _leftChild < this.size &&\n      this._compareHeapElements(this._heap[_leftChild], this._heap[smallest]) < 0\n    ) {\n      smallest = _leftChild;\n    }\n    if (\n      _rightChild < this.size &&\n      this._compareHeapElements(this._heap[_rightChild], this._heap[smallest]) < 0\n    ) {\n      smallest = _rightChild;\n    }\n    if (smallest != heapIndex) {\n      const element = this._heap[heapIndex];\n      const smallestElement = this._heap[smallest];\n\n      this._elementDictionary[element.value].currentHeapIndex = smallest;\n      this._elementDictionary[smallestElement.value].currentHeapIndex =\n        heapIndex;\n\n      this._heap[heapIndex] = smallestElement;\n      this._heap[smallest] = element;\n\n      this._heapifyDown(smallest);\n    }\n  }\n\n  _heapifyUp(heapIndex: number) {\n    while (\n      heapIndex != 0 &&\n      this._compareHeapElements(\n        this._heap[this._parent(heapIndex)],\n        this._heap[heapIndex],\n      ) > 0\n    ) {\n      const temp = this._heap[this._parent(heapIndex)];\n      this._heap[this._parent(heapIndex)] = this._heap[heapIndex];\n      this._heap[heapIndex] = temp;\n\n      this._elementDictionary[\n        this._heap[this._parent(heapIndex)].value\n      ].currentHeapIndex = this._parent(heapIndex);\n      this._elementDictionary[this._heap[heapIndex].value].currentHeapIndex =\n        heapIndex;\n\n      heapIndex = this._parent(heapIndex);\n    }\n  }\n\n  _parent(heapIndex: number) {\n    return Math.floor((heapIndex - 1) / 2);\n  }\n\n  _leftChild(heapIndex: number) {\n    return heapIndex * 2 + 1;\n  }\n\n  _rightChild(heapIndex: number) {\n    return heapIndex * 2 + 2;\n  }\n\n  _compareHeapElements(a: HeapElement, b: HeapElement) {\n    return a.priorityId - b.priorityId;\n  }\n}\n","import { FirstNonValidFormElementTracker } from './first-nonvalid-form-element-tracker.interface';\n\ninterface TrackerFactory {\n  createFirstNonValidFormElementTracker(): FirstNonValidFormElementTracker;\n}\nconst TrackerFactoryKey = 'TrackerFactory';\ntype TrackerFactoryKeyType = typeof TrackerFactoryKey;\n\nexport { TrackerFactoryKey, type TrackerFactory, type TrackerFactoryKeyType };\n","import { BehaviorSubject, Subject } from 'rxjs';\nimport { StatefulFormElement } from '../form-elements/stateful-form-element.interface';\nimport { FirstNonValidFormElementTracker } from './first-nonvalid-form-element-tracker.interface';\nimport { InsertionOrderHeap } from '../insertion-order-heap/insertion-order-heap.interface';\nimport { Validity } from '../state/validity.enum';\n\nexport class FirstNonValidFormElementTrackerImpl\n  implements FirstNonValidFormElementTracker\n{\n  firstNonValidFormElementChanges: Subject<string | undefined>;\n  _nonValidFormElementHeap: InsertionOrderHeap;\n\n  constructor(nonValidFormElementHeap: InsertionOrderHeap) {\n    this._nonValidFormElementHeap = nonValidFormElementHeap;\n    this.firstNonValidFormElementChanges = new BehaviorSubject(\n      this.firstNonValidFormElement,\n    );\n  }\n\n  get firstNonValidFormElement(): string | undefined {\n    return this._nonValidFormElementHeap.topValue;\n  }\n\n  trackFormElementValidity(\n    formElementKey: string,\n    formElement: StatefulFormElement<any>,\n  ): void {\n    //first add it as a key to the dictionary\n    this._nonValidFormElementHeap.addValue(formElementKey);\n    //then subscribe to its state--remove it when valid, and add it when not valid\n    formElement.stateChanges.subscribe(({ validity }) => {\n      if (validity < Validity.VALID_FINALIZABLE) {\n        this._nonValidFormElementHeap.addValue(formElementKey);\n      } else this._nonValidFormElementHeap.removeValue(formElementKey);\n      this.firstNonValidFormElementChanges.next(this.firstNonValidFormElement);\n    });\n  }\n}\n","import {\n  TrackerFactory,\n  TrackerFactoryKey,\n  TrackerFactoryKeyType,\n} from './tracker-factory.interface';\nimport {\n  type InsertionOrderHeapFactory,\n  InsertionOrderHeapFactoryKey,\n} from '../insertion-order-heap/insertion-order-heap-factory.interface';\nimport { FirstNonValidFormElementTracker } from './first-nonvalid-form-element-tracker.interface';\nimport { FirstNonValidFormElementTrackerImpl } from './first-nonvalid-form-element-tracker-impl';\nimport { autowire } from 'undecorated-di';\n\nclass TrackerFactoryImpl implements TrackerFactory {\n  _insertionOrderHeapFactory: InsertionOrderHeapFactory;\n\n  constructor(insertionOrderHeapFactory: InsertionOrderHeapFactory) {\n    this._insertionOrderHeapFactory = insertionOrderHeapFactory;\n  }\n\n  createFirstNonValidFormElementTracker(): FirstNonValidFormElementTracker {\n    return new FirstNonValidFormElementTrackerImpl(\n      this._insertionOrderHeapFactory.createInsertionOrderHeap(),\n    );\n  }\n}\n\nconst TrackerFactoryService = autowire<\n  TrackerFactoryKeyType,\n  TrackerFactory,\n  TrackerFactoryImpl\n>(TrackerFactoryImpl, TrackerFactoryKey, [InsertionOrderHeapFactoryKey]);\n\nexport { TrackerFactoryImpl, TrackerFactoryService };\n","import { autowire } from 'undecorated-di';\nimport { AggregatedStateChanges } from '../../aggregators/aggregated-state-changes.interface';\nimport { config } from '../../../config';\nimport { AsyncValidator } from '../async-validator.type';\nimport { SyncValidator } from '../sync-validator.type';\nimport { AsyncMultiInputValidator } from './async-multi-input-validator';\nimport {\n  MultiInputValidatorFactory,\n  MultiInputValidatorFactoryKey,\n  MultiInputValidatorFactoryKeyType,\n} from './multi-input-validator-factory.interface';\nimport { MultiInputValidator } from './multi-input-validator.interface';\nimport { SyncMultiInputValidator } from './sync-multi-input-validator';\nimport {\n  AggregatorFactory,\n  AggregatorFactoryKey,\n} from '../../aggregators/aggregator-factory.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\n\nclass MultiInputValidatorFactoryImpl implements MultiInputValidatorFactory {\n  _aggregatorFactory: AggregatorFactory;\n\n  constructor(aggregatorFactory: AggregatorFactory) {\n    this._aggregatorFactory = aggregatorFactory;\n  }\n\n  createSyncMultiInputValidator(\n    validator: SyncValidator<AggregatedStateChanges>,\n    fields: FormElementDictionary,\n  ): MultiInputValidator {\n    const multiFieldAggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new SyncMultiInputValidator(multiFieldAggregator, validator);\n  }\n  createAsyncMultiInputValidator(\n    validator: AsyncValidator<AggregatedStateChanges>,\n    fields: FormElementDictionary,\n    pendingMessage: string = config.globalMessages\n      .pendingAsyncMultiFieldValidator,\n  ): MultiInputValidator {\n    const multiFieldAggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new AsyncMultiInputValidator(\n      multiFieldAggregator,\n      validator,\n      pendingMessage,\n    );\n  }\n}\n\nconst MultiInputValidatorFactoryService = autowire<\n  MultiInputValidatorFactoryKeyType,\n  MultiInputValidatorFactory,\n  MultiInputValidatorFactoryImpl\n>(MultiInputValidatorFactoryImpl, MultiInputValidatorFactoryKey, [\n  AggregatorFactoryKey,\n]);\n\nexport { MultiInputValidatorFactoryImpl, MultiInputValidatorFactoryService };\n","import { ReplaySubject, Subject, Subscription, from } from 'rxjs';\nimport { AggregatedStateChanges } from '../../aggregators/aggregated-state-changes.interface';\nimport { MultiFieldAggregator } from '../../aggregators/multi-field-aggregator.interface';\nimport { OneTimeValueEmitter } from '../../emitters/one-time-value-emitter.interface';\nimport { MultiInputValidator } from './multi-input-validator.interface';\nimport { AsyncValidator } from '../async-validator.type';\nimport { Validity } from '../../state/validity.enum';\nimport { Message } from '../../state/messages/message.interface';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { logErrorInDevMode } from '../../util/log-error-in-dev-mode';\nimport { config } from '../../../config';\n\nexport class AsyncMultiInputValidator implements MultiInputValidator {\n  //messages, calculatedValidity, and overallValidityChanges all go to different destinations\n  readonly calculatedValidityChanges: Subject<Validity>;\n  readonly overallValidityChanges: Subject<Validity>;\n  readonly messageChanges: Subject<Message | null>;\n  readonly accessedFields: OneTimeValueEmitter<Set<string>>;\n  readonly _pendingMessage: string;\n  readonly _multiFieldAggregator: MultiFieldAggregator;\n  readonly _validator: AsyncValidator<AggregatedStateChanges>;\n  _validatorSubscription?: Subscription;\n  _firstRunCompleted = false;\n\n  constructor(\n    multiFieldAggregator: MultiFieldAggregator,\n    validator: AsyncValidator<AggregatedStateChanges>,\n    pendingMessage: string,\n  ) {\n    this._validator = validator;\n    this._multiFieldAggregator = multiFieldAggregator;\n    this._pendingMessage = pendingMessage;\n    this.accessedFields = multiFieldAggregator.accessedFields;\n    this.calculatedValidityChanges = new ReplaySubject<Validity>(1);\n    this.overallValidityChanges = new ReplaySubject<Validity>(1);\n    this.messageChanges = new ReplaySubject<Message | null>(1);\n    this._multiFieldAggregator.aggregateChanges.subscribe(\n      (aggregateChange: AggregatedStateChanges) => {\n        //unsubscribe from currently running validator\n        this._validatorSubscription &&\n          this._validatorSubscription.unsubscribe();\n        let observableResult;\n        let error;\n\n        if (!this._firstRunCompleted) {\n          try {\n            observableResult = from(this._validator(aggregateChange));\n          } catch (e) {\n            logErrorInDevMode(e);\n            error = e;\n          } finally {\n            this._firstRunCompleted = true;\n          }\n        }\n        //if there are omitted fields, this validator is effectively not checked\n        if (aggregateChange.hasOmittedFields()) {\n          this.calculatedValidityChanges.next(Validity.VALID_FINALIZABLE);\n          this.overallValidityChanges.next(Validity.VALID_FINALIZABLE);\n          this.messageChanges.next(null);\n        } else if (\n          aggregateChange.overallValidity() < Validity.VALID_FINALIZABLE\n        ) {\n          //if there are no omitted fields, but the overall validity is less than valid,\n          //calculatedValidity becomes effectively valid, meaning that for fields exposed to the end user, they will see\n          //the validity of each individual field if that is less than Validity.VALID_FINALIZABLE\n          this.calculatedValidityChanges.next(Validity.VALID_FINALIZABLE);\n          //overallValidity, however, emits the overall validity, meaning that finalizers won't run until overallValidity === Validity.VALID_FINALIZABLE\n          this.overallValidityChanges.next(aggregateChange.overallValidity());\n          this.messageChanges.next(null);\n        } else if (error) {\n          this.calculatedValidityChanges.next(Validity.ERROR);\n          this.overallValidityChanges.next(Validity.ERROR);\n          this.messageChanges.next({\n            type: MessageType.ERROR,\n            text: config.globalMessages.multiFieldValidationError,\n          });\n        } else {\n          this.calculatedValidityChanges.next(Validity.PENDING);\n          this.overallValidityChanges.next(Validity.PENDING);\n          this.messageChanges.next({\n            type: MessageType.PENDING, //\n            text: this._pendingMessage,\n          });\n          try {\n            if (!observableResult)\n              observableResult = from(this._validator(aggregateChange));\n            this._validatorSubscription = observableResult.subscribe({\n              next: result => {\n                const validity = result.isValid\n                  ? Validity.VALID_FINALIZABLE\n                  : Validity.INVALID;\n                this.calculatedValidityChanges.next(validity);\n                this.overallValidityChanges.next(validity);\n                if (result.message) {\n                  const message = {\n                    type: result.isValid\n                      ? MessageType.VALID\n                      : MessageType.INVALID,\n                    text: result.message,\n                  };\n                  this.messageChanges.next(message);\n                } else this.messageChanges.next(null);\n              },\n              error: e => {\n                logErrorInDevMode(e);\n                this.calculatedValidityChanges.next(Validity.ERROR);\n                this.overallValidityChanges.next(Validity.ERROR);\n                this.messageChanges.next({\n                  type: MessageType.ERROR,\n                  text: config.globalMessages.multiFieldValidationError,\n                });\n              },\n            });\n          } catch (e) {\n            logErrorInDevMode(e);\n            this.calculatedValidityChanges.next(Validity.ERROR);\n            this.overallValidityChanges.next(Validity.ERROR);\n            this.messageChanges.next({\n              type: MessageType.ERROR,\n              text: config.globalMessages.multiFieldValidationError,\n            });\n          }\n        }\n      },\n    );\n  }\n}\n","import { AggregatedStateChanges } from '../../aggregators/aggregated-state-changes.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { AsyncValidator } from '../async-validator.type';\nimport { SyncValidator } from '../sync-validator.type';\nimport { MultiInputValidator } from './multi-input-validator.interface';\n\ninterface MultiInputValidatorFactory {\n  createSyncMultiInputValidator(\n    validator: SyncValidator<AggregatedStateChanges>,\n    fields: FormElementDictionary,\n  ): MultiInputValidator;\n  createAsyncMultiInputValidator(\n    validator: AsyncValidator<AggregatedStateChanges>,\n    fields: FormElementDictionary,\n    pendingMessage: string,\n  ): MultiInputValidator;\n}\nconst MultiInputValidatorFactoryKey = 'MultiInputValidatorFactory';\ntype MultiInputValidatorFactoryKeyType = typeof MultiInputValidatorFactoryKey;\n\nexport {\n  MultiInputValidatorFactoryKey,\n  type MultiInputValidatorFactory,\n  type MultiInputValidatorFactoryKeyType,\n};\n","import { ReplaySubject, Subject } from 'rxjs';\nimport { AggregatedStateChanges } from '../../aggregators/aggregated-state-changes.interface';\nimport { MultiFieldAggregator } from '../../aggregators/multi-field-aggregator.interface';\nimport { OneTimeValueEmitter } from '../../emitters/one-time-value-emitter.interface';\nimport { MultiInputValidator } from './multi-input-validator.interface';\nimport { SyncValidator } from '../sync-validator.type';\nimport { Validity } from '../../state/validity.enum';\nimport { Message } from '../../state/messages/message.interface';\nimport { MessageType } from '../../state/messages/message-type.enum';\nimport { config } from '../../../config';\nimport { logErrorInDevMode } from '../../util/log-error-in-dev-mode';\n\nexport class SyncMultiInputValidator implements MultiInputValidator {\n  //messages, calculatedValidity, and overallValidityChanges all go to different destinations\n  readonly calculatedValidityChanges: Subject<Validity>;\n  readonly overallValidityChanges: Subject<Validity>;\n  readonly messageChanges: Subject<Message | null>;\n  readonly accessedFields: OneTimeValueEmitter<Set<string>>;\n  readonly _multiFieldAggregator: MultiFieldAggregator;\n  readonly _validator: SyncValidator<AggregatedStateChanges>;\n  _completedFirstRun = false;\n\n  constructor(\n    multiFieldAggregator: MultiFieldAggregator,\n    validator: SyncValidator<AggregatedStateChanges>,\n  ) {\n    this._validator = validator;\n    this._multiFieldAggregator = multiFieldAggregator;\n    this.accessedFields = multiFieldAggregator.accessedFields;\n    this.calculatedValidityChanges = new ReplaySubject<Validity>(1);\n    this.overallValidityChanges = new ReplaySubject<Validity>(1);\n    this.messageChanges = new ReplaySubject<Message | null>(1);\n    this._multiFieldAggregator.aggregateChanges.subscribe(\n      (aggregateChange: AggregatedStateChanges) => {\n        //first, run the validator so hasOmittedFields and overallValidity are accurate\n        let result;\n        if (!this._completedFirstRun) {\n          result = this._runValidator(aggregateChange);\n          this._completedFirstRun = true;\n        }\n        //if there are omitted fields, this validator is effectively not checked\n        if (aggregateChange.hasOmittedFields()) {\n          this.calculatedValidityChanges.next(Validity.VALID_FINALIZABLE);\n          this.overallValidityChanges.next(Validity.VALID_FINALIZABLE);\n          this.messageChanges.next(null);\n        } else if (\n          aggregateChange.overallValidity() < Validity.VALID_FINALIZABLE\n        ) {\n          //if there are no omitted fields, but the overall validity is less than valid,\n          //calculatedValidity becomes effectively valid, meaning that for fields exposed to the end user, they will see\n          //the validity of each individual field if that is less than Validity.VALID_FINALIZABLE\n          this.calculatedValidityChanges.next(Validity.VALID_FINALIZABLE);\n          //overallValidity, however, emits the overall validity, meaning that finalizers won't run until overallValidity === Validity.VALID_FINALIZABLE\n          this.overallValidityChanges.next(aggregateChange.overallValidity());\n          this.messageChanges.next(null);\n        } else if (result) {\n          this.calculatedValidityChanges.next(result.validity);\n          this.overallValidityChanges.next(result.validity);\n          this.messageChanges.next(result.message);\n        } else {\n          result = this._runValidator(aggregateChange);\n          this.calculatedValidityChanges.next(result.validity);\n          this.overallValidityChanges.next(result.validity);\n          this.messageChanges.next(result.message);\n        }\n      },\n    );\n  }\n\n  _runValidator(aggregateChange: AggregatedStateChanges): {\n    validity: Validity;\n    message: Message | null;\n  } {\n    try {\n      let message: Message | null;\n      const result = this._validator(aggregateChange);\n      const validity = result.isValid\n        ? Validity.VALID_FINALIZABLE\n        : Validity.INVALID;\n      if (result.message) {\n        message = {\n          type: result.isValid ? MessageType.VALID : MessageType.INVALID,\n          text: result.message,\n        };\n      } else message = null;\n      return {\n        validity,\n        message,\n      };\n    } catch (e) {\n      logErrorInDevMode(e);\n      return {\n        validity: Validity.ERROR,\n        message: {\n          type: MessageType.ERROR,\n          text: config.globalMessages.multiFieldValidationError,\n        },\n      };\n    }\n  }\n}\n","import { MultiInputValidatorValidityReducer } from '../../reducers/multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\nimport { StatefulFormElement } from '../stateful-form-element.interface';\nimport { OmittableFormElement } from '../omittable-form-element.interface';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { State } from '../../state/state.interface';\nimport { MultiInputValidatedFormElement } from './multi-input-validated-field.interface';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\nimport { copyObject } from '../../util/copy-object';\n\nexport class FinalizerFacingMultiInputValidatedFormElement\n  implements\n    StatefulFormElement<any>,\n    OmittableFormElement,\n    MultiInputValidatedFormElement\n{\n  stateChanges: Subject<State<any>>;\n  _baseFormElement: StatefulFormElement<any> & OmittableFormElement;\n  _multiInputValidatorReducer: MultiInputValidatorValidityReducer;\n\n  get state(): State<any> {\n    return {\n      ...copyObject(this._baseFormElement.state),\n      validity: this._calculateValidity(),\n    };\n  }\n\n  get omit(): boolean {\n    return this._baseFormElement.omit;\n  }\n\n  constructor(\n    baseFormElement: StatefulFormElement<any> & OmittableFormElement,\n    finalizerFacingMultiInputValidityReducer: MultiInputValidatorValidityReducer,\n  ) {\n    this._baseFormElement = baseFormElement;\n    this._multiInputValidatorReducer = finalizerFacingMultiInputValidityReducer;\n    // this._baseFormElement.stateChanges.subscribe(() => {\n    //   if (this.stateChanges) this.stateChanges.next(this.state);\n    // });\n    this._multiInputValidatorReducer.validityChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  addValidator(validator: MultiInputValidator): void {\n    this._multiInputValidatorReducer.addValidator(validator);\n  }\n\n  _calculateValidity() {\n    return Math.min(\n      this._baseFormElement.state.validity,\n      this._multiInputValidatorReducer.validity,\n    );\n  }\n}\n","import { AbstractField } from '../../fields/base/abstract-field';\nimport { FinalizerFacingMultiInputValidatedFormElement } from './finalizer-facing-multi-input-validated-form-element';\nimport { UserFacingMultiInputValidatedDualField } from './user-facing-multi-input-validated-dual-field';\nimport { UserFacingMultiInputValidatedField } from './user-facing-multi-input-validated-field';\nimport { AbstractDualField } from '../../fields/base/abstract-dual-field';\nimport { AbstractNestedForm } from '../../forms/abstract-nested-form';\nimport { UserFacingMultiInputValidatedNestedForm } from './user-facing-multi-input-validated-nested-form';\n\ninterface MultiInputValidatedFormElementFactory {\n  createUserAndFinalizerFacingMultiInputValidatedFormElement(\n    baseField: AbstractField | AbstractDualField | AbstractNestedForm,\n  ): [\n    (\n      | UserFacingMultiInputValidatedField\n      | UserFacingMultiInputValidatedDualField\n      | UserFacingMultiInputValidatedNestedForm\n    ),\n    FinalizerFacingMultiInputValidatedFormElement,\n  ];\n}\nconst MultiInputValidatedFormElementFactoryKey =\n  'MultiInputValidatedFormElementFactory';\ntype MultiInputValidatedFormElementFactoryKeyType =\n  typeof MultiInputValidatedFormElementFactoryKey;\n\nexport {\n  MultiInputValidatedFormElementFactoryKey,\n  type MultiInputValidatedFormElementFactory as MultiInputValidatedFormElementFactory,\n  type MultiInputValidatedFormElementFactoryKeyType,\n};\n","import { AbstractDualField } from '../../fields/base/abstract-dual-field';\nimport type { MultiInputValidatorValidityReducer } from '../../reducers/multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\nimport type { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport type { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport { MultiInputValidatedFormElement } from './multi-input-validated-field.interface';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { State } from '../../state/state.interface';\nimport { FieldState } from '../../state/field-state.interface';\nimport { copyObject } from '../../util/copy-object';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\n\nexport class UserFacingMultiInputValidatedDualField\n  extends AbstractDualField\n  implements MultiInputValidatedFormElement\n{\n  readonly _baseField: AbstractDualField;\n  readonly _multiInputValidatorReducer: MultiInputValidatorValidityReducer;\n  stateChanges: Subject<State<string>>;\n\n  get state(): FieldState {\n    return {\n      ...copyObject(this._baseField.state),\n      validity: this._calculateValidity(),\n    };\n  }\n\n  get omit() {\n    return this._baseField.omit;\n  }\n\n  set omit(omit: boolean) {\n    this._baseField.omit = omit;\n  }\n\n  get primaryField() {\n    return this._baseField.primaryField;\n  }\n\n  get secondaryField() {\n    return this._baseField.secondaryField;\n  }\n\n  set useSecondaryField(useSecondaryField) {\n    this._baseField.useSecondaryField = useSecondaryField;\n  }\n\n  get useSecondaryField() {\n    return this._baseField.useSecondaryField;\n  }\n\n  constructor(\n    baseField: AbstractDualField,\n    multiInputValidityReducer: MultiInputValidatorValidityReducer,\n  ) {\n    super();\n    this._baseField = baseField;\n    this._multiInputValidatorReducer = multiInputValidityReducer;\n    this._baseField.stateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this._multiInputValidatorReducer.validityChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  setValue(value: DualFieldSetValueArg) {\n    this._baseField.setValue(value);\n  }\n\n  setState(state: DualFieldSetStateArg): void {\n    this._baseField.setState(state);\n  }\n\n  reset(): void {\n    this._baseField.reset();\n  }\n\n  addValidator(validator: MultiInputValidator): void {\n    this._multiInputValidatorReducer.addValidator(validator);\n  }\n\n  _calculateValidity() {\n    return Math.min(\n      this._baseField.state.validity,\n      this._multiInputValidatorReducer.validity,\n    );\n  }\n}\n","import { BehaviorSubject, Subject } from 'rxjs';\nimport { AbstractField } from '../../fields/base/abstract-field';\nimport type { MultiInputValidatorValidityReducer } from '../../reducers/multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\nimport { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport { FieldState } from '../../state/field-state.interface';\nimport { State } from '../../state/state.interface';\nimport { copyObject } from '../../util/copy-object';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\n\nexport class UserFacingMultiInputValidatedField extends AbstractField {\n  readonly _baseField: AbstractField;\n  readonly _multiInputValidatorReducer: MultiInputValidatorValidityReducer;\n  stateChanges: Subject<State<string>>;\n\n  get state(): FieldState {\n    return {\n      ...copyObject(this._baseField.state),\n      validity: this._calculateValidity(),\n    };\n  }\n\n  get omit() {\n    return this._baseField.omit;\n  }\n\n  set omit(omit: boolean) {\n    this._baseField.omit = omit;\n  }\n\n  constructor(\n    baseField: AbstractField,\n    userFacingMultiInputValidityReducer: MultiInputValidatorValidityReducer,\n  ) {\n    super();\n    this._baseField = baseField;\n    this._multiInputValidatorReducer = userFacingMultiInputValidityReducer;\n    // this._baseField.stateChanges.subscribe(() => {\n    //   if (this.stateChanges) this.stateChanges.next(this.state);\n    // });\n    this._multiInputValidatorReducer.validityChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  setState(state: FieldState | DualFieldSetStateArg): void {\n    this._baseField.setState(state);\n  }\n  setValue(value: string | DualFieldSetValueArg): void {\n    this._baseField.setValue(value);\n  }\n  reset(): void {\n    this._baseField.reset();\n  }\n\n  addValidator(validator: MultiInputValidator): void {\n    this._multiInputValidatorReducer.addValidator(validator);\n  }\n\n  _calculateValidity() {\n    return Math.min(\n      this._baseField.state.validity,\n      this._multiInputValidatorReducer.validity,\n    );\n  }\n}\n","import { copyObject } from '../../util/copy-object';\nimport { BehaviorSubject, type Subject } from 'rxjs';\nimport type { State } from '../../state/state.interface';\nimport type { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\nimport { AbstractNestedForm } from '../../forms/abstract-nested-form';\nimport { FormElementDictionary } from '../form-element-dictionary.type';\nimport { MultiInputValidatedFormElement } from './multi-input-validated-field.interface';\nimport { MultiInputValidatorValidityReducer } from '../../reducers/multi-input-validator-validity/multi-input-validator-validity-reducer.interface';\n\nexport class UserFacingMultiInputValidatedNestedForm\n  extends AbstractNestedForm\n  implements MultiInputValidatedFormElement\n{\n  stateChanges: Subject<State<any>>;\n  _baseNestedForm: AbstractNestedForm;\n  _multiInputValidatorReducer: MultiInputValidatorValidityReducer;\n\n  get userFacingFields(): FormElementDictionary {\n    return this._baseNestedForm.userFacingFields;\n  }\n\n  get state(): State<any> {\n    return {\n      ...copyObject(this._baseNestedForm.state),\n      validity: this._calculateValidity(),\n    };\n  }\n\n  set omit(omit: boolean) {\n    this._baseNestedForm.omit = omit;\n  }\n\n  get omit(): boolean {\n    return this._baseNestedForm.omit;\n  }\n\n  get firstNonValidFormElement(): string | undefined {\n    return this._baseNestedForm.firstNonValidFormElement;\n  }\n\n  get firstNonValidFormElementChanges() : Subject<string | undefined> {\n    return this._baseNestedForm.firstNonValidFormElementChanges;\n  }\n\n  constructor(\n    baseNestedForm: AbstractNestedForm,\n    userFacingMultiInputValidityReducer: MultiInputValidatorValidityReducer,\n  ) {\n    super();\n    this._baseNestedForm = baseNestedForm;\n    this._multiInputValidatorReducer = userFacingMultiInputValidityReducer;\n    this._baseNestedForm.stateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this._multiInputValidatorReducer.validityChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  reset(): void {\n    throw new Error('Method not implemented.');\n  }\n\n  addValidator(validator: MultiInputValidator): void {\n    this._multiInputValidatorReducer.addValidator(validator);\n  }\n\n  _calculateValidity() {\n    return Math.min(\n      this._baseNestedForm.state.validity,\n      this._multiInputValidatorReducer.validity,\n    );\n  }\n}\n","import { Subject } from 'rxjs';\nimport type { OmittableFormElement } from '../form-elements/omittable-form-element.interface';\nimport { State } from '../state/state.interface';\nimport { BaseForm } from './base-form.interface';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\n\nexport abstract class AbstractNestedForm\n  implements BaseForm, OmittableFormElement\n{\n  abstract userFacingFields: FormElementDictionary;\n  abstract omit: boolean;\n  abstract stateChanges: Subject<State<any>>;\n  abstract firstNonValidFormElement: string | undefined;\n  abstract firstNonValidFormElementChanges: Subject<string | undefined>;\n  abstract state: State<any>;\n  abstract reset(): void;\n}\n","import {\n  ReducerFactory,\n  ReducerFactoryKey,\n} from '../../reducers/reducer-factory.interface';\nimport { AbstractDualField } from '../../fields/base/abstract-dual-field';\nimport { AbstractField } from '../../fields/base/abstract-field';\nimport { FinalizerFacingMultiInputValidatedFormElement } from './finalizer-facing-multi-input-validated-form-element';\nimport {\n  MultiInputValidatedFormElementFactory,\n  MultiInputValidatedFormElementFactoryKey,\n  MultiInputValidatedFormElementFactoryKeyType,\n} from './multi-input-validated-form-element-factory.interface';\nimport { UserFacingMultiInputValidatedDualField } from './user-facing-multi-input-validated-dual-field';\nimport { UserFacingMultiInputValidatedField } from './user-facing-multi-input-validated-field';\nimport { UserFacingMultiInputValidatedNestedForm } from './user-facing-multi-input-validated-nested-form';\nimport { AbstractNestedForm } from '../../forms/abstract-nested-form';\nimport { autowire } from 'undecorated-di';\n\nclass MultiInputValidatedFormElementFactoryImpl\n  implements MultiInputValidatedFormElementFactory\n{\n  _reducerFactory: ReducerFactory;\n\n  constructor(reducerFactory: ReducerFactory) {\n    this._reducerFactory = reducerFactory;\n  }\n\n  createUserAndFinalizerFacingMultiInputValidatedFormElement(\n    baseField: AbstractField | AbstractDualField | AbstractNestedForm,\n  ): [\n    (\n      | UserFacingMultiInputValidatedField\n      | UserFacingMultiInputValidatedDualField\n      | UserFacingMultiInputValidatedNestedForm\n    ),\n    FinalizerFacingMultiInputValidatedFormElement,\n  ] {\n    const userFacingReducer =\n      this._reducerFactory.createUserMultiInputValidatorValidityReducer();\n    const finalizerFacingReducer =\n      this._reducerFactory.createFinalizerFacingMultiInputValidatorValidityReducer();\n    const finalizerFacingFormElement =\n      new FinalizerFacingMultiInputValidatedFormElement(\n        baseField,\n        finalizerFacingReducer,\n      );\n\n    if (baseField instanceof AbstractNestedForm) {\n      const userFacingNestedForm = new UserFacingMultiInputValidatedNestedForm(\n        baseField,\n        userFacingReducer,\n      );\n      return [userFacingNestedForm, finalizerFacingFormElement];\n    } else if (baseField instanceof AbstractDualField) {\n      const userFacingDualField = new UserFacingMultiInputValidatedDualField(\n        baseField,\n        userFacingReducer,\n      );\n      return [userFacingDualField, finalizerFacingFormElement];\n    } else {\n      const userFacingField = new UserFacingMultiInputValidatedField(\n        baseField,\n        userFacingReducer,\n      );\n      return [userFacingField, finalizerFacingFormElement];\n    }\n  }\n}\n\nconst MultiInputValidatedFormElementFactoryService = autowire<\n  MultiInputValidatedFormElementFactoryKeyType,\n  MultiInputValidatedFormElementFactory,\n  MultiInputValidatedFormElementFactoryImpl\n>(\n  MultiInputValidatedFormElementFactoryImpl,\n  MultiInputValidatedFormElementFactoryKey,\n  [ReducerFactoryKey],\n);\n\nexport {\n  MultiInputValidatedFormElementFactoryImpl,\n  MultiInputValidatedFormElementFactoryService,\n};\n","import { autowire } from 'undecorated-di';\nimport {\n  AggregatorFactory,\n  AggregatorFactoryKey,\n} from '../../aggregators/aggregator-factory.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { FinalizerFacingMultiInputValidatedFormElement } from '../../form-elements/multi-input-validated/finalizer-facing-multi-input-validated-form-element';\nimport {\n  MultiInputValidatedFormElementFactory,\n  MultiInputValidatedFormElementFactoryKey,\n} from '../../form-elements/multi-input-validated/multi-input-validated-form-element-factory.interface';\nimport { UserFacingMultiInputValidatedDualField } from '../../form-elements/multi-input-validated/user-facing-multi-input-validated-dual-field';\nimport { UserFacingMultiInputValidatedField } from '../../form-elements/multi-input-validated/user-facing-multi-input-validated-field';\nimport { UserFacingMultiInputValidatedNestedForm } from '../../form-elements/multi-input-validated/user-facing-multi-input-validated-nested-form';\nimport {\n  MultiInputValidatorFactory,\n  MultiInputValidatorFactoryKey,\n} from '../../validators/multi-input/multi-input-validator-factory.interface';\nimport { MultiInputValidator } from '../../validators/multi-input/multi-input-validator.interface';\nimport {\n  MultiFieldValidatorsTemplateParser,\n  MultiFieldValidatorsTemplateParserKey,\n  MultiFieldValidatorsTemplateParserKeyType,\n} from './multi-field-validators-template-parser.interface';\nimport { MultiFieldValidatorsTemplate } from './multi-field-validators-template.interface';\nimport { MultiInputValidatorMessagesAggregator } from '../../aggregators/multi-input-validator-messages-aggregator.interface';\nimport { config } from '../../../config';\nimport { AbstractField } from '../../fields/base/abstract-field';\nimport {\n  AutoTransformedFieldFactory,\n  AutoTransformedFieldFactoryKey,\n} from '../../fields/auto-transformed/auto-transformed-field-factory.interface';\n\ntype MultiInputValidatedFormElementDictionary = Record<\n  string,\n  | UserFacingMultiInputValidatedField\n  | UserFacingMultiInputValidatedDualField\n  | UserFacingMultiInputValidatedNestedForm\n  | FinalizerFacingMultiInputValidatedFormElement\n>;\n\nclass MultiFieldValidatorsTemplateParserImpl\n  implements MultiFieldValidatorsTemplateParser\n{\n  _multiInputValidatorFactory: MultiInputValidatorFactory;\n  _multiInputValidatedFormElementFactory: MultiInputValidatedFormElementFactory;\n  _aggregatorFactory: AggregatorFactory;\n  _autoTransformedFieldFactory: AutoTransformedFieldFactory;\n\n  constructor(\n    multiInputValidatorFactory: MultiInputValidatorFactory,\n    multiInputValidatedFormElementFactory: MultiInputValidatedFormElementFactory,\n    aggregatorFactory: AggregatorFactory,\n    autoTransformedFieldFactory: AutoTransformedFieldFactory,\n  ) {\n    this._multiInputValidatorFactory = multiInputValidatorFactory;\n    this._multiInputValidatedFormElementFactory =\n      multiInputValidatedFormElementFactory;\n    this._aggregatorFactory = aggregatorFactory;\n    this._autoTransformedFieldFactory = autoTransformedFieldFactory;\n  }\n\n  parseTemplate(\n    template: MultiFieldValidatorsTemplate,\n    formElementDictionary: FormElementDictionary,\n  ): [\n    FormElementDictionary,\n    FormElementDictionary,\n    MultiInputValidatorMessagesAggregator,\n  ] {\n    const userFacingMultiInputValidatedFormElementDictionary =\n      {} as MultiInputValidatedFormElementDictionary;\n    const finalizerFacingMultiInputValidatedFormElementDictionary =\n      {} as MultiInputValidatedFormElementDictionary;\n    const validators: Array<MultiInputValidator> = [];\n\n    template.sync?.forEach(validatorFn => {\n      const multiInputValidator =\n        this._multiInputValidatorFactory.createSyncMultiInputValidator(\n          validatorFn,\n          formElementDictionary,\n        );\n      multiInputValidator.accessedFields.onValue(\n        this._onAccessedFields(\n          userFacingMultiInputValidatedFormElementDictionary,\n          finalizerFacingMultiInputValidatedFormElementDictionary,\n          formElementDictionary,\n          multiInputValidator,\n        ),\n      );\n      validators.push(multiInputValidator);\n    });\n\n    template.async?.forEach(validatorTemplate => {\n      const multiInputValidator =\n        this._multiInputValidatorFactory.createAsyncMultiInputValidator(\n          validatorTemplate.validatorFn,\n          formElementDictionary,\n          validatorTemplate.pendingValidatorMessage ??\n            config.globalMessages.pendingAsyncMultiFieldValidator,\n        );\n      multiInputValidator.accessedFields.onValue(\n        this._onAccessedFields(\n          userFacingMultiInputValidatedFormElementDictionary,\n          finalizerFacingMultiInputValidatedFormElementDictionary,\n          formElementDictionary,\n          multiInputValidator,\n        ),\n      );\n      validators.push(multiInputValidator);\n    });\n\n    const userFacingFormElementDictionary =\n      userFacingMultiInputValidatedFormElementDictionary as FormElementDictionary;\n    const finalizerFacingFormElementDictionary =\n      finalizerFacingMultiInputValidatedFormElementDictionary as FormElementDictionary;\n\n    for (const [fieldName, field] of Object.entries(formElementDictionary)) {\n      if (!(fieldName in userFacingFormElementDictionary)) {\n        userFacingFormElementDictionary[fieldName] = field;\n        finalizerFacingFormElementDictionary[fieldName] = field;\n      }\n    }\n\n    //decorate finalizer facing fields with auto transformed fields\n    for (const [fieldName, field] of Object.entries(\n      finalizerFacingFormElementDictionary,\n    )) {\n      if (userFacingFormElementDictionary[fieldName] instanceof AbstractField) {\n        finalizerFacingFormElementDictionary[fieldName] =\n          this._autoTransformedFieldFactory.createAutoTransformedField(\n            field as AbstractField,\n          );\n      }\n    }\n\n    const multiInputValidatorMessagesAggregator =\n      this._aggregatorFactory.createMultiInputValidatorMessagesAggregatorFromValidators(\n        validators,\n      );\n\n    return [\n      userFacingFormElementDictionary,\n      finalizerFacingFormElementDictionary,\n      multiInputValidatorMessagesAggregator,\n    ];\n  }\n\n  _onAccessedFields(\n    userFacingFormElementDictionary: MultiInputValidatedFormElementDictionary,\n    finalizerFacingFormElementDictionary: MultiInputValidatedFormElementDictionary,\n    formElementDictionary: FormElementDictionary,\n    validator: MultiInputValidator,\n  ) {\n    return (accessedFields: Set<string>) => {\n      accessedFields.forEach(fieldName => {\n        if (!(fieldName in userFacingFormElementDictionary)) {\n          const baseField = formElementDictionary[fieldName];\n          const [userFacingField, finalizerFacingField] =\n            this._multiInputValidatedFormElementFactory.createUserAndFinalizerFacingMultiInputValidatedFormElement(\n              baseField,\n            );\n          userFacingFormElementDictionary[fieldName] = userFacingField;\n          finalizerFacingFormElementDictionary[fieldName] =\n            finalizerFacingField;\n        }\n        userFacingFormElementDictionary[fieldName].addValidator(validator);\n        finalizerFacingFormElementDictionary[fieldName].addValidator(validator);\n      });\n    };\n  }\n}\n\nconst MultiFieldValidatorsTemplateParserService = autowire<\n  MultiFieldValidatorsTemplateParserKeyType,\n  MultiFieldValidatorsTemplateParser,\n  MultiFieldValidatorsTemplateParserImpl\n>(\n  MultiFieldValidatorsTemplateParserImpl,\n  MultiFieldValidatorsTemplateParserKey,\n  [\n    MultiInputValidatorFactoryKey,\n    MultiInputValidatedFormElementFactoryKey,\n    AggregatorFactoryKey,\n    AutoTransformedFieldFactoryKey,\n  ],\n);\n\nexport {\n  MultiFieldValidatorsTemplateParserImpl,\n  MultiFieldValidatorsTemplateParserService,\n};\n","import { MultiInputValidatorMessagesAggregator } from '../../aggregators/multi-input-validator-messages-aggregator.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { MultiFieldValidatorsTemplate } from './multi-field-validators-template.interface';\n\ninterface MultiFieldValidatorsTemplateParser {\n  parseTemplate(\n    template: MultiFieldValidatorsTemplate,\n    formElementDictionary: FormElementDictionary,\n  ): [\n    FormElementDictionary,\n    FormElementDictionary,\n    MultiInputValidatorMessagesAggregator,\n  ];\n}\nconst MultiFieldValidatorsTemplateParserKey =\n  'MultiFieldValidatorsTemplateParser';\ntype MultiFieldValidatorsTemplateParserKeyType =\n  typeof MultiFieldValidatorsTemplateParserKey;\n\nexport {\n  MultiFieldValidatorsTemplateParserKey,\n  type MultiFieldValidatorsTemplateParser,\n  type MultiFieldValidatorsTemplateParserKeyType,\n};\n","import { AbstractField } from '../base/abstract-field';\nimport { AutoTransformedField } from './auto-transformed-field';\n\ninterface AutoTransformedFieldFactory {\n  createAutoTransformedField(baseField: AbstractField): AutoTransformedField;\n}\nconst AutoTransformedFieldFactoryKey = 'AutoTransformedFieldFactory';\ntype AutoTransformedFieldFactoryKeyType = typeof AutoTransformedFieldFactoryKey;\n\nexport {\n  AutoTransformedFieldFactoryKey,\n  type AutoTransformedFieldFactory,\n  type AutoTransformedFieldFactoryKeyType,\n};\n","import { autowire } from 'undecorated-di';\nimport {\n  ReducerFactory,\n  ReducerFactoryKey,\n} from '../reducers/reducer-factory.interface';\nimport {\n  FinalizerManagerFactory,\n  FinalizerManagerFactoryKey,\n  FinalizerManagerFactoryKeyType,\n} from './finalizer-manager-factory.interface';\nimport { FinalizerManagerImpl } from './finalizer-manager-impl';\nimport { FinalizerManager } from './finalizer-manager.interface';\nimport { FinalizerDictionary } from './finalizer-map.type';\nimport {\n  FinalizerValidityTranslator,\n  FinalizerValidityTranslatorKey,\n} from './finalizer-validity-translator.interface';\n\nclass FinalizerManagerFactoryImpl implements FinalizerManagerFactory {\n  _reducerFactory: ReducerFactory;\n  _finalizerValidityTranslator: FinalizerValidityTranslator;\n\n  constructor(\n    reducerFactory: ReducerFactory,\n    finalizerValidityTranslator: FinalizerValidityTranslator,\n  ) {\n    this._reducerFactory = reducerFactory;\n    this._finalizerValidityTranslator = finalizerValidityTranslator;\n  }\n\n  createFinalizerManager(\n    finalizerDictionary: FinalizerDictionary,\n  ): FinalizerManager {\n    const finalizerValidityReducer =\n      this._reducerFactory.createFinalizerValidityReducer();\n    return new FinalizerManagerImpl(\n      finalizerDictionary,\n      finalizerValidityReducer,\n      this._finalizerValidityTranslator,\n    );\n  }\n}\n\nconst FinalizerManagerFactoryService = autowire<\n  FinalizerManagerFactoryKeyType,\n  FinalizerManagerFactory,\n  FinalizerManagerFactoryImpl\n>(FinalizerManagerFactoryImpl, FinalizerManagerFactoryKey, [\n  ReducerFactoryKey,\n  FinalizerValidityTranslatorKey,\n]);\n\nexport { FinalizerManagerFactoryImpl, FinalizerManagerFactoryService };\n","import { FinalizerManager } from './finalizer-manager.interface';\nimport { FinalizerDictionary } from './finalizer-map.type';\n\ninterface FinalizerManagerFactory {\n  createFinalizerManager(\n    finalizerDictionary: FinalizerDictionary,\n  ): FinalizerManager;\n}\nconst FinalizerManagerFactoryKey = 'FinalizerManager';\ntype FinalizerManagerFactoryKeyType = typeof FinalizerManagerFactoryKey;\n\nexport {\n  FinalizerManagerFactoryKey,\n  type FinalizerManagerFactory,\n  type FinalizerManagerFactoryKeyType,\n};\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { FinalizerDictionary } from './finalizer-map.type';\nimport { FinalizerValidityTranslator } from './finalizer-validity-translator.interface';\nimport { FormValue } from '../forms/form-value.type';\nimport { FinalizerValidityReducer } from '../reducers/finalizer-validity/finalizer-validity-reducer.interface';\nimport { State } from '../state/state.interface';\nimport { copyObject } from '../util/copy-object';\nimport { Message } from '../state/messages/message.interface';\nimport { FinalizerValidity } from '../state/finalizer-validity.enum';\nimport { MessageType } from '../state/messages/message-type.enum';\nimport { config } from '../../config';\nimport { FinalizerManager } from './finalizer-manager.interface';\n\nexport class FinalizerManagerImpl implements FinalizerManager {\n  stateChanges: Subject<State<any>>;\n  _value: FormValue = {};\n  _finalizerMap: FinalizerDictionary;\n  _finalizerValidityReducer: FinalizerValidityReducer;\n  _finalizerValidityTranslator: FinalizerValidityTranslator;\n\n  get state() {\n    return {\n      value: copyObject(this._value),\n      validity: this._getValidity(),\n      messages: this._getMessages(),\n    };\n  }\n\n  constructor(\n    finalizerMap: FinalizerDictionary,\n    finalizerValidityReducer: FinalizerValidityReducer,\n    finalizerValidityTranslator: FinalizerValidityTranslator,\n  ) {\n    this._finalizerMap = finalizerMap;\n    this._finalizerValidityReducer = finalizerValidityReducer;\n    this._finalizerValidityTranslator = finalizerValidityTranslator;\n    for (const finalizerName in this._finalizerMap) {\n      const finalizer = this._finalizerMap[finalizerName];\n      finalizer.stream.subscribe(finalizerStateChange => {\n        this._finalizerValidityReducer.updateTallies(\n          finalizerName,\n          finalizerStateChange.finalizerValidity,\n        );\n        delete this._value[finalizerName];\n        if (finalizerStateChange.value)\n          this._value[finalizerName] = finalizerStateChange.value;\n        if (this.stateChanges) this.stateChanges.next(this.state);\n      });\n    }\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  _getValidity() {\n    const reducedFinalizerValidity =\n      this._finalizerValidityReducer.finalizerValidity;\n    return this._finalizerValidityTranslator.translateFinalizerValidityToValidity(\n      reducedFinalizerValidity,\n    );\n  }\n\n  _getMessages() {\n    const messages: Array<Message> = [];\n    const reducedFinalizerValidity =\n      this._finalizerValidityReducer.finalizerValidity;\n    if (reducedFinalizerValidity === FinalizerValidity.FINALIZER_ERROR) {\n      messages.push({\n        type: MessageType.ERROR,\n        text: config.globalMessages.finalizerError,\n      });\n    } else if (\n      reducedFinalizerValidity === FinalizerValidity.VALID_FINALIZING\n    ) {\n      messages.push({\n        type: MessageType.PENDING,\n        text: config.globalMessages.finalizerPending,\n      });\n    }\n    return messages;\n  }\n}\n","import { autowire } from 'undecorated-di';\nimport {\n  AggregatorFactory,\n  AggregatorFactoryKey,\n} from '../aggregators/aggregator-factory.interface';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport { StatefulFormElement } from '../form-elements/stateful-form-element.interface';\nimport { AsyncFinalizer } from './async-finalizer';\nimport { DefaultFinalizer } from './default-finalizer';\nimport {\n  FinalizerFactory,\n  FinalizerFactoryKey,\n  FinalizerFactoryKeyType,\n} from './finalizer-factory.interface';\nimport { AsyncFinalizerFn } from './finalizer-functions/async-finalizer-fn.type';\nimport { SyncFinalizerFn } from './finalizer-functions/sync-finalizer-fn.type';\nimport {\n  FinalizerValidityTranslator,\n  FinalizerValidityTranslatorKey,\n} from './finalizer-validity-translator.interface';\nimport { SyncFinalizer } from './sync-finalizer';\n\nclass FinalizerFactoryImpl implements FinalizerFactory {\n  _aggregatorFactory: AggregatorFactory;\n  _finalizerValidityTranslator: FinalizerValidityTranslator;\n\n  constructor(\n    aggregatorFactory: AggregatorFactory,\n    finalizerValidityTranslator: FinalizerValidityTranslator,\n  ) {\n    this._aggregatorFactory = aggregatorFactory;\n    this._finalizerValidityTranslator = finalizerValidityTranslator;\n  }\n\n  createSyncFinalizer(\n    finalizerFn: SyncFinalizerFn,\n    fields: FormElementDictionary,\n  ): SyncFinalizer {\n    const aggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new SyncFinalizer(finalizerFn, aggregator);\n  }\n  createAsyncFinalizer(\n    finalizerFn: AsyncFinalizerFn,\n    fields: FormElementDictionary,\n  ): AsyncFinalizer {\n    const aggregator =\n      this._aggregatorFactory.createMultiFieldAggregatorFromFields(fields);\n    return new AsyncFinalizer(finalizerFn, aggregator);\n  }\n  createDefaultFinalizer(\n    baseField: StatefulFormElement<any>,\n  ): DefaultFinalizer {\n    return new DefaultFinalizer(baseField, this._finalizerValidityTranslator);\n  }\n}\n\nconst FinalizerFactoryService = autowire<\n  FinalizerFactoryKeyType,\n  FinalizerFactory,\n  FinalizerFactoryImpl\n>(FinalizerFactoryImpl, FinalizerFactoryKey, [\n  AggregatorFactoryKey,\n  FinalizerValidityTranslatorKey,\n]);\n\nexport { FinalizerFactoryImpl, FinalizerFactoryService };\n","import { AsyncAdapter } from '../adapters/async-adapter';\nimport type { MultiFieldAggregator } from '../aggregators/multi-field-aggregator.interface';\nimport type { AsyncFinalizerFn } from './finalizer-functions/async-finalizer-fn.type';\nimport type { Finalizer } from './finalizer.interface';\nimport type { FinalizerState } from '../state/finalizer-state.interface';\nimport { AccessibleFields } from './accessible-fields.interface';\nimport { OneTimeValueEmitter } from '../emitters/one-time-value-emitter.interface';\n\nexport class AsyncFinalizer\n  extends AsyncAdapter<FinalizerState>\n  implements Finalizer, AccessibleFields\n{\n  accessedFields: OneTimeValueEmitter<Set<string>>;\n\n  constructor(finalizerFn: AsyncFinalizerFn, aggregator: MultiFieldAggregator) {\n    super(finalizerFn, aggregator);\n    this.accessedFields = aggregator.accessedFields;\n  }\n}\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { FinalizerValidity } from '../state/finalizer-validity.enum';\nimport { Validity } from '../state/validity.enum';\nimport { StatefulFormElement } from '../form-elements/stateful-form-element.interface';\nimport type { FinalizerValidityTranslator } from './finalizer-validity-translator.interface';\nimport type { Finalizer } from './finalizer.interface';\nimport type { FinalizerState } from '../state/finalizer-state.interface';\nimport type { State } from '../state/state.interface';\n\nexport class DefaultFinalizer implements Finalizer {\n  stream: Subject<FinalizerState>;\n  _field: StatefulFormElement<any>;\n  _finalizerValidityTranslator: FinalizerValidityTranslator;\n\n  constructor(\n    field: StatefulFormElement<any>,\n    finalizerValidityTranslator: FinalizerValidityTranslator,\n  ) {\n    this._field = field;\n    this._finalizerValidityTranslator = finalizerValidityTranslator;\n    this._field.stateChanges.subscribe(stateChange => {\n      this.stream?.next(this._getFinalizerState(stateChange));\n    });\n    this.stream = new BehaviorSubject(\n      this._getFinalizerState(this._field.state),\n    );\n  }\n\n  _getFinalizerState(fieldState: State<any>) {\n    if (fieldState.validity < Validity.VALID_FINALIZABLE)\n      return {\n        finalizerValidity:\n          this._finalizerValidityTranslator.translateValidityToFinalizerValidity(\n            fieldState.validity,\n          ),\n      };\n\n    return {\n      finalizerValidity: FinalizerValidity.VALID_FINALIZED,\n      value: fieldState.value,\n    };\n  }\n}\n","import { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport { StatefulFormElement } from '../form-elements/stateful-form-element.interface';\nimport { AsyncFinalizer } from './async-finalizer';\nimport { DefaultFinalizer } from './default-finalizer';\nimport { AsyncFinalizerFn } from './finalizer-functions/async-finalizer-fn.type';\nimport { SyncFinalizerFn } from './finalizer-functions/sync-finalizer-fn.type';\nimport { SyncFinalizer } from './sync-finalizer';\n\ninterface FinalizerFactory {\n  createSyncFinalizer(\n    finalizerFn: SyncFinalizerFn,\n    fields: FormElementDictionary,\n  ): SyncFinalizer;\n  createAsyncFinalizer(\n    finalizerFn: AsyncFinalizerFn,\n    fields: FormElementDictionary,\n  ): AsyncFinalizer;\n  createDefaultFinalizer(baseField: StatefulFormElement<any>): DefaultFinalizer;\n}\nconst FinalizerFactoryKey = 'FinalizerFactory';\ntype FinalizerFactoryKeyType = typeof FinalizerFactoryKey;\n\nexport {\n  FinalizerFactoryKey,\n  type FinalizerFactory,\n  type FinalizerFactoryKeyType,\n};\n","import { SyncAdapter } from '../adapters/sync-adapter';\nimport { MultiFieldAggregator } from '../aggregators/multi-field-aggregator.interface';\nimport { Finalizer } from './finalizer.interface';\nimport { SyncFinalizerFn } from './finalizer-functions/sync-finalizer-fn.type';\nimport { FinalizerState } from '../state/finalizer-state.interface';\nimport { AccessibleFields } from './accessible-fields.interface';\nimport { OneTimeValueEmitter } from '../emitters/one-time-value-emitter.interface';\n\nexport class SyncFinalizer\n  extends SyncAdapter<FinalizerState>\n  implements Finalizer, AccessibleFields\n{\n  accessedFields: OneTimeValueEmitter<Set<string>>;\n\n  constructor(finalizerFn: SyncFinalizerFn, aggregator: MultiFieldAggregator) {\n    super(finalizerFn, aggregator);\n    this.accessedFields = aggregator.accessedFields;\n  }\n}\n","import { autowire } from 'undecorated-di';\nimport {\n  SubmissionManagerFactory,\n  SubmissionManagerFactoryKey,\n  SubmissionManagerFactoryKeyType,\n} from './submission-manager-factory.interface';\nimport { SubmissionManagerImpl } from './submission-manager-impl';\nimport { SubmissionManager } from './submission-manager.interface';\nimport { SubmitFn } from './submit-fn.type';\n\nclass SubmissionManagerFactoryImpl implements SubmissionManagerFactory {\n  createSubmissionManager(submitFn: SubmitFn): SubmissionManager {\n    return new SubmissionManagerImpl(submitFn);\n  }\n}\n\nconst SubmissionManagerFactoryService = autowire<\n  SubmissionManagerFactoryKeyType,\n  SubmissionManagerFactory,\n  SubmissionManagerFactoryImpl\n>(SubmissionManagerFactoryImpl, SubmissionManagerFactoryKey);\n\nexport { SubmissionManagerFactoryImpl, SubmissionManagerFactoryService };\n","import { SubmissionManager } from './submission-manager.interface';\nimport { SubmitFn } from './submit-fn.type';\n\ninterface SubmissionManagerFactory {\n  createSubmissionManager(submitFn: SubmitFn): SubmissionManager;\n}\nconst SubmissionManagerFactoryKey = 'SubmissionManagerFactory';\ntype SubmissionManagerFactoryKeyType = typeof SubmissionManagerFactoryKey;\n\nexport {\n  SubmissionManagerFactoryKey,\n  type SubmissionManagerFactory,\n  type SubmissionManagerFactoryKeyType,\n};\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { State } from '../state/state.interface';\nimport { SubmissionManager } from './submission-manager.interface';\nimport { SubmissionState } from './submission-state.interface';\nimport { SubmitFn } from './submit-fn.type';\nimport { copyObject } from '../util/copy-object';\nimport { Validity } from '../state/validity.enum';\nimport { MessageType } from '../state/messages/message-type.enum';\nimport { config } from '../../config';\n\nexport class SubmissionManagerImpl implements SubmissionManager {\n  submissionStateChanges: Subject<SubmissionState>;\n  _submitFn: SubmitFn;\n\n  _submissionState: SubmissionState = {\n    submissionAttempted: false,\n  };\n\n  set submissionState(submissionState: SubmissionState) {\n    this._submissionState = submissionState;\n    this.submissionStateChanges.next(this.submissionState);\n  }\n\n  get submissionState() {\n    return copyObject(this._submissionState);\n  }\n\n  constructor(submitFn: SubmitFn) {\n    this.submissionStateChanges = new BehaviorSubject(this.submissionState);\n    this._submitFn = submitFn;\n  }\n\n  submit(state: State<any>) {\n    this.submissionState = {\n      submissionAttempted: true,\n    };\n    return new Promise<any>((resolve, reject) => {\n      if (state.validity < Validity.VALID_FINALIZABLE) {\n        this.submissionState = {\n          ...this._submissionState,\n          message: {\n            type: MessageType.INVALID,\n            text: config.globalMessages.submissionFailed,\n          },\n        };\n        reject(new Error(config.globalMessages.submissionFailed));\n      } else {\n        this._submitFn(state)\n          .then(res => {\n            resolve(res);\n          })\n          .catch(e => {\n            if (e.message)\n              this.submissionState = {\n                ...this._submissionState,\n                message: {\n                  type: MessageType.ERROR,\n                  text: e.message,\n                },\n              };\n            reject(e);\n          });\n      }\n    });\n  }\n\n  clearMessage() {\n    this.submissionState = {\n      submissionAttempted: this.submissionState.submissionAttempted,\n    };\n  }\n\n  reset() {\n    this.submissionState = {\n      submissionAttempted: false,\n    };\n  }\n}\n","import { autowire } from 'undecorated-di';\nimport { AbstractNestedForm } from '../../forms/abstract-nested-form';\nimport { NestedForm } from '../../forms/nested-form';\nimport {\n  FinalizerTemplateDictionaryParser,\n  FinalizerTemplateDictionaryParserKey,\n} from '../finalizers/finalizer-template-dictionary-parser.interface';\nimport {\n  FormElementTemplateDictionaryParser,\n  FormElementTemplateDictionaryParserKey,\n} from '../form-elements/form-element-template-dictionary-parser.interface';\nimport {\n  MultiFieldValidatorsTemplateParser,\n  MultiFieldValidatorsTemplateParserKey,\n} from '../multi-field-validators/multi-field-validators-template-parser.interface';\nimport {\n  NestedFormTemplateParser,\n  NestedFormTemplateParserKey,\n  NestedFormTemplateParserKeyType,\n} from './nested-form-template-parser.interface';\nimport { NestedFormTemplate } from './nested-form-template.interface';\n\nclass NestedFormTemplateParserImpl implements NestedFormTemplateParser {\n  _formElementTemplateDictionaryParser: FormElementTemplateDictionaryParser;\n  _multiFieldValidatorsTemplateParser: MultiFieldValidatorsTemplateParser;\n  _finalizerTemplateDictionaryParser: FinalizerTemplateDictionaryParser;\n\n  constructor(\n    formElementTemplateDictionaryParser: FormElementTemplateDictionaryParser,\n    multiFieldValidatorsTemplateParser: MultiFieldValidatorsTemplateParser,\n    finalizerTemplateDictionaryParser: FinalizerTemplateDictionaryParser,\n  ) {\n    this._formElementTemplateDictionaryParser =\n      formElementTemplateDictionaryParser;\n    this._multiFieldValidatorsTemplateParser =\n      multiFieldValidatorsTemplateParser;\n    this._finalizerTemplateDictionaryParser = finalizerTemplateDictionaryParser;\n  }\n  parseTemplate(template: NestedFormTemplate): AbstractNestedForm {\n    const [baseFields, firstNonValidFormElementTracker] =\n      this._formElementTemplateDictionaryParser.parseTemplate(template.fields);\n    const multiFieldValidatorsTemplate = template.multiFieldValidators ?? {};\n    const [\n      userFacingFields,\n      finalizerFacingFields,\n      multiInputValidatorMessagesAggregator,\n    ] = this._multiFieldValidatorsTemplateParser.parseTemplate(\n      multiFieldValidatorsTemplate,\n      baseFields,\n    );\n    const finalizedFields = template.finalizedFields ?? {};\n    const finalizerManager =\n      this._finalizerTemplateDictionaryParser.parseTemplate(\n        finalizedFields,\n        finalizerFacingFields,\n      );\n    const form = new NestedForm(\n      userFacingFields,\n      firstNonValidFormElementTracker,\n      finalizerManager,\n      multiInputValidatorMessagesAggregator,\n      template.omitByDefault ?? false,\n    );\n    return form; //the new form part should come from a factory\n  }\n}\n\nconst NestedFormTemplateParserService = autowire<\n  NestedFormTemplateParserKeyType,\n  NestedFormTemplateParser,\n  NestedFormTemplateParserImpl\n>(NestedFormTemplateParserImpl, NestedFormTemplateParserKey, [\n  FormElementTemplateDictionaryParserKey,\n  MultiFieldValidatorsTemplateParserKey,\n  FinalizerTemplateDictionaryParserKey,\n]);\n\nexport { NestedFormTemplateParserImpl, NestedFormTemplateParserService };\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { copyObject } from '../util/copy-object';\nimport { AbstractNestedForm } from './abstract-nested-form';\nimport type { State } from '../state/state.interface';\nimport type { FinalizerManager } from '../finalizers/finalizer-manager.interface';\nimport type { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport type { MultiInputValidatorMessagesAggregator } from '../aggregators/multi-input-validator-messages-aggregator.interface';\nimport { FirstNonValidFormElementTracker } from '../trackers/first-nonvalid-form-element-tracker.interface';\n\nexport class NestedForm extends AbstractNestedForm {\n  readonly stateChanges: Subject<State<any>>;\n  readonly userFacingFields: FormElementDictionary;\n  readonly _firstNonValidFormElementTracker: FirstNonValidFormElementTracker;\n  readonly _finalizerManager: FinalizerManager;\n  readonly _multiFieldValidatorMessagesAggregator: MultiInputValidatorMessagesAggregator;\n  readonly _omitByDefault;\n  _omit;\n\n  get state() {\n    return copyObject({\n      ...this._finalizerManager.state,\n      messages: [\n        ...this._multiFieldValidatorMessagesAggregator.messages,\n        ...this._finalizerManager.state.messages,\n      ],\n      omit: this._omit,\n    });\n  }\n\n  get firstNonValidFormElement(): string | undefined {\n    return this._firstNonValidFormElementTracker.firstNonValidFormElement;\n  }\n\n  get firstNonValidFormElementChanges(): Subject<string | undefined> {\n    return this._firstNonValidFormElementTracker\n      .firstNonValidFormElementChanges;\n  }\n\n  set omit(omit: boolean) {\n    this._omit = omit;\n    if (this.stateChanges) this.stateChanges.next(this.state);\n  }\n\n  get omit() {\n    return this._omit;\n  }\n\n  constructor(\n    userFacingFields: FormElementDictionary,\n    firstNonValidFormElementTracker: FirstNonValidFormElementTracker,\n    finalizerManager: FinalizerManager,\n    multiFieldValidatorMessagesAggregator: MultiInputValidatorMessagesAggregator,\n    omitByDefault: boolean,\n  ) {\n    super();\n    this.userFacingFields = userFacingFields;\n    this._firstNonValidFormElementTracker = firstNonValidFormElementTracker;\n    this._finalizerManager = finalizerManager;\n    this._multiFieldValidatorMessagesAggregator =\n      multiFieldValidatorMessagesAggregator;\n    this._omitByDefault = omitByDefault;\n    this._omit = this._omitByDefault;\n\n    this._multiFieldValidatorMessagesAggregator.messagesChanges.subscribe(\n      () => {\n        this.stateChanges?.next(this.state);\n      },\n    );\n\n    this._finalizerManager.stateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges?.next(this.state);\n    });\n\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  reset() {\n    this._omit = this._omitByDefault;\n    for (const fieldName in this.userFacingFields) {\n      this.userFacingFields[fieldName].reset();\n    }\n  }\n}\n","import { FinalizerManager } from '../../finalizers/finalizer-manager.interface';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { FinalizerTemplateDictionary } from './finalizer-template-dictionary.type';\n\ninterface FinalizerTemplateDictionaryParser {\n  parseTemplate(\n    template: FinalizerTemplateDictionary,\n    finalizerFacingFields: FormElementDictionary,\n  ): FinalizerManager;\n}\nconst FinalizerTemplateDictionaryParserKey =\n  'FinalizerTemplateDictionaryParser';\ntype FinalizerTemplateDictionaryParserKeyType =\n  typeof FinalizerTemplateDictionaryParserKey;\n\nexport {\n  FinalizerTemplateDictionaryParserKey,\n  type FinalizerTemplateDictionaryParser,\n  FinalizerTemplateDictionaryParserKeyType,\n};\n","import { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { FirstNonValidFormElementTracker } from '../../trackers/first-nonvalid-form-element-tracker.interface';\nimport { FormElementTemplateDictionaryOrMap } from './form-element-template-dictionary-or-map.type';\n\ninterface FormElementTemplateDictionaryParser {\n  parseTemplate(\n    template: FormElementTemplateDictionaryOrMap,\n  ): [FormElementDictionary, FirstNonValidFormElementTracker];\n}\nconst FormElementTemplateDictionaryParserKey =\n  'FormElementTemplateDictionaryParser';\ntype FormElementTemplateDictionaryParserKeyType =\n  typeof FormElementTemplateDictionaryParserKey;\n\nexport {\n  FormElementTemplateDictionaryParserKey,\n  type FormElementTemplateDictionaryParser,\n  type FormElementTemplateDictionaryParserKeyType,\n};\n","import { AbstractNestedForm } from '../../forms/abstract-nested-form';\nimport { NestedFormTemplate } from './nested-form-template.interface';\n\ninterface NestedFormTemplateParser {\n  parseTemplate(template: NestedFormTemplate): AbstractNestedForm;\n}\nconst NestedFormTemplateParserKey = 'NestedFormTemplateParser';\ntype NestedFormTemplateParserKeyType = typeof NestedFormTemplateParserKey;\n\nexport {\n  NestedFormTemplateParserKey,\n  type NestedFormTemplateParser,\n  type NestedFormTemplateParserKeyType,\n};\n","import { autowire } from 'undecorated-di';\nimport { AbstractRootForm } from '../../forms/abstract-root-form';\nimport { RootForm } from '../../forms/root-form';\nimport {\n  SubmissionManagerFactory,\n  SubmissionManagerFactoryKey,\n} from '../../submission/submission-manager-factory.interface';\nimport {\n  FinalizerTemplateDictionaryParser,\n  FinalizerTemplateDictionaryParserKey,\n} from '../finalizers/finalizer-template-dictionary-parser.interface';\nimport {\n  FormElementTemplateDictionaryParser,\n  FormElementTemplateDictionaryParserKey,\n} from '../form-elements/form-element-template-dictionary-parser.interface';\nimport {\n  MultiFieldValidatorsTemplateParser,\n  MultiFieldValidatorsTemplateParserKey,\n} from '../multi-field-validators/multi-field-validators-template-parser.interface';\nimport {\n  RootFormTemplateParser,\n  RootFormTemplateParserKey,\n  RootFormTemplateParserKeyType,\n} from './root-form-template-parser.interface';\nimport { RootFormTemplate } from './root-form-template.interface';\n\nclass RootFormTemplateParserImpl implements RootFormTemplateParser {\n  _formElementTemplateDictionaryParser: FormElementTemplateDictionaryParser;\n  _multiFieldValidatorsTemplateParser: MultiFieldValidatorsTemplateParser;\n  _finalizerTemplateDictionaryParser: FinalizerTemplateDictionaryParser;\n  _submissionManagerFactory: SubmissionManagerFactory;\n\n  constructor(\n    formElementTemplateDictionaryParser: FormElementTemplateDictionaryParser,\n    multiFieldValidatorsTemplateParser: MultiFieldValidatorsTemplateParser,\n    finalizerTemplateDictionaryParser: FinalizerTemplateDictionaryParser,\n    submissionManagerFactory: SubmissionManagerFactory,\n  ) {\n    this._formElementTemplateDictionaryParser =\n      formElementTemplateDictionaryParser;\n    this._multiFieldValidatorsTemplateParser =\n      multiFieldValidatorsTemplateParser;\n    this._finalizerTemplateDictionaryParser = finalizerTemplateDictionaryParser;\n    this._submissionManagerFactory = submissionManagerFactory;\n  }\n  parseTemplate(template: RootFormTemplate): AbstractRootForm {\n    const [baseFields, firstNonValidFormElementTracker] =\n      this._formElementTemplateDictionaryParser.parseTemplate(template.fields);\n    const multiFieldValidatorsTemplate = template.multiFieldValidators ?? {};\n    const [\n      userFacingFields,\n      finalizerFacingFields,\n      multiInputValidatorMessagesAggregator,\n    ] = this._multiFieldValidatorsTemplateParser.parseTemplate(\n      multiFieldValidatorsTemplate,\n      baseFields,\n    );\n    const finalizedFields = template.finalizedFields ?? {};\n    const finalizerManager =\n      this._finalizerTemplateDictionaryParser.parseTemplate(\n        finalizedFields,\n        finalizerFacingFields,\n      );\n    const submissionManager =\n      this._submissionManagerFactory.createSubmissionManager(template.submitFn);\n    console.log('submission manager: ')\n    console.log(submissionManager);\n    console.log('after submission manager');\n    const form = new RootForm(\n      userFacingFields,\n      firstNonValidFormElementTracker,\n      finalizerManager,\n      multiInputValidatorMessagesAggregator,\n      submissionManager,\n    );\n    return form; //the new form part should come from a factory\n  }\n}\n\nconst RootFormTemplateParserService = autowire<\n  RootFormTemplateParserKeyType,\n  RootFormTemplateParser,\n  RootFormTemplateParserImpl\n>(RootFormTemplateParserImpl, RootFormTemplateParserKey, [\n  FormElementTemplateDictionaryParserKey,\n  MultiFieldValidatorsTemplateParserKey,\n  FinalizerTemplateDictionaryParserKey,\n  SubmissionManagerFactoryKey,\n]);\n\nexport { RootFormTemplateParserImpl, RootFormTemplateParserService };\n","import { BehaviorSubject, type Subject } from 'rxjs';\nimport { copyObject } from '../util/copy-object';\nimport type { State } from '../state/state.interface';\nimport { AbstractRootForm } from './abstract-root-form';\nimport type { SubmissionManager } from '../submission/submission-manager.interface';\nimport type { Message } from '../state/messages/message.interface';\nimport type { FinalizerManager } from '../finalizers/finalizer-manager.interface';\nimport type { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\nimport type { MultiInputValidatorMessagesAggregator } from '../aggregators/multi-input-validator-messages-aggregator.interface';\nimport type { SubmissionState } from '../submission/submission-state.interface';\nimport { FirstNonValidFormElementTracker } from '../trackers/first-nonvalid-form-element-tracker.interface';\n\nexport class RootForm extends AbstractRootForm {\n  readonly stateChanges: Subject<State<any>>;\n  readonly submissionStateChanges: Subject<SubmissionState>;\n  readonly userFacingFields: FormElementDictionary;\n  readonly _firstNonValidFormElementTracker: FirstNonValidFormElementTracker;\n  readonly _finalizerManager: FinalizerManager;\n  readonly _multiFieldValidatorMessagesAggregator: MultiInputValidatorMessagesAggregator;\n  readonly _submissionManager: SubmissionManager;\n\n  get state() {\n    const messages = this._aggregateMessages();\n    return copyObject({\n      ...this._finalizerManager.state,\n      messages,\n    });\n  }\n\n  get firstNonValidFormElement(): string | undefined {\n    return this._firstNonValidFormElementTracker.firstNonValidFormElement;\n  }\n\n  get firstNonValidFormElementChanges(): Subject<string | undefined> {\n    return this._firstNonValidFormElementTracker\n      .firstNonValidFormElementChanges;\n  }\n\n  get submissionState() {\n    return {\n      submissionAttempted:\n        this._submissionManager.submissionState.submissionAttempted,\n    };\n  }\n\n  constructor(\n    userFacingFields: FormElementDictionary,\n    firstNonValidFormElementTracker: FirstNonValidFormElementTracker,\n    finalizerManager: FinalizerManager,\n    multiFieldValidatorMessagesAggregator: MultiInputValidatorMessagesAggregator,\n    submissionManager: SubmissionManager,\n  ) {\n    super();\n    this.userFacingFields = userFacingFields;\n    this._firstNonValidFormElementTracker = firstNonValidFormElementTracker;\n    this._finalizerManager = finalizerManager;\n    this._multiFieldValidatorMessagesAggregator =\n      multiFieldValidatorMessagesAggregator;\n    this._submissionManager = submissionManager;\n    console.log('this.submission manager');\n    console.log(this._submissionManager);\n    console.log('after this.submissionManager');\n\n    this._multiFieldValidatorMessagesAggregator.messagesChanges.subscribe(\n      () => {\n        this.stateChanges?.next(this.state);\n      },\n    );\n\n    this._finalizerManager.stateChanges.subscribe(() => {\n      this._submissionManager.clearMessage();\n      this.stateChanges?.next(this.state);\n    });\n\n    this._submissionManager.submissionStateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n      if (this.submissionStateChanges)\n        this.submissionStateChanges.next(this.submissionState);\n    });\n\n    this.submissionStateChanges = new BehaviorSubject(this.submissionState);\n\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  submit = () => {\n    console.log(this._submissionManager);\n    console.log(this._submissionManager.submit);\n    return this._submissionManager.submit(this.state);\n  }\n\n  reset() {\n    this._submissionManager.reset();\n    for (const fieldName in this.userFacingFields) {\n      this.userFacingFields[fieldName].reset();\n    }\n  }\n\n  _aggregateMessages(): Array<Message> {\n    const messages = [\n      ...this._multiFieldValidatorMessagesAggregator.messages,\n      ...this._finalizerManager.state.messages,\n    ];\n    if (this._submissionManager.submissionState.message)\n      messages.push(this._submissionManager.submissionState.message);\n    return messages;\n  }\n}\n","import type { SubmissionState } from '../submission/submission-state.interface';\nimport type { Subject } from 'rxjs';\nimport { State } from '../state/state.interface';\nimport { BaseForm } from './base-form.interface';\nimport { FormElementDictionary } from '../form-elements/form-element-dictionary.type';\n\nexport abstract class AbstractRootForm implements BaseForm {\n  abstract userFacingFields: FormElementDictionary;\n  abstract stateChanges: Subject<State<any>>;\n  abstract firstNonValidFormElementChanges: Subject<string | undefined>;\n  abstract firstNonValidFormElement: string | undefined;\n  abstract state: State<any>;\n  abstract reset(): void;\n  abstract submissionState: SubmissionState;\n  abstract submissionStateChanges: Subject<SubmissionState>;\n  abstract submit: () => Promise<any>;\n}\n","import { AbstractRootForm } from '../../forms/abstract-root-form';\nimport { RootFormTemplate } from './root-form-template.interface';\n\ninterface RootFormTemplateParser {\n  parseTemplate(template: RootFormTemplate): AbstractRootForm;\n}\nconst RootFormTemplateParserKey = 'RootFormTemplateParser';\ntype RootFormTemplateParserKeyType = typeof RootFormTemplateParserKey;\n\nexport {\n  RootFormTemplateParserKey,\n  type RootFormTemplateParser,\n  type RootFormTemplateParserKeyType,\n};\n","import { AbstractField } from '../../../fields/base/abstract-field';\nimport { AbstractDualField } from '../../../fields/base/abstract-dual-field';\nimport { FieldTemplateVariations } from '../field-template-variations.type';\n\nexport interface BaseFieldTemplateParser {\n  parseTemplate(\n    template: FieldTemplateVariations,\n  ): AbstractField | AbstractDualField;\n}\n\nexport const BaseFieldTemplateParserKey = 'BaseFieldTemplateParser';\nexport type BaseFieldTemplateParserKeyType = typeof BaseFieldTemplateParserKey;\n","import { AbstractField } from '../../../fields/base/abstract-field';\nimport { AbstractDualField } from '../../../fields/base/abstract-dual-field';\nimport { StateControlledDualField } from '../../../fields/controlled/state-controlled-dual-field';\nimport { StateControlledField } from '../../../fields/controlled/state-controlled-field';\nimport { ValueControlledDualField } from '../../../fields/controlled/value-controlled-dual-field';\nimport { ValueControlledField } from '../../../fields/controlled/value-controlled-field';\nimport { ControlledFieldTemplateVariations } from './controlled-field-template-variations.type';\nimport { FormElementDictionary } from '../../../form-elements/form-element-dictionary.type';\n\ninterface ControlledFieldTemplateParser {\n  parseTemplateAndDecorateField(\n    baseField: AbstractField | AbstractDualField,\n    template: ControlledFieldTemplateVariations,\n    fields: FormElementDictionary,\n  ):\n    | StateControlledField\n    | StateControlledDualField\n    | ValueControlledField\n    | ValueControlledDualField;\n}\nconst ControlledFieldTemplateParserKey = 'ControlledFieldTemplateParser';\ntype ControlledFieldTemplateParserKeyType =\n  typeof ControlledFieldTemplateParserKey;\n\nexport {\n  ControlledFieldTemplateParserKey,\n  type ControlledFieldTemplateParser,\n  type ControlledFieldTemplateParserKeyType,\n};\n","import { AbstractField } from '../../fields/base/abstract-field';\nimport { DualField } from '../../fields/base/dual-field';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport { FirstNonValidFormElementTracker } from '../../trackers/first-nonvalid-form-element-tracker.interface';\nimport {\n  TrackerFactory,\n  TrackerFactoryKey,\n} from '../../trackers/tracker-factory.interface';\nimport {\n  BaseFieldTemplateParser,\n  BaseFieldTemplateParserKey,\n} from '../fields/base/base-field-template-parser.interface';\nimport {\n  ControlledFieldTemplateParser,\n  ControlledFieldTemplateParserKey,\n} from '../fields/controlled/controlled-field-template-parser.interface';\nimport { ControlledFieldTemplateVariations } from '../fields/controlled/controlled-field-template-variations.type';\nimport {\n  NestedFormTemplateParser,\n  NestedFormTemplateParserKey,\n} from '../forms/nested-form-template-parser.interface';\nimport { FieldOrNestedFormTemplate } from './field-or-nested-form-template.type';\nimport { FormElementTemplateDictionaryOrMap } from './form-element-template-dictionary-or-map.type';\nimport {\n  type FormElementTemplateDictionaryParser,\n  type FormElementTemplateDictionaryParserKeyType,\n  FormElementTemplateDictionaryParserKey,\n} from './form-element-template-dictionary-parser.interface';\nimport { autowire } from 'undecorated-di';\n\nclass FormElementDictionaryParserImpl\n  implements FormElementTemplateDictionaryParser\n{\n  _baseFieldTemplateParser: BaseFieldTemplateParser;\n  _controlledFieldTemplateParser: ControlledFieldTemplateParser;\n  _nestedFormTemplateParser: NestedFormTemplateParser;\n  _trackerFactory: TrackerFactory;\n\n  constructor(\n    baseFieldTemplateParser: BaseFieldTemplateParser,\n    controlledFieldTemplateParser: ControlledFieldTemplateParser,\n    nestedFormTemplateParser: NestedFormTemplateParser,\n    trackerFactory: TrackerFactory,\n  ) {\n    this._baseFieldTemplateParser = baseFieldTemplateParser;\n    this._controlledFieldTemplateParser = controlledFieldTemplateParser;\n    this._nestedFormTemplateParser = nestedFormTemplateParser;\n    this._trackerFactory = trackerFactory;\n  }\n\n  parseTemplate(\n    template: FormElementTemplateDictionaryOrMap,\n  ): [FormElementDictionary, FirstNonValidFormElementTracker] {\n    const formElementDictionary = {} as FormElementDictionary;\n    const firstNonValidFormElementTracker =\n      this._trackerFactory.createFirstNonValidFormElementTracker();\n    const controlledFields = new Set<string>();\n\n    for (const [fieldName, formElementTemplate] of Object.entries(template)) {\n      const formElement = this._isNestedForm(formElementTemplate)\n        ? this._nestedFormTemplateParser.parseTemplate(formElementTemplate)\n        : this._baseFieldTemplateParser.parseTemplate(formElementTemplate);\n      formElementDictionary[fieldName] = formElement;\n\n      firstNonValidFormElementTracker.trackFormElementValidity(\n        fieldName,\n        formElement,\n      );\n\n      if (this._isControlledField(formElementTemplate))\n        controlledFields.add(fieldName);\n    }\n\n    for (const fieldName of controlledFields) {\n      const formElementTemplate =\n        template instanceof Map ? template.get(fieldName) : template[fieldName];\n\n      formElementDictionary[fieldName] =\n        this._controlledFieldTemplateParser.parseTemplateAndDecorateField(\n          formElementDictionary[fieldName] as AbstractField | DualField,\n          formElementTemplate as ControlledFieldTemplateVariations,\n          formElementDictionary,\n        );\n    }\n\n    return [formElementDictionary, firstNonValidFormElementTracker];\n  }\n\n  _isNestedForm(template: FieldOrNestedFormTemplate) {\n    return typeof template === 'object' && 'fields' in template;\n  }\n\n  _isControlledField(template: FieldOrNestedFormTemplate) {\n    return (\n      typeof template === 'object' &&\n      ('asyncStateControlFn' in template ||\n        'syncStateControlFn' in template ||\n        'asyncValueControlFn' in template ||\n        'syncValueControlFn' in template)\n    );\n  }\n}\n\nconst FormElementTemplateDictionaryParserService = autowire<\n  FormElementTemplateDictionaryParserKeyType,\n  FormElementTemplateDictionaryParser,\n  FormElementDictionaryParserImpl\n>(FormElementDictionaryParserImpl, FormElementTemplateDictionaryParserKey, [\n  BaseFieldTemplateParserKey,\n  ControlledFieldTemplateParserKey,\n  NestedFormTemplateParserKey,\n  TrackerFactoryKey,\n]);\n\nexport {\n  FormElementDictionaryParserImpl,\n  FormElementTemplateDictionaryParserService,\n};\n","import { autowire } from 'undecorated-di';\nimport { AbstractField } from '../../../fields/base/abstract-field';\nimport { AbstractDualField } from '../../../fields/base/abstract-dual-field';\nimport { FieldTemplateVariations } from '../field-template-variations.type';\nimport {\n  BaseFieldTemplateParserKey,\n  type BaseFieldTemplateParser,\n  type BaseFieldTemplateParserKeyType,\n} from './base-field-template-parser.interface';\nimport {\n  type BaseFieldFactory,\n  BaseFieldFactoryKey,\n} from '../../../fields/base/base-field-factory.interface';\nimport { FieldTemplate } from './field-template.type';\nimport { BaseFieldParsingError } from './base-field-parsing-error';\nimport { BaseFieldTemplateTypes } from './base-field-template-types.enum';\nimport { DualFieldTemplate } from './dual-field-template.interface';\nimport { BaseFieldTemplate } from './base-field-template.type';\nimport type { SyncValidator } from '../../../validators/sync-validator.type';\nimport type { AsyncValidator } from '../../../validators/async-validator.type';\n\ntype ExtractedBaseFields = [\n  boolean,\n  Array<SyncValidator<string>>,\n  Array<AsyncValidator<string>>,\n];\n\nclass BaseFieldTemplateParserImpl implements BaseFieldTemplateParser {\n  _baseFieldFactory: BaseFieldFactory;\n\n  constructor(baseFieldFactory: BaseFieldFactory) {\n    this._baseFieldFactory = baseFieldFactory;\n  }\n\n  parseTemplate(\n    template: FieldTemplateVariations,\n  ): AbstractField | AbstractDualField {\n    if (typeof template === 'string') return this._parseString(template);\n    else {\n      const templateType = this._determineTemplateType(template);\n\n      if (templateType === BaseFieldTemplateTypes.DUAL_FIELD) {\n        return this._parseDualFieldTemplate(template as DualFieldTemplate);\n      } else return this._parseFieldTemplate(template as FieldTemplate);\n    }\n  }\n\n  _parseString(template: string) {\n    return this._baseFieldFactory.createField(template, false, [], []);\n  }\n\n  _determineTemplateType(\n    template: FieldTemplateVariations,\n  ): BaseFieldTemplateTypes {\n    if (typeof template !== 'object')\n      throw new BaseFieldParsingError(\n        'Field template was not a string or an object.',\n      );\n\n    const isField =\n      'defaultValue' in template && typeof template.defaultValue === 'string';\n    const isDualField =\n      ('primaryDefaultValue' in template &&\n        typeof template.primaryDefaultValue === 'string') ||\n      ('secondaryDefaultValue' in template &&\n        typeof template.primaryDefaultValue === 'string');\n\n    if (isField && isDualField)\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received ambiguous field template: template contains both defaultValue and primaryDefaultValue/secondaryDefaultValue fields.',\n      );\n    if (!isField && !isDualField)\n      throw new BaseFieldParsingError(\n        'Field template did not include a defaultValue or a primaryDefaultValue property.',\n      );\n\n    return isDualField\n      ? BaseFieldTemplateTypes.DUAL_FIELD\n      : BaseFieldTemplateTypes.FIELD;\n  }\n\n  //at this point, we know the field has a defaultValue property and lacks primaryDefaultValue/secondaryDefaultValue\n  _parseFieldTemplate(template: FieldTemplate): AbstractField {\n    if (typeof template.defaultValue !== 'string') {\n      throw new BaseFieldParsingError(\n        \"BaseFieldTemplateParser received a template object whose defaultValue was not of type 'string'\",\n      );\n    }\n    this._validateBaseFieldTemplate(template);\n    const baseFieldProps = this._extractBaseFieldProperties(template);\n    return this._baseFieldFactory.createField(\n      template.defaultValue,\n      ...baseFieldProps,\n      template.pendingAsyncValidatorMessage,\n    );\n  }\n\n  _parseDualFieldTemplate(\n    template: DualFieldTemplate,\n  ): AbstractDualField {\n    if (!('primaryDefaultValue' in template)) {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object containing a secondaryDefaultValue property, but not a primaryDefaultValue property. If you wish to create a dual field, ensure that both properties are included in the template.',\n      );\n    }\n    if (!('secondaryDefaultValue' in template)) {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object containing a primaryDefaultValue property, but not a secondaryDefaultValue property. If you wish to create a dual field, ensure that both properties are included in the template.',\n      );\n    }\n    if (typeof template.primaryDefaultValue !== 'string') {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object whose primaryDefaultValue was not of type string.',\n      );\n    }\n    if (typeof template.secondaryDefaultValue !== 'string') {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object whose secondaryDefaultValue was not of type string.',\n      );\n    }\n    this._validateBaseFieldTemplate(template);\n    const _extractBaseFieldProperties =\n      this._extractBaseFieldProperties(template);\n    return this._baseFieldFactory.createDualField(\n      template.primaryDefaultValue,\n      template.secondaryDefaultValue,\n      ..._extractBaseFieldProperties,\n      template.pendingAsyncValidatorMessage,\n    );\n  }\n\n  _validateBaseFieldTemplate(template: BaseFieldTemplate) {\n    if (\n      'omitByDefault' in template &&\n      typeof template.omitByDefault !== 'boolean'\n    ) {\n      throw new BaseFieldParsingError(\n        \"BaseFieldTemplateParser received a template object whose omitByDefault property was not of type 'boolean.'\",\n      );\n    }\n    if (\n      'syncValidators' in template &&\n      !Array.isArray(template.syncValidators)\n    ) {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object whose syncValidators property was set and was not an array. Either omit the property or set it to an array.',\n      );\n    }\n    if (\n      'asyncValidators' in template &&\n      !Array.isArray(template.asyncValidators)\n    ) {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object whose asyncValidators property was set and was not an array. Either omit the property or set it to an array.',\n      );\n    }\n    if (\n      'pendingAsyncValidatorMessage' in template &&\n      typeof template.pendingAsyncValidatorMessage !== 'string'\n    ) {\n      throw new BaseFieldParsingError(\n        'BaseFieldTemplateParser received a template object whose pendingAsyncValidatorMessage property was set and was not a string. Either omit the property or set it to a string.',\n      );\n    }\n  }\n\n  _extractBaseFieldProperties(\n    template: BaseFieldTemplate,\n  ): ExtractedBaseFields {\n    const omitByDefault = template.omitByDefault ?? false;\n    const syncValidators = template.syncValidators ?? [];\n    const asyncValidators = template.asyncValidators ?? [];\n    return [omitByDefault, syncValidators, asyncValidators];\n  }\n}\n\nconst BaseFieldTemplateParserService = autowire<\n  BaseFieldTemplateParserKeyType,\n  BaseFieldTemplateParser,\n  BaseFieldTemplateParserImpl\n>(BaseFieldTemplateParserImpl, BaseFieldTemplateParserKey, [\n  BaseFieldFactoryKey,\n]);\n\nexport { BaseFieldTemplateParserImpl, BaseFieldTemplateParserService };\n","export class BaseFieldParsingError extends Error {\n  name = 'BaseFieldParsingError';\n  constructor(message: any) {\n    super(message);\n  }\n}\n","import { autowire } from 'undecorated-di';\nimport { AbstractDualField } from '../../../fields/base/abstract-dual-field';\nimport { AbstractField } from '../../../fields/base/abstract-field';\nimport { AsyncDualFieldStateControlFn } from '../../../fields/controlled/control-functions/dual-fields/async-dual-field-state-control-fn.type';\nimport { AsyncDualFieldValueControlFn } from '../../../fields/controlled/control-functions/dual-fields/async-dual-field-value-control-fn.type';\nimport { SyncDualFieldStateControlFn } from '../../../fields/controlled/control-functions/dual-fields/sync-dual-field-state-control-fn.type';\nimport { SyncDualFieldValueControlFn } from '../../../fields/controlled/control-functions/dual-fields/sync-dual-field-value-control-fn.type';\nimport { AsyncFieldStateControlFn } from '../../../fields/controlled/control-functions/fields/async-field-state-control-fn.type';\nimport { AsyncFieldValueControlFn } from '../../../fields/controlled/control-functions/fields/async-field-value-control-fn.type';\nimport { SyncFieldStateControlFn } from '../../../fields/controlled/control-functions/fields/sync-field-state-control-fn.type';\nimport { SyncFieldValueControlFn } from '../../../fields/controlled/control-functions/fields/sync-field-value-control-fn.type';\nimport {\n  ControlledFieldFactory,\n  ControlledFieldFactoryKey,\n} from '../../../fields/controlled/controlled-field-factory.interface';\nimport { StateControlledDualField } from '../../../fields/controlled/state-controlled-dual-field';\nimport { StateControlledField } from '../../../fields/controlled/state-controlled-field';\nimport { ValueControlledDualField } from '../../../fields/controlled/value-controlled-dual-field';\nimport { ValueControlledField } from '../../../fields/controlled/value-controlled-field';\nimport { FormElementDictionary } from '../../../form-elements/form-element-dictionary.type';\nimport {\n  ControlledFieldTemplateParser,\n  ControlledFieldTemplateParserKey,\n  ControlledFieldTemplateParserKeyType,\n} from './controlled-field-template-parser.interface';\nimport { ControlledFieldTemplateParsingError } from './controlled-field-template-parsing-error';\nimport { ControlledFieldTemplateVariations } from './controlled-field-template-variations.type';\n\nenum ControlType {\n  SYNC_STATE_CONTROL_FN = 'syncStateControlFn',\n  ASYNC_STATE_CONTROL_FN = 'asyncStateControlFn',\n  SYNC_VALUE_CONTROL_FN = 'syncValueControlFn',\n  ASYNC_VALUE_CONTROL_FN = 'asyncValueControlFn',\n}\n\nclass ControlledFieldTemplateParserImpl\n  implements ControlledFieldTemplateParser\n{\n  _controlledFieldFactory: ControlledFieldFactory;\n\n  constructor(controlledFieldFactory: ControlledFieldFactory) {\n    this._controlledFieldFactory = controlledFieldFactory;\n  }\n\n  parseTemplateAndDecorateField(\n    baseField: AbstractField | AbstractDualField,\n    template: ControlledFieldTemplateVariations,\n    fields: FormElementDictionary,\n  ):\n    | StateControlledField\n    | StateControlledDualField\n    | ValueControlledField\n    | ValueControlledDualField {\n    if (!(baseField instanceof AbstractField)) {\n      throw new ControlledFieldTemplateParsingError(\n        'ControlledFieldTemplateParser expected instanceof AbstractField.',\n      );\n    }\n\n    const controlFnType = this._getControlFnType(template);\n\n    switch (controlFnType) {\n      case ControlType.SYNC_STATE_CONTROL_FN:\n        return this._controlledFieldFactory.createStateControlledFieldWithSyncAdapter(\n          baseField,\n          template.syncStateControlFn as\n            | SyncFieldStateControlFn\n            | SyncDualFieldStateControlFn,\n          fields,\n        );\n      case ControlType.ASYNC_STATE_CONTROL_FN:\n        return this._controlledFieldFactory.createStateControlledFieldWithAsyncAdapter(\n          baseField,\n          template.asyncStateControlFn as\n            | AsyncFieldStateControlFn\n            | AsyncDualFieldStateControlFn,\n          fields,\n        );\n      case ControlType.SYNC_VALUE_CONTROL_FN:\n        return this._controlledFieldFactory.createValueControlledFieldWithSyncAdapter(\n          baseField,\n          template.syncValueControlFn as\n            | SyncFieldValueControlFn\n            | SyncDualFieldValueControlFn,\n          fields,\n        );\n      case ControlType.ASYNC_VALUE_CONTROL_FN:\n        return this._controlledFieldFactory.createValueControlledFieldWithAsyncAdapter(\n          baseField,\n          template.asyncValueControlFn as\n            | AsyncFieldValueControlFn\n            | AsyncDualFieldValueControlFn,\n          fields,\n        );\n    }\n  }\n\n  _getControlFnType(\n    template: ControlledFieldTemplateVariations,\n  ): ControlType {\n    const controlTypes = Object.values(ControlType) as Array<ControlType>;\n    let controlFnType: ControlType | null = null;\n    for (const controlType of controlTypes) {\n      if (\n        controlType in template &&\n        template[controlType as keyof typeof template]\n      ) {\n        if (controlFnType) {\n          throw new ControlledFieldTemplateParsingError(\n            'ControlledFieldTemplateParser received template containing multiple control functions. Please include only one control function type.',\n          );\n        }\n        controlFnType = controlType as ControlType;\n      }\n    }\n    if (!controlFnType)\n      throw new ControlledFieldTemplateParsingError(\n        'The template passed to ControlledFieldTemplateParser lacked a control function.',\n      );\n\n    return controlFnType;\n  }\n}\n\nconst ControlledFieldTemplateParserService = autowire<\n  ControlledFieldTemplateParserKeyType,\n  ControlledFieldTemplateParser,\n  ControlledFieldTemplateParserImpl\n>(ControlledFieldTemplateParserImpl, ControlledFieldTemplateParserKey, [\n  ControlledFieldFactoryKey,\n]);\n\nexport {\n  ControlledFieldTemplateParserImpl,\n  ControlledFieldTemplateParserService,\n};\n","export class ControlledFieldTemplateParsingError extends Error {\n  name = 'ControlledFieldTemplateParsingError';\n\n  constructor(message: any) {\n    super(message);\n  }\n}\n","import { autowire } from 'undecorated-di';\nimport {\n  FinalizerFactory,\n  FinalizerFactoryKey,\n} from '../../finalizers/finalizer-factory.interface';\nimport {\n  FinalizerFnFactory,\n  FinalizerFnFactoryKey,\n} from '../../finalizers/finalizer-functions/finalizer-fn-factory.interface';\nimport {\n  FinalizerManagerFactory,\n  FinalizerManagerFactoryKey,\n} from '../../finalizers/finalizer-manager-factory.interface';\nimport { FinalizerManager } from '../../finalizers/finalizer-manager.interface';\nimport { FinalizerDictionary } from '../../finalizers/finalizer-map.type';\nimport { FormElementDictionary } from '../../form-elements/form-element-dictionary.type';\nimport {\n  FinalizerTemplateDictionaryParser,\n  FinalizerTemplateDictionaryParserKey,\n  FinalizerTemplateDictionaryParserKeyType,\n} from './finalizer-template-dictionary-parser.interface';\nimport { FinalizerTemplateDictionary } from './finalizer-template-dictionary.type';\n\nclass FinalizerTemplateDictionaryParserImpl\n  implements FinalizerTemplateDictionaryParser\n{\n  _finalizerFnFactory: FinalizerFnFactory;\n  _finalizerFactory: FinalizerFactory;\n  _finalizerManagerFactory: FinalizerManagerFactory;\n\n  constructor(\n    finalizerFnFactory: FinalizerFnFactory,\n    finalizerFactory: FinalizerFactory,\n    finalizerManagerFactory: FinalizerManagerFactory,\n  ) {\n    this._finalizerFnFactory = finalizerFnFactory;\n    this._finalizerFactory = finalizerFactory;\n    this._finalizerManagerFactory = finalizerManagerFactory;\n  }\n\n  parseTemplate(\n    template: FinalizerTemplateDictionary,\n    finalizerFacingFields: FormElementDictionary,\n  ): FinalizerManager {\n    const finalizers: FinalizerDictionary = {};\n    let originalFieldsToPreserve = new Set<string>();\n\n    for (const [finalizerName, finalizerTemplate] of Object.entries(template)) {\n      if (finalizerTemplate.syncFinalizerFn) {\n        const finalizerFn = this._finalizerFnFactory.createSyncFinalizerFn(\n          finalizerTemplate.syncFinalizerFn,\n        );\n        const finalizer = this._finalizerFactory.createSyncFinalizer(\n          finalizerFn,\n          finalizerFacingFields,\n        );\n        finalizers[finalizerName] = finalizer;\n        finalizer.accessedFields.onValue(accessedFields => {\n          if (finalizerTemplate.preserveOriginalFields) {\n            originalFieldsToPreserve = new Set([\n              ...originalFieldsToPreserve,\n              ...accessedFields,\n            ]);\n          }\n        });\n      } else if (finalizerTemplate.asyncFinalizerFn) {\n        const finalizerFn = this._finalizerFnFactory.createAsyncFinalizerFn(\n          finalizerTemplate.asyncFinalizerFn,\n        );\n        const finalizer = this._finalizerFactory.createAsyncFinalizer(\n          finalizerFn,\n          finalizerFacingFields,\n        );\n        finalizers[finalizerName] = finalizer;\n        finalizer.accessedFields.onValue(accessedFields => {\n          if (finalizerTemplate.preserveOriginalFields) {\n            originalFieldsToPreserve = new Set([\n              ...originalFieldsToPreserve,\n              ...accessedFields,\n            ]);\n          }\n        });\n      }\n    }\n\n    for (const [fieldName, field] of Object.entries(finalizerFacingFields)) {\n      if (\n        originalFieldsToPreserve.has(fieldName) ||\n        !(fieldName in finalizers)\n      ) {\n        finalizers[fieldName] =\n          this._finalizerFactory.createDefaultFinalizer(field);\n      }\n    }\n\n    return this._finalizerManagerFactory.createFinalizerManager(finalizers);\n  }\n}\n\nconst FinalizerTemplateDictionaryParserService = autowire<\n  FinalizerTemplateDictionaryParserKeyType,\n  FinalizerTemplateDictionaryParser,\n  FinalizerTemplateDictionaryParserImpl\n>(FinalizerTemplateDictionaryParserImpl, FinalizerTemplateDictionaryParserKey, [\n  FinalizerFnFactoryKey,\n  FinalizerFactoryKey,\n  FinalizerManagerFactoryKey,\n]);\n\nexport {\n  FinalizerTemplateDictionaryParserImpl,\n  FinalizerTemplateDictionaryParserService,\n};\n","import { autowire } from 'undecorated-di';\nimport { config } from '../../config';\nimport {\n  AutoTransformer,\n  AutoTransformerKey,\n  AutoTransformerKeyType,\n} from './auto-transformer.interface';\n\nclass AutoTransformerImpl implements AutoTransformer {\n  transform(value: string): string {\n    if (config.autoTrim) value = value.trim();\n\n    return value;\n  }\n}\n\nconst AutoTransformerService = autowire<\n  AutoTransformerKeyType,\n  AutoTransformer,\n  AutoTransformerImpl\n>(AutoTransformerImpl, AutoTransformerKey);\n\nexport { AutoTransformerImpl, AutoTransformerService };\n","interface AutoTransformer {\n  transform(value: string): string;\n}\nconst AutoTransformerKey = 'AutoTransformer';\ntype AutoTransformerKeyType = typeof AutoTransformerKey;\n\nexport {\n  AutoTransformerKey,\n  type AutoTransformer,\n  type AutoTransformerKeyType,\n};\n","import { autowire } from 'undecorated-di';\nimport {\n  AutoTransformer,\n  AutoTransformerKey,\n} from '../../auto-transforms/auto-transformer.interface';\nimport { AbstractField } from '../base/abstract-field';\nimport { AutoTransformedField } from './auto-transformed-field';\nimport {\n  AutoTransformedFieldFactory,\n  AutoTransformedFieldFactoryKey,\n  AutoTransformedFieldFactoryKeyType,\n} from './auto-transformed-field-factory.interface';\n\nclass AutoTransformedFieldFactoryImpl implements AutoTransformedFieldFactory {\n  _autoTransformer: AutoTransformer;\n\n  constructor(autoTransformer: AutoTransformer) {\n    this._autoTransformer = autoTransformer;\n  }\n\n  createAutoTransformedField(baseField: AbstractField): AutoTransformedField {\n    return new AutoTransformedField(baseField, this._autoTransformer);\n  }\n}\n\nconst AutoTransformedFieldFactoryService = autowire<\n  AutoTransformedFieldFactoryKeyType,\n  AutoTransformedFieldFactory,\n  AutoTransformedFieldFactoryImpl\n>(AutoTransformedFieldFactoryImpl, AutoTransformedFieldFactoryKey, [\n  AutoTransformerKey,\n]);\n\nexport { AutoTransformedFieldFactoryImpl, AutoTransformedFieldFactoryService };\n","import { BehaviorSubject, Subject } from 'rxjs';\nimport { State } from '../../state/state.interface';\nimport { AbstractField } from '../base/abstract-field';\nimport { AutoTransformer } from '../../auto-transforms/auto-transformer.interface';\nimport { DualFieldSetValueArg } from '../../state/dual-field-set-value-arg.interface';\nimport { DualFieldSetStateArg } from '../../state/dual-field-set-state-arg.interface';\nimport { FieldState } from '../../state/field-state.interface';\n\nexport class AutoTransformedField extends AbstractField {\n  stateChanges: Subject<State<string>>;\n  _baseField: AbstractField;\n  _autoTransformer: AutoTransformer;\n\n  get omit() {\n    return this._baseField.omit;\n  }\n\n  set omit(omit) {\n    this._baseField.omit = omit;\n  }\n\n  constructor(baseField: AbstractField, autoTransformer: AutoTransformer) {\n    super();\n    this._baseField = baseField;\n    this._autoTransformer = autoTransformer;\n    this._baseField.stateChanges.subscribe(() => {\n      if (this.stateChanges) this.stateChanges.next(this.state);\n    });\n    this.stateChanges = new BehaviorSubject(this.state);\n  }\n\n  get state(): State<string> {\n    return {\n      ...this._baseField.state,\n      value: this._autoTransformer.transform(this._baseField.state.value),\n    };\n  }\n\n  setState(state: FieldState | DualFieldSetStateArg): void {\n    this._baseField.setState(state);\n  }\n\n  setValue(value: string | DualFieldSetValueArg): void {\n    this._baseField.setValue(value);\n  }\n\n  reset = () => { \n    this._baseField.reset();\n  }\n}\n","import { config } from '../../../config';\nimport { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function email(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: value.length > 0 && config.emailRegex.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function inDateRange(\n  min: Date,\n  max: Date,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const millis = new Date(value).getTime();\n\n    const result: ValidatorResult = {\n      isValid:\n        !Number.isNaN(millis) &&\n        millis >= min.getTime() &&\n        millis <= max.getTime(),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function inLengthRange(\n  minLength: number,\n  maxLength: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: value.length >= minLength && value.length <= maxLength,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function inNumRange(\n  min: number,\n  max: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n    const numericValue = Number(value);\n\n    const result: ValidatorResult = {\n      isValid:\n        !Number.isNaN(numericValue) &&\n        numericValue >= min &&\n        numericValue <= max,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function includesDigit(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: /\\d/.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function includesLower(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: /[a-z]/.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { config } from '../../../config';\nimport { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function includesSymbol(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: config.symbolRegex.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function includesUpper(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: /[A-Z]/.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function maxDate(\n  max: Date,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const millis = new Date(value).getTime();\n\n    const result: ValidatorResult = {\n      isValid: !Number.isNaN(millis) && millis <= max.getTime(),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function maxLength(\n  maxLength: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: value.length <= maxLength,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function maxNum(\n  max: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const numericValue = Number(value);\n\n    const result: ValidatorResult = {\n      isValid: !Number.isNaN(numericValue) && numericValue <= max,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function minDate(\n  min: Date,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const millis = new Date(value).getTime();\n\n    const result: ValidatorResult = {\n      isValid: !Number.isNaN(millis) && millis >= min.getTime(),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function minLength(\n  minLength: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: value.length >= minLength,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function minNum(\n  min: number,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const numericValue = Number(value);\n\n    const result: ValidatorResult = {\n      isValid: !Number.isNaN(numericValue) && numericValue >= min,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function pattern(\n  pattern: RegExp,\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: pattern.test(value),\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { container } from '../../container';\nimport type { SyncValidator } from '../sync-validator.type';\nimport type { ValidatorResult } from '../validator-result.interface';\n\nconst autoTransformer = container.services.AutoTransformer;\n\nexport function required(\n  errorMessage: string,\n  successMessage?: string,\n): SyncValidator<string> {\n  return (value: string) => {\n    value = autoTransformer.transform(value);\n\n    const result: ValidatorResult = {\n      isValid: value.length > 0,\n    };\n    if (!result.isValid) {\n      result.message = errorMessage;\n    } else if (successMessage) {\n      result.message = successMessage;\n    }\n\n    return result;\n  };\n}\n","import { useRef, useMemo } from 'react';\nimport { RootFormTemplate } from '../model/templates/forms/root-form-template.interface';\nimport { container } from '../model/container';\nimport { useForm } from './use-form';\nimport { useSubmissionAttempted as _useSubmissionAttempted } from './use-submission-attempted';\n\nconst rootFormTemplateParser = container.services.RootFormTemplateParser;\n\nexport function useRootForm(template: RootFormTemplate) {\n  const form = useMemo(() => rootFormTemplateParser.parseTemplate(template), [template]) ;\n  const formRef = useRef(form);\n  const useSubmissionAttempted = () => _useSubmissionAttempted(formRef.current);\n  const submit = () => formRef.current.submit();\n\n\n  return {\n    ...useForm(formRef.current),\n    useSubmissionAttempted,\n    submit,\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { AbstractNestedForm } from '../model/forms/abstract-nested-form';\nimport { AbstractRootForm } from '../model/forms/abstract-root-form';\nimport { Subscription } from 'rxjs';\n\nexport function useFormState(form: AbstractRootForm | AbstractNestedForm) {\n  const [value, setValue] = useState(form.state.value);\n  const [validity, setValidity] = useState(form.state.validity);\n  const [messages, setMessages] = useState(form.state.messages);\n  const subRef = useRef<Subscription | null>(null);\n\n  useEffect(() => {\n    subRef.current = form.stateChanges.subscribe(stateChange => {\n      //here we would be able to compare equality if records were used to maintain state\n      setValue(stateChange.value);\n      setValidity(stateChange.validity);\n      setMessages(stateChange.messages);\n    });\n    return () => subRef.current?.unsubscribe();\n  }, [])\n\n  return {\n    value,\n    validity,\n    messages,\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { AbstractRootForm } from '../model/forms/abstract-root-form';\nimport { AbstractNestedForm } from '../model/forms/abstract-nested-form';\nimport { Subscription } from 'rxjs';\n\nexport function useFirstNonValidFormElement(\n  form: AbstractRootForm | AbstractNestedForm,\n) {\n  const [firstNonValidFormElement, setFirstNonValidFormElement] = useState(\n    form.firstNonValidFormElement,\n  );\n  const subRef = useRef<Subscription | null>(null);\n\n  useEffect(() => {\n    subRef.current = form.firstNonValidFormElementChanges.subscribe(change => {\n      setFirstNonValidFormElement(change);\n    });\n    return () => subRef.current?.unsubscribe();\n  }, []);\n\n  \n  return {\n    firstNonValidFormElement,\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { AbstractField } from '../model/fields/base/abstract-field';\nimport { Subscription } from 'rxjs';\n\nexport function useField(field: AbstractField) {\n  const [value, setValue] = useState(field.state.value);\n  const [validity, setValidity] = useState(field.state.validity);\n  const [messages, setMessages] = useState(field.state.messages);\n  const stateChangesSubRef = useRef<Subscription | null>(null);\n\n  useEffect(() => {\n    stateChangesSubRef.current = field.stateChanges.subscribe(change => {\n      setValue(change.value);\n      setValidity(change.validity);\n      setMessages(change.messages);\n    });\n    return () => stateChangesSubRef.current?.unsubscribe();\n  }, []);\n\n  const updateValue = (value: string) => {\n    field.setValue(value);\n  };\n\n  const reset = () => field.reset();\n\n  return {\n    value,\n    validity,\n    messages,\n    updateValue,\n    reset,\n  };\n}\n","import { useRef, useEffect, useState } from 'react';\r\nimport { Subscription } from 'rxjs';\r\nimport { FieldState } from '../model/state/field-state.interface';\r\nimport { AbstractDualField } from '../model/fields/base/abstract-dual-field';\r\n\r\nexport function useSwitchToSecondaryField(dualField : AbstractDualField) {\r\n  const [useSecondaryField, _setUseSecondaryField] = useState(dualField.useSecondaryField);\r\n  const stateChangesSubRef = useRef<Subscription | null>(null);\r\n\r\n  useEffect(() => {\r\n    stateChangesSubRef.current = dualField.stateChanges.subscribe((change : FieldState) => {\r\n      _setUseSecondaryField(change.useSecondaryField ? true : false);\r\n    });\r\n    return () => stateChangesSubRef.current?.unsubscribe();\r\n  }, []);\r\n\r\n  const setUseSecondaryField = (useSecondaryField : boolean) => {\r\n    dualField.useSecondaryField = useSecondaryField;\r\n  }\r\n\r\n  return {\r\n    useSecondaryField,\r\n    setUseSecondaryField\r\n  }\r\n}","import { AbstractDualField } from '../model/fields/base/abstract-dual-field';\nimport { useField } from './use-field';\nimport { useSwitchToSecondaryField as _useSwitchToSecondaryField } from './use-switch-to-secondary-field';\n\nexport function useDualField(dualField: AbstractDualField) {\n  const usePrimaryField = () => useField(dualField.primaryField);\n  const useSecondaryField = () => useField(dualField.secondaryField);\n  const useSwitchToSecondaryField = () => _useSwitchToSecondaryField(dualField);\n  const reset = () => dualField.reset();\n\n  return {\n    usePrimaryField,\n    useSecondaryField,\n    useSwitchToSecondaryField,\n    reset\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { AbstractField } from '../model/fields/base/abstract-field';\nimport { AbstractNestedForm } from '../model/forms/abstract-nested-form';\nimport { Subscription } from 'rxjs';\n\nexport function useOmittableFormElement(\n  formElement: AbstractField | AbstractNestedForm,\n) {\n  const [omitFormElement, _setOmitFormElement] = useState(formElement.omit);\n  const subRef = useRef<Subscription | null>(null);\n\n  useEffect(() => {\n    subRef.current = formElement.stateChanges.subscribe(change => {\n      _setOmitFormElement(change.omit ? true : false);\n    });\n    return () => subRef.current?.unsubscribe();\n  }, []);\n\n  const setOmitFormElement = (omit: boolean) => {\n    formElement.omit = omit;\n  };\n\n  return {\n    omitFormElement,\n    setOmitFormElement,\n  };\n}\n","import { useFormState as _useFormState } from './use-form-state';\nimport { useFirstNonValidFormElement as _useFirstNonValidFormElement } from './use-first-non-valid-form-element';\nimport { useField as _useField } from './use-field';\nimport { useDualField as _useDualField } from './use-dual-field';\nimport { useOmittableFormElement as _useOmittableFormElement } from './use-omittable-form-element';\nimport { AbstractRootForm } from '../model/forms/abstract-root-form';\nimport { AbstractNestedForm } from '../model/forms/abstract-nested-form';\nimport { AbstractField } from '../model/fields/base/abstract-field';\nimport { AbstractDualField } from '../model/fields/base/abstract-dual-field';\n\nexport function useForm(form: AbstractRootForm | AbstractNestedForm) {\n  const useFormState = () => _useFormState(form);\n  const useFirstNonValidFormElement = () => _useFirstNonValidFormElement(form);\n  const reset = () => form.reset();\n\n  const useField = (fieldName: string) => {\n    if (!(fieldName in form.userFacingFields)) {\n      throw new Error(\n        'No field with field name ' + fieldName + ' found in form fields.',\n      );\n    }\n    if (!(form.userFacingFields[fieldName] instanceof AbstractField)) {\n      throw new Error(\n        'Field ' +\n          fieldName +\n          ' exists but is not an instance of AbstractField. Use useNestedForm instead.',\n      );\n    } \n    return _useField(form.userFacingFields[fieldName] as AbstractField);\n  };\n\n  const useDualField = (fieldName: string) => {\n    if (!(fieldName in form.userFacingFields)) {\n      throw new Error(\n        'No field with field name ' + fieldName + ' found in form fields.',\n      );\n    }\n    if (!(form.userFacingFields[fieldName] instanceof AbstractDualField)) {\n      throw new Error(\n        'Field ' +\n          fieldName +\n          ' exists but is not an instance of AbstractDualField. Use useField or useNestedForm instead.',\n      );\n    } \n    return _useDualField(\n      form.userFacingFields[fieldName] as AbstractDualField,\n    );\n  };\n\n  const useNestedForm = (fieldName: string) => {\n    if (!(fieldName in form.userFacingFields)) {\n      throw new Error(\n        'No field with field name ' + fieldName + ' found in form fields.',\n      );\n    }\n    if (!(form.userFacingFields[fieldName] instanceof AbstractNestedForm)) {\n      throw new Error(\n        'Field ' +\n          fieldName +\n          ' exists but is not an instance of AbstractNestedForm.',\n      );\n    }\n    return useForm(form.userFacingFields[fieldName] as AbstractNestedForm);\n  };\n\n  const useOmittableFormElement = (fieldName: string) => {\n    if (!(fieldName in form.userFacingFields)) {\n      throw new Error(\n        'No field with field name ' + fieldName + ' found in form fields.',\n      );\n    }\n    return _useOmittableFormElement(form.userFacingFields[fieldName]);\n  };\n\n  return {\n    useFormState,\n    useFirstNonValidFormElement,\n    reset,\n    useField,\n    useDualField,\n    useNestedForm,\n    useOmittableFormElement,\n  };\n}\n","import { useState, useEffect, useRef } from 'react';\nimport { AbstractRootForm } from '../model/forms/abstract-root-form';\nimport { Subscription } from 'rxjs';\n\nexport function useSubmissionAttempted(form: AbstractRootForm) {\n  const [submissionAttempted, setSubmissionAttempted] = useState(\n    form.submissionState.submissionAttempted,\n  );\n  const subRef = useRef<Subscription | null>(null);\n\n  useEffect(() => {\n    subRef.current = form.submissionStateChanges.subscribe(change => {\n      setSubmissionAttempted(change.submissionAttempted);\n    });\n    return () => subRef.current?.unsubscribe();\n  }, []);\n\n  return {\n    submissionAttempted,\n  };\n}\n","import React, { useContext} from 'react';\r\nimport { FormContext } from './form-context';\r\nimport { Messages } from './messages.component';\r\nimport { MessageComponent } from './message-component.type';\r\n\r\nexport type FieldMessagesProps = {\r\n  fieldName : string;\r\n  messagesContainerClassName? : string; //defaults to .messages\r\n  messageClassName? : string; //defaults to .message\r\n  MessageComponent? : MessageComponent;\r\n}\r\n\r\nexport function FieldMessages({\r\n  fieldName,\r\n  messagesContainerClassName,\r\n  messageClassName,\r\n  MessageComponent\r\n} : FieldMessagesProps) {\r\n  const formCtx = useContext(FormContext);\r\n  if(formCtx === null) throw new Error('FieldMessages cannot access useField property of null FormContext');\r\n  else {\r\n    const { useField } = formCtx;\r\n    const { messages } = useField(fieldName);\r\n    return <Messages messages={messages} messagesContainerClassName={messagesContainerClassName} messageClassName={messageClassName} MessageComponent={MessageComponent} />\r\n  }\r\n}","import { createContext } from 'react';\nimport { useForm } from '../hooks/use-form';\n\nexport type FormContextType = ReturnType<typeof useForm>;\n\nexport const FormContext = createContext<FormContextType | null>(null);\n","import React, { useState, useEffect } from \"react\";\r\nimport { Message } from \"../model/state/messages/message.interface\";\r\nimport { MessageComponent } from \"./message-component.type\";\r\nimport { DefaultMessage } from \"./default-message.component\";\r\n\r\ninterface MessagesProps {\r\n  messages : Array<Message>;\r\n  messagesContainerClassName? : string; //defaults to .messages\r\n  messageClassName? : string; //defaults to .message\r\n  MessageComponent? : MessageComponent;\r\n}\r\n\r\nexport function Messages({\r\n  messages,\r\n  messagesContainerClassName = 'messages',\r\n  messageClassName = 'message',\r\n  MessageComponent = DefaultMessage,\r\n} : MessagesProps) {\r\n \r\n  const [statefulMessages, setStatefulMessages] = useState(messages);\r\n\r\n  useEffect(() => {\r\n    setStatefulMessages(messages);\r\n  }, [messages])\r\n\r\n  return (\r\n    <div className={messagesContainerClassName}>\r\n      {statefulMessages.map((message, index) => {\r\n        return (\r\n          <MessageComponent validity={message.type} text={message.text} className={messageClassName} key={index.toString()} />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { MessageComponent, MessageComponentProps } from \"./message-component.type\";\r\n\r\nexport const DefaultMessage : MessageComponent = ({className, validity, text} : MessageComponentProps) => {\r\n  return <span className={className} data-validity={validity}>{text}</span>\r\n}","import React, { useContext} from 'react';\nimport { FormContext } from './form-context';\nimport { Messages } from './messages.component';\nimport { MessageComponent } from './message-component.type';\n\ntype FormMessagesProps = {\n  messagesContainerClassName? : string; //defaults to .messages\n  messageClassName? : string; //defaults to .message\n  MessageComponent? : MessageComponent;\n}\n\nexport function FormMessages({\n  messagesContainerClassName,\n  messageClassName,\n  MessageComponent\n} : FormMessagesProps) {\n  const formCtx = useContext(FormContext);\n  if(formCtx === null) throw new Error('FieldMessages cannot access useField property of null FormContext');\n  else {\n    const { messages } = formCtx.useFormState();\n    return <Messages messages={messages} messagesContainerClassName={messagesContainerClassName} messageClassName={messageClassName} MessageComponent={MessageComponent} />\n  }\n}","import React from 'react';\r\nimport { LabelProps, Label } from \"./label.component\";\r\nimport { InputProps, Input } from \"./input.component\";\r\nimport { FieldMessagesProps, FieldMessages } from \"./field-messages.component\";\r\n\r\nexport type InputGroupProps = {\r\n  inputGroupClassName? : string;\r\n} & LabelProps & InputProps & FieldMessagesProps;\r\n\r\nexport function InputGroup({fieldName, inputGroupClassName, inputClassName, inputType, readOnly, labelText, labelClassName, messageClassName, messagesContainerClassName, MessageComponent} : InputGroupProps) {\r\n  return (\r\n    <div className={inputGroupClassName}>\r\n      <Label fieldName={fieldName} labelText={labelText} labelClassName={labelClassName} />\r\n      <Input fieldName={fieldName} inputClassName={inputClassName} inputType={inputType} readOnly={readOnly} />\r\n      <FieldMessages fieldName={fieldName} messagesContainerClassName={messagesContainerClassName} messageClassName={messageClassName} MessageComponent={MessageComponent} />\r\n    </div>\r\n  )\r\n}","import React, { useContext} from \"react\";\r\nimport { FormContext } from \"./form-context\";\r\nimport { validityToString } from \"./util/validity-to-string\";\r\n\r\nexport type LabelProps = {\r\n  fieldName : string;\r\n  labelText : string;\r\n  labelClassName? : string;\r\n}\r\n\r\nexport function Label({fieldName, labelText, labelClassName = 'label'} : LabelProps) {\r\n  const formCtx = useContext(FormContext);\r\n  if(formCtx === null) throw new Error('Input cannot access property useField of null FormContext');\r\n  else {\r\n    const { useField } = formCtx;\r\n    const { validity } = useField(fieldName);\r\n\r\n    return <label htmlFor={fieldName} className={labelClassName} data-validity={validityToString(validity)}>{labelText}</label>\r\n  }\r\n}","import { Validity } from \"../../model/state/validity.enum\";\r\n\r\nexport function validityToString(validity : Validity) {\r\n  switch(validity) {\r\n    case Validity.ERROR :\r\n      return 'ERROR';\r\n    case Validity.INVALID :\r\n      return 'INVALID';\r\n    case Validity.PENDING :\r\n      return 'PENDING';\r\n    case Validity.VALID_UNFINALIZABLE :\r\n    case Validity.VALID_FINALIZABLE :\r\n      return 'VALID';\r\n  }\r\n}","import React, { useContext } from 'react';\r\nimport { FormContext } from './form-context';\r\nimport { validityToString } from './util/validity-to-string';\r\n\r\nexport type InputProps = {\r\n  fieldName : string;\r\n  inputType : string;\r\n  inputClassName : string;\r\n  readOnly? : boolean;\r\n}\r\n\r\nexport function Input({fieldName, inputType, inputClassName, readOnly = false} : InputProps) {\r\n  const formCtx = useContext(FormContext);\r\n  if(formCtx === null) throw new Error('Input cannot access property useField of null FormContext');\r\n  else {\r\n    const { useField } = formCtx;\r\n    const { value, validity, updateValue } = useField(fieldName);\r\n    \r\n    return <input id={fieldName} type={inputType} className={inputClassName} readOnly={readOnly} data-validity={validityToString(validity)} value={value} onChange={(e) => {\r\n      console.log(e.target.value);\r\n      updateValue(e.target.value);\r\n    }} />\r\n  }\r\n}","import React, { PropsWithChildren, useContext } from 'react';\r\nimport { FormContext } from './form-context';\r\n\r\ntype NestedFormProviderProps = {\r\n  fieldName : string;\r\n} & PropsWithChildren;\r\n\r\nexport function NestedFormProvider({fieldName, children} : NestedFormProviderProps) {\r\n  const formCtx = useContext(FormContext);\r\n  if(formCtx === null) throw new Error('NestedFormProvider cannot access useNestedForm property of null context.');\r\n  else {\r\n    const { useNestedForm } = formCtx;\r\n    const nestedForm = useNestedForm(fieldName);\r\n\r\n    return (\r\n      <FormContext.Provider value={nestedForm}>\r\n        {children}\r\n      </FormContext.Provider>\r\n    )\r\n  }\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { FormContext } from \"./form-context\";\r\n\r\ninterface ResetButtonProps {\r\n  disabled : boolean;\r\n  className : string;\r\n}\r\n\r\nexport function ResetButton(props : ResetButtonProps) {\r\n  const [disabled, setDisabled] = useState(props.disabled);\r\n  const formCtx = useContext(FormContext);\r\n\r\n  useEffect(() => {\r\n    setDisabled(props.disabled);\r\n  }, [props.disabled])\r\n\r\n  if(formCtx === null) throw new Error('Reset button cannot read property reset of null FormContext');\r\n  else {\r\n    const { reset } = formCtx;\r\n\r\n    return <button onClick={reset} className={props.className} disabled={disabled}>Reset</button>\r\n  }\r\n}","import React, { PropsWithChildren, createContext } from \"react\";\nimport { useRootForm } from \"../hooks/use-root-form\";\nimport { FormContext, FormContextType } from \"./form-context\";\nimport { type RootFormTemplate } from \"../model/templates/forms/root-form-template.interface\";\nimport { useSubmissionAttempted } from \"../hooks/use-submission-attempted\";\n\ntype RootFormProviderProps = {\n  template : RootFormTemplate\n} & PropsWithChildren;\n\ntype RootFormContextType = {\n  useSubmissionAttempted : () => ReturnType<typeof useSubmissionAttempted>;\n  submit : () => Promise<any>;\n}\n\nexport const RootFormContext = createContext<RootFormContextType | null>(null);\n\nexport function RootFormProvider({ template, children } : RootFormProviderProps) {\n  const rootForm = useRootForm(template);\n\n  const rootFormCtxValue : RootFormContextType = {\n    useSubmissionAttempted : rootForm.useSubmissionAttempted,\n    submit : rootForm.submit\n  }\n\n  const formCtxValue : FormContextType = {\n    useFormState : rootForm.useFormState,\n    useFirstNonValidFormElement : rootForm.useFirstNonValidFormElement,\n    useField : rootForm.useField,\n    useDualField : rootForm.useDualField,\n    useNestedForm : rootForm.useNestedForm,\n    useOmittableFormElement : rootForm.useOmittableFormElement,\n    reset : rootForm.reset\n  }\n\n  return (\n    <RootFormContext.Provider value={rootFormCtxValue}>\n      <FormContext.Provider value={formCtxValue}>\n        {children}\n      </FormContext.Provider>\n    </RootFormContext.Provider>\n  )\n} ","import React, {useContext} from 'react';\r\nimport { RootFormContext } from './root-form-provider.component'; \r\nimport { FormContext } from './form-context';\r\nimport { Validity } from '../model/state/validity.enum';\r\n\r\ninterface SubmitButtonProps {\r\n  className : string;\r\n}\r\n\r\nexport function SubmitButton({ className } : SubmitButtonProps) {\r\n  const rootFormCtx = useContext(RootFormContext);\r\n  const formCtx = useContext(FormContext);\r\n  if(rootFormCtx === null) throw new Error('Cannot render SubmitButton inside null RootFormContext');\r\n  if(formCtx === null) throw new Error('Cannot Render SubmitButton inside null FormContext');\r\n\r\n  const { submit } = rootFormCtx;\r\n  const { validity } = formCtx.useFormState();\r\n\r\n  return <button className={className} onClick={submit} disabled={validity < Validity.VALID_FINALIZABLE}>Submit</button>\r\n}"],"mappings":"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","names":["Validity","MessageType","rc","import_undecorated_di","import_rxjs","import_rxjs","import_undecorated_di","import_undecorated_di","import_rxjs","import_rxjs","import_undecorated_di","import_undecorated_di","import_rxjs","import_undecorated_di","import_undecorated_di","import_undecorated_di","import_rxjs","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_undecorated_di","import_rxjs","import_undecorated_di","import_undecorated_di","import_rxjs","import_rxjs","import_rxjs","import_rxjs","import_rxjs","import_rxjs","import_undecorated_di","import_undecorated_di","_a","import_undecorated_di","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_rxjs","import_undecorated_di","import_undecorated_di","import_undecorated_di","ControlType","import_undecorated_di","import_undecorated_di","import_undecorated_di","import_rxjs","autoTransformer","autoTransformer","autoTransformer","autoTransformer","minLength","maxLength","autoTransformer","autoTransformer","autoTransformer","autoTransformer","autoTransformer","autoTransformer","autoTransformer","maxLength","autoTransformer","autoTransformer","autoTransformer","minLength","autoTransformer","autoTransformer","pattern","autoTransformer","import_react","import_react","import_react","value","import_react","useSecondaryField","useSwitchToSecondaryField","import_react","useFormState","useFirstNonValidFormElement","useField","useDualField","useOmittableFormElement","import_react","useSubmissionAttempted","import_react","import_react","import_react","import_react","React","React","useField","React","import_react","React","import_react","import_react","useField","React","import_react","useField","React","React","import_react","React","import_react","React","import_react","React","import_react","React"]}